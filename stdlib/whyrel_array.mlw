module Array

  use int.Int
  use ref.Ref

  clone fmap.MapApp as M with type key = int
  
  type array 'a = {
    elts   : M.t 'a;
    length : int;
  } invariant {
      length >= 0          /\
      M.size elts = length /\
      (forall i:int. 0 <= i < length -> M.mem i elts)
    } by { length = 0 ; elts = M.create () }

  let function get (a: array 'a) (i: int) : 'a
    requires { [@expl: index is in bounds] 0 <= i < length a }
    ensures  { result = M.find i a.elts }
  = M.find i a.elts
  
  let function set (a: array 'a) (i: int) (v: 'a) : array 'a
    requires { [@expl: index is in bounds] 0 <= i < length a }
    ensures  { get result i = v }
    ensures  { forall j:int. 0 <= j < length a -> j <> i -> get result j = get a j }
    ensures  { length a = length result }
  = { a with elts = M.add i v a.elts }
  
  let function make (n: int) (v: 'a) : array 'a
     requires { [@expl:array size] n >= 0 }
     ensures  { forall i:int. 0 <= i < n -> get result i = v }
     ensures  { length result = n }
  = let result = ref (M.create ()) in
    for i = 0 to n-1 do
      invariant { forall j:int. 0 <= j < i -> M.mem j !result /\ M.find j !result = v }
      invariant { forall j:int. i <= j < n -> not (M.mem j !result) }
      invariant { M.size !result = i }
      result := M.add i v !result
    done;
    { elts = !result; length = n }

  lemma array_set_get_eq : forall a: array 'a, i: int, v:'a.
    0 <= i < length a ->
    get (set a i v) i = v
    
  lemma array_set_get_neq : forall a: array 'a, i j:int, v:'a.
    0 <= i < length a ->
    0 <= j < length a ->
    i <> j ->
    get (set a i v) j = get a j

  lemma array_set_idem : forall a: array 'a, i: int, v: 'a.
    0 <= i < length a ->
    get (set (set a i v) i v) i = get (set a i v) i

  lemma array_set_shadow : forall a: array 'a, i:int, v v': 'a.
    0 <= i < length a ->
    get (set (set a i v) i v') i = get (set a i v') i
    
  lemma array_index_val : forall a: array 'a, i:int.
    0 <= i < length a ->
    exists v:'a. get a i = v
    
  lemma array_set_permut : forall a: array 'a, i j:int.
    0 <= i < length a ->
    0 <= j < length a ->
    i <> j ->
    forall v v':'a, k:int.
      0 <= k < length a ->
      get (set (set a i v) j v') k = get (set (set a j v') i v) k

end
