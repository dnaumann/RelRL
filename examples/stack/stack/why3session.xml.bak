<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="200" steplimit="0" memlimit="16000"/>
<prover id="1" name="CVC4" version="1.6" timelimit="200" steplimit="0" memlimit="16000"/>
<prover id="2" name="Z3" version="4.8.4" timelimit="200" steplimit="0" memlimit="16000"/>
<prover id="3" name="CVC3" version="2.4.1" timelimit="200" steplimit="0" memlimit="16000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="stack.mlw"/>
<theory name="State" proved="true">
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="485"/></proof>
 </goal>
</theory>
<theory name="ArrayStack" proved="true">
 <goal name="init_Stack&#39;vc" expl="VC for init_Stack" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Stack&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="142"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="122"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="285"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="569"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="259"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="3535"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="128"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.8" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="194"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="388"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.10" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="385"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="281"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="642"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.90" steps="9909"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="644"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.93" steps="12636"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="478"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="286"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2294"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.19" expl="wr {self}`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="2751"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.20" expl="wr ({} union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="7350"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.21" expl="wr {self}`head" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="452"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.22" expl="wr {self}`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="456"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.23" expl="wr {self}`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="3272"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.24" expl="wr {self}`car" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="464"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.25" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="3359"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.26" expl="wr {self}`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="472"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.27" expl="wr {self}`top" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="3063"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.28" expl="wr {self}`size" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="3071"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.29" expl="wr ({} union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="2.83" steps="7597"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.30" expl="wr {self}`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="488"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.31" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="init_Stack&#39;vc.31.0" expl="VC for init_Stack" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="init_Stack&#39;vc.31.0.0" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="8.78" steps="11905"/></proof>
    <proof prover="1"><result status="valid" time="6.55" steps="385591"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="317"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="319"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="318"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.55" steps="11659"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.36" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="stackPub">
   <goal name="init_Stack&#39;vc.36.0" expl="VC for init_Stack" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Stack&#39;vc.36.0.0" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="308"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.36.0.1" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="11.67" steps="22748"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.36.0.2" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="4.80" steps="11683"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.36.0.3" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="4.75" steps="11711"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.36.0.4" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="4.86" steps="11654"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.36.0.5" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="17.50" steps="41218"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.37" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="arrayStackPriv">
   <goal name="init_Stack&#39;vc.37.0" expl="VC for init_Stack" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Stack&#39;vc.37.0.0" expl="VC for init_Stack" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="init_Stack&#39;vc.37.0.0.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="2085"/></proof>
     </goal>
     <goal name="init_Stack&#39;vc.37.0.0.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s4.heap.rep[s1] = s.heap.rep[s1])">
      <goal name="init_Stack&#39;vc.37.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.34" steps="1445"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.37.0.0.1.1" expl="false case" proved="true">
      <transf name="unfold" proved="true" arg1="arrayStackPriv" arg2="in" arg3="Requires">
       <goal name="init_Stack&#39;vc.37.0.0.1.1.0" expl="false case" proved="true">
       <transf name="destruct" proved="true" arg1="Requires">
        <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0" expl="false case" proved="true">
        <transf name="instantiate" proved="true" arg1="Requires1" arg2="s1">
         <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0.0" expl="false case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.28" steps="595"/></proof>
          </goal>
          <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0.0.1" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.35" steps="1449"/></proof>
          </goal>
          <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0.0.2" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.26" steps="601"/></proof>
          </goal>
          <goal name="init_Stack&#39;vc.37.0.0.1.1.0.0.0.3" expl="false case" proved="true">
          <proof prover="0"><result status="valid" time="0.34" steps="1601"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.1" expl="VC for init_Stack" proved="true">
    <proof prover="3"><result status="valid" time="3.51"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.2" expl="VC for init_Stack" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="init_Stack&#39;vc.37.0.2.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="601"/></proof>
     </goal>
     <goal name="init_Stack&#39;vc.37.0.2.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(mem1 s1 s4.pool)">
      <goal name="init_Stack&#39;vc.37.0.2.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.27" steps="597"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.37.0.2.1.1" expl="false case" proved="true">
      <proof prover="0"><result status="valid" time="19.68" steps="40667"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.3" expl="VC for init_Stack" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="init_Stack&#39;vc.37.0.3.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.52" steps="2019"/></proof>
     </goal>
     <goal name="init_Stack&#39;vc.37.0.3.1" expl="false case" proved="true">
     <proof prover="2"><result status="valid" time="24.47" steps="10627705"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.4" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="15.05" steps="37777"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.5" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="10.15" steps="27973"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.6" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="593"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.7" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="5.42" steps="14221"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.8" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="15.59" steps="38698"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.37.0.9" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="307"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="69"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="push&#39;vc" expl="VC for push" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="push&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="push&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="push&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="172"/></proof>
  </goal>
  <goal name="push&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="84"/></proof>
  </goal>
  <goal name="push&#39;vc.4" expl="a := self.arr" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="83"/></proof>
  </goal>
  <goal name="push&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="push&#39;vc.6" expl="t := self.top" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="push&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="63"/></proof>
  </goal>
  <goal name="push&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="206"/></proof>
  </goal>
  <goal name="push&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="570"/></proof>
  </goal>
  <goal name="push&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="211"/></proof>
  </goal>
  <goal name="push&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1656"/></proof>
  </goal>
  <goal name="push&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="69"/></proof>
  </goal>
  <goal name="push&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="922"/></proof>
  </goal>
  <goal name="push&#39;vc.14" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="1081"/></proof>
  </goal>
  <goal name="push&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="214"/></proof>
  </goal>
  <goal name="push&#39;vc.16" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="408"/></proof>
  </goal>
  <goal name="push&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="242"/></proof>
  </goal>
  <goal name="push&#39;vc.18" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="457"/></proof>
  </goal>
  <goal name="push&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="270"/></proof>
  </goal>
  <goal name="push&#39;vc.20" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="512"/></proof>
  </goal>
  <goal name="push&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="4.88" steps="13728"/></proof>
  </goal>
  <goal name="push&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="305"/></proof>
  </goal>
  <goal name="push&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.07" steps="8959"/></proof>
  </goal>
  <goal name="push&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.28" steps="27297"/></proof>
  </goal>
  <goal name="push&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="708"/></proof>
  </goal>
  <goal name="push&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.51" steps="36689"/></proof>
  </goal>
  <goal name="push&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="311"/></proof>
  </goal>
  <goal name="push&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="310"/></proof>
  </goal>
  <goal name="push&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="3871"/></proof>
  </goal>
  <goal name="push&#39;vc.30" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="5091"/></proof>
  </goal>
  <goal name="push&#39;vc.31" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="1.24" steps="5130"/></proof>
  </goal>
  <goal name="push&#39;vc.32" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="489"/></proof>
  </goal>
  <goal name="push&#39;vc.33" expl="wr ({self} union {self}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="493"/></proof>
  </goal>
  <goal name="push&#39;vc.34" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="4863"/></proof>
  </goal>
  <goal name="push&#39;vc.35" expl="wr ({self} union {self}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="501"/></proof>
  </goal>
  <goal name="push&#39;vc.36" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="4889"/></proof>
  </goal>
  <goal name="push&#39;vc.37" expl="wr ({} union {self} union {self}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="16.53" steps="14404"/></proof>
  </goal>
  <goal name="push&#39;vc.38" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="2.45" steps="6618"/></proof>
  </goal>
  <goal name="push&#39;vc.39" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="2.43" steps="6642"/></proof>
  </goal>
  <goal name="push&#39;vc.40" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="533"/></proof>
  </goal>
  <goal name="push&#39;vc.41" expl="wr ({} union {self} union {self}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="19.48" steps="15129"/></proof>
  </goal>
  <goal name="push&#39;vc.42" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="push&#39;vc.42.0" expl="VC for push" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="push&#39;vc.42.0.0" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(x = v)">
     <goal name="push&#39;vc.42.0.0.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="8.46" steps="7526"/></proof>
     </goal>
     <goal name="push&#39;vc.42.0.0.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s.pool = s3.pool)">
      <goal name="push&#39;vc.42.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.26" steps="340"/></proof>
      </goal>
      <goal name="push&#39;vc.42.0.0.1.1" expl="false case" proved="true">
      <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
       <goal name="push&#39;vc.42.0.0.1.1.0" expl="false case" proved="true">
       <transf name="destruct" proved="true" arg1="H">
        <goal name="push&#39;vc.42.0.0.1.1.0.0" expl="false case" proved="true">
        <proof prover="0"><result status="valid" time="0.29" steps="344"/></proof>
        </goal>
        <goal name="push&#39;vc.42.0.0.1.1.0.1" expl="false case" proved="true">
        <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
         <goal name="push&#39;vc.42.0.0.1.1.0.1.0" expl="false case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="H">
          <goal name="push&#39;vc.42.0.0.1.1.0.1.0.0" expl="false case" proved="true">
          <proof prover="0"><result status="valid" time="3.82" steps="10570"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="341"/></proof>
  </goal>
  <goal name="push&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="343"/></proof>
  </goal>
  <goal name="push&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="6.88" steps="7542"/></proof>
  </goal>
  <goal name="push&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="19.54" steps="18679"/></proof>
  </goal>
  <goal name="push&#39;vc.47" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="stackPub">
   <goal name="push&#39;vc.47.0" expl="VC for push" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.47.0.0" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="333"/></proof>
    </goal>
    <goal name="push&#39;vc.47.0.1" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="7.23" steps="8159"/></proof>
    </goal>
    <goal name="push&#39;vc.47.0.2" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="12.21" steps="14312"/></proof>
    </goal>
    <goal name="push&#39;vc.47.0.3" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="13.65" steps="15027"/></proof>
    </goal>
    <goal name="push&#39;vc.47.0.4" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="14.05" steps="14606"/></proof>
    </goal>
    <goal name="push&#39;vc.47.0.5" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="27.73" steps="37271"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.48" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="arrayStackPriv">
   <goal name="push&#39;vc.48.0" expl="VC for push" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.48.0.0" expl="VC for push" proved="true">
    <transf name="unfold" proved="true" arg1="typeofRgn">
     <goal name="push&#39;vc.48.0.0.0" expl="VC for push" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="push&#39;vc.48.0.0.0.0" expl="VC for push" proved="true">
      <transf name="case" proved="true" arg1="(s1 = self)">
       <goal name="push&#39;vc.48.0.0.0.0.0" expl="true case" proved="true">
       <proof prover="0"><result status="valid" time="17.41" steps="24864"/></proof>
       </goal>
       <goal name="push&#39;vc.48.0.0.0.0.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(s4.heap.rep[s1] = s.heap.rep[s1])">
        <goal name="push&#39;vc.48.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.39" steps="802"/></proof>
        </goal>
        <goal name="push&#39;vc.48.0.0.0.0.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(mem1 p s4.heap.rep[s1])">
         <goal name="push&#39;vc.48.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.21" steps="344"/></proof>
         </goal>
         <goal name="push&#39;vc.48.0.0.0.0.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(typeofRgn s4 s4.heap.rep[s1] (Cons CellArray (Cons Cell Nil)))">
          <goal name="push&#39;vc.48.0.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="18.12" steps="24925"/></proof>
          </goal>
          <goal name="push&#39;vc.48.0.0.0.0.1.1.1.1" expl="false case" proved="true">
          <proof prover="0"><result status="valid" time="0.32" steps="863"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.1" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="27.65" steps="32511"/></proof>
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.48.0.1.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.34" steps="806"/></proof>
     </goal>
     <goal name="push&#39;vc.48.0.1.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="22.72" steps="23812"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.2" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="29.82" steps="38923"/></proof>
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.48.0.2.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.36" steps="805"/></proof>
     </goal>
     <goal name="push&#39;vc.48.0.2.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="22.80" steps="24159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.3" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="24.00" steps="31372"/></proof>
    </goal>
    <goal name="push&#39;vc.48.0.4" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.48.0.4.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="18.10" steps="20755"/></proof>
     </goal>
     <goal name="push&#39;vc.48.0.4.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="89.76" steps="186266"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.5" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.48.0.5.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="33.51" steps="57278"/></proof>
     <transf name="case" proved="true" arg1="(i = top3)">
      <goal name="push&#39;vc.48.0.5.0.0" expl="true case" proved="true">
      <proof prover="0"><result status="valid" time="2.10" steps="6440"/></proof>
      </goal>
      <goal name="push&#39;vc.48.0.5.0.1" expl="false case (true case)" proved="true">
      <proof prover="0"><result status="valid" time="11.24" steps="12678"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="push&#39;vc.48.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s.heap.arr[s1] &lt;&gt; a)">
      <goal name="push&#39;vc.48.0.5.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(a &lt;&gt; null /\ mem1 a s.heap.rep[self] /\ s.heap.rep[self] \# s.heap.rep[s1])">
       <goal name="push&#39;vc.48.0.5.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.98" steps="6519"/></proof>
       </goal>
       <goal name="push&#39;vc.48.0.5.1.0.1" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(forall o:reference. o &lt;&gt; null -&gt; mem1 o s.heap.rep[self] -&gt; not (mem1 o s.heap.rep[s1]))">
        <goal name="push&#39;vc.48.0.5.1.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.89" steps="1659136"/></proof>
        </goal>
        <goal name="push&#39;vc.48.0.5.1.0.1.1" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="11.59" steps="14358"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="push&#39;vc.48.0.5.1.1" expl="false case" proved="true">
      <proof prover="0"><result status="valid" time="20.68" steps="29781"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.6" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="792"/></proof>
    </goal>
    <goal name="push&#39;vc.48.0.7" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="12.76" steps="14471"/></proof>
    </goal>
    <goal name="push&#39;vc.48.0.8" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.48.0.8.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="347"/></proof>
     </goal>
     <goal name="push&#39;vc.48.0.8.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s.heap.slots[s.heap.arr[s1]] = s4.heap.slots[s4.heap.arr[s1]])">
      <goal name="push&#39;vc.48.0.8.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by" arg2="in" arg3="Ensures16">
       <goal name="push&#39;vc.48.0.8.1.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="Ensures16" arg2="s.heap.arr[s1]">
        <goal name="push&#39;vc.48.0.8.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Hinst">
         <goal name="push&#39;vc.48.0.8.1.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="0"><result status="valid" time="12.21" steps="15625"/></proof>
         </goal>
         <goal name="push&#39;vc.48.0.8.1.0.0.0.1" expl="destruct premise" proved="true">
         <proof prover="0"><result status="valid" time="15.76" steps="14411"/></proof>
         </goal>
         <goal name="push&#39;vc.48.0.8.1.0.0.0.2" expl="destruct premise" proved="true">
         <transf name="assert" proved="true" arg1="(s.heap.rep[self] \# s.heap.rep[s1])">
          <goal name="push&#39;vc.48.0.8.1.0.0.0.2.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="1.84" steps="6003"/></proof>
          </goal>
          <goal name="push&#39;vc.48.0.8.1.0.0.0.2.1" expl="destruct premise" proved="true">
          <transf name="assert" proved="true" arg1="(mem1 s.heap.arr[s1] (union (singleton self) s.heap.rep[self]) -&gt; False)">
           <goal name="push&#39;vc.48.0.8.1.0.0.0.2.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="118.57" steps="134708"/></proof>
           </goal>
           <goal name="push&#39;vc.48.0.8.1.0.0.0.2.1.1" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.19" steps="346"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="push&#39;vc.48.0.8.1.0.0.0.3" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="1.33" steps="4409"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="push&#39;vc.48.0.8.1.1" expl="false case" proved="true">
      <proof prover="0"><result status="valid" time="69.43" steps="131985"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.48.0.9" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="332"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pop&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="pop&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="90"/></proof>
  </goal>
  <goal name="pop&#39;vc.2" expl="a := self.arr" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="73"/></proof>
  </goal>
  <goal name="pop&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="pop&#39;vc.4" expl="t := self.top" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="78"/></proof>
  </goal>
  <goal name="pop&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="140"/></proof>
  </goal>
  <goal name="pop&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1723"/></proof>
  </goal>
  <goal name="pop&#39;vc.7" expl="result := a.{t} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="760"/></proof>
  </goal>
  <goal name="pop&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="226"/></proof>
  </goal>
  <goal name="pop&#39;vc.9" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="140"/></proof>
  </goal>
  <goal name="pop&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="90"/></proof>
  </goal>
  <goal name="pop&#39;vc.11" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="pop&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="122"/></proof>
  </goal>
  <goal name="pop&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="310"/></proof>
  </goal>
  <goal name="pop&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1556"/></proof>
  </goal>
  <goal name="pop&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="315"/></proof>
  </goal>
  <goal name="pop&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.10" steps="6690"/></proof>
  </goal>
  <goal name="pop&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="128"/></proof>
  </goal>
  <goal name="pop&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1877"/></proof>
  </goal>
  <goal name="pop&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1075"/></proof>
  </goal>
  <goal name="pop&#39;vc.20" expl="wr ({self} union {self}`rep union {result})`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="221"/></proof>
  </goal>
  <goal name="pop&#39;vc.21" expl="wr ({self} union {self}`rep union {result})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="225"/></proof>
  </goal>
  <goal name="pop&#39;vc.22" expl="wr ({self} union {self}`rep union {result})`size" proved="true">
  <proof prover="0"><result status="valid" time="1.05" steps="5550"/></proof>
  </goal>
  <goal name="pop&#39;vc.23" expl="wr ({self} union {self}`rep union {result})`top" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="2296"/></proof>
  </goal>
  <goal name="pop&#39;vc.24" expl="wr ({self} union {self}`rep union {result})`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="237"/></proof>
  </goal>
  <goal name="pop&#39;vc.25" expl="wr ({self} union {self}`rep union {result})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="241"/></proof>
  </goal>
  <goal name="pop&#39;vc.26" expl="wr ({self} union {self}`rep union {result})`car" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="245"/></proof>
  </goal>
  <goal name="pop&#39;vc.27" expl="wr ({self} union {self}`rep union {result})`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="249"/></proof>
  </goal>
  <goal name="pop&#39;vc.28" expl="wr ({self} union {self}`rep union {result})`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="253"/></proof>
  </goal>
  <goal name="pop&#39;vc.29" expl="wr ({self} union {self}`rep union {result})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="257"/></proof>
  </goal>
  <goal name="pop&#39;vc.30" expl="wr ({self} union {self}`rep union {result})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="261"/></proof>
  </goal>
  <goal name="pop&#39;vc.31" expl="wr ({self} union {self}`rep union {result})`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="5173"/></proof>
  </goal>
  <goal name="pop&#39;vc.32" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="pop&#39;vc.32.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pop&#39;vc.32.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.24" steps="4261"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="160"/></proof>
  </goal>
  <goal name="pop&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="5692"/></proof>
  </goal>
  <goal name="pop&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="164"/></proof>
  </goal>
  <goal name="pop&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="2888"/></proof>
  </goal>
  <goal name="pop&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="164"/></proof>
  </goal>
  <goal name="pop&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="9.23" steps="29699"/></proof>
  </goal>
  <goal name="pop&#39;vc.39" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="arrayStackPriv">
   <goal name="pop&#39;vc.39.0" expl="VC for pop" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pop&#39;vc.39.0.0" expl="VC for pop" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="pop&#39;vc.39.0.0.0" expl="VC for pop" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="pop&#39;vc.39.0.0.0.0" expl="VC for pop" proved="true">
      <proof prover="1"><result status="valid" time="9.13" steps="676856"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pop&#39;vc.39.0.1" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="36.58" steps="68034"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.2" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="4.72" steps="18584"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.3" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="4.54" steps="15214"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.4" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="19.97" steps="67631"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.5" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="28.91" steps="105947"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.6" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="412"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.7" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="2.16" steps="8558"/></proof>
    </goal>
    <goal name="pop&#39;vc.39.0.8" expl="VC for pop" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="pop&#39;vc.39.0.8.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="3.31" steps="10432"/></proof>
     </goal>
     <goal name="pop&#39;vc.39.0.8.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="3.35" steps="13778"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pop&#39;vc.39.0.9" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.05" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getMaxSize&#39;vc" expl="VC for getMaxSize" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getMaxSize&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getCellValue&#39;vc" expl="VC for getCellValue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getCellValue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.1" expl="result := c.cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="25"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_ArrayStack" proved="true">
 <transf name="unfold" proved="true" arg1="arrayStackPriv">
  <goal name="boundary_frames_invariant_ArrayStack.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_ArrayStack.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="boundary_frames_invariant_ArrayStack.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="31.05" steps="27717"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="2917"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.2" proved="true">
    <proof prover="0"><result status="valid" time="2.38" steps="10211"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.3" proved="true">
    <proof prover="0"><result status="valid" time="3.84" steps="17310"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.4" proved="true">
    <proof prover="0"><result status="valid" time="11.32" steps="30746"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.5" proved="true">
    <proof prover="0"><result status="valid" time="21.86" steps="81831"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.6" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="2489"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.7" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="2485"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.8" proved="true">
    <proof prover="0"><result status="valid" time="73.59" steps="134588"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ArrayStack.0.0.9" proved="true">
    <proof prover="0"><result status="valid" time="66.00" steps="192261"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Client1" proved="true">
 <goal name="prog&#39;vc" expl="VC for prog" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prog&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="18"/></proof>
  </goal>
  <goal name="prog&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
  <goal name="prog&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="prog&#39;vc.3" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="prog&#39;vc.4" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="prog&#39;vc.5" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="63"/></proof>
  </goal>
  <goal name="prog&#39;vc.6" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1648"/></proof>
  </goal>
  <goal name="prog&#39;vc.7" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="311"/></proof>
  </goal>
  <goal name="prog&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="371"/></proof>
  </goal>
  <goal name="prog&#39;vc.9" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="375"/></proof>
  </goal>
  <goal name="prog&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="2055"/></proof>
  </goal>
  <goal name="prog&#39;vc.11" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="3433"/></proof>
  </goal>
  <goal name="prog&#39;vc.12" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="996"/></proof>
  </goal>
  <goal name="prog&#39;vc.13" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.13.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.13.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
    <transf name="assert" proved="true" arg1="(not (p = stk))">
     <goal name="prog&#39;vc.13.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.09" steps="136"/></proof>
     </goal>
     <goal name="prog&#39;vc.13.0.0.1" expl="wr ({stk} union {stk}`rep)`head" proved="true">
     <proof prover="0"><result status="valid" time="0.13" steps="443"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.14" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="309"/></proof>
  </goal>
  <goal name="prog&#39;vc.15" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.15.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.15.0.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="901"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.16" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="317"/></proof>
  </goal>
  <goal name="prog&#39;vc.17" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.32" steps="3483"/></proof>
  </goal>
  <goal name="prog&#39;vc.18" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="325"/></proof>
  </goal>
  <goal name="prog&#39;vc.19" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="2.34" steps="3496"/></proof>
  </goal>
  <goal name="prog&#39;vc.20" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="2.37" steps="3505"/></proof>
  </goal>
  <goal name="prog&#39;vc.21" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1041"/></proof>
  </goal>
  <goal name="prog&#39;vc.22" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="341"/></proof>
  </goal>
  <goal name="prog&#39;vc.23" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="150"/></proof>
  </goal>
  <goal name="prog&#39;vc.24" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="151"/></proof>
  </goal>
  <goal name="prog&#39;vc.25" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="152"/></proof>
  </goal>
  <goal name="prog&#39;vc.26" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="152"/></proof>
  </goal>
  <goal name="prog&#39;vc.27" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.27.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="16.44" steps="33304"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="562"/></proof>
  </goal>
  <goal name="prog&#39;vc.29" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.30" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.31" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.32" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.33" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="186"/></proof>
  </goal>
  <goal name="prog&#39;vc.34" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="186"/></proof>
  </goal>
  <goal name="prog&#39;vc.35" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="800"/></proof>
  </goal>
  <goal name="prog&#39;vc.36" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.32" steps="5370"/></proof>
  </goal>
  <goal name="prog&#39;vc.37" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="34.60" steps="27993"/></proof>
  </goal>
  <goal name="prog&#39;vc.38" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="36.81" steps="28845"/></proof>
  </goal>
  <goal name="prog&#39;vc.39" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="3.84" steps="7545"/></proof>
  </goal>
  <goal name="prog&#39;vc.40" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="613"/></proof>
  </goal>
  <goal name="prog&#39;vc.41" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="34.66" steps="28019"/></proof>
  </goal>
  <goal name="prog&#39;vc.42" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="621"/></proof>
  </goal>
  <goal name="prog&#39;vc.43" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="37.37" steps="29993"/></proof>
  </goal>
  <goal name="prog&#39;vc.44" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="34.89" steps="27794"/></proof>
  </goal>
  <goal name="prog&#39;vc.45" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="35.12" steps="28062"/></proof>
  </goal>
  <goal name="prog&#39;vc.46" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="36.79" steps="29078"/></proof>
  </goal>
  <goal name="prog&#39;vc.47" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="9.15" steps="7739"/></proof>
  </goal>
  <goal name="prog&#39;vc.48" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="36.54" steps="28804"/></proof>
  </goal>
  <goal name="prog&#39;vc.49" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="272"/></proof>
  </goal>
  <goal name="prog&#39;vc.50" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="274"/></proof>
  </goal>
  <goal name="prog&#39;vc.51" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="276"/></proof>
  </goal>
  <goal name="prog&#39;vc.52" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="277"/></proof>
  </goal>
  <goal name="prog&#39;vc.53" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.53.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.53.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="diff_def" arg2="in" arg3="H">
     <goal name="prog&#39;vc.53.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H">
      <goal name="prog&#39;vc.53.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="rewrite" proved="true" arg1="diff_def">
       <goal name="prog&#39;vc.53.0.0.0.0.0" expl="VC for prog" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="prog&#39;vc.53.0.0.0.0.0.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="0.30" steps="1716"/></proof>
        </goal>
        <goal name="prog&#39;vc.53.0.0.0.0.0.1" expl="VC for prog" proved="true">
        <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H1">
         <goal name="prog&#39;vc.53.0.0.0.0.0.1.0" expl="VC for prog" proved="true">
         <transf name="destruct_rec" proved="true" arg1="H1">
          <goal name="prog&#39;vc.53.0.0.0.0.0.1.0.0" expl="VC for prog" proved="true">
          <proof prover="0"><result status="valid" time="0.20" steps="860"/></proof>
          </goal>
          <goal name="prog&#39;vc.53.0.0.0.0.0.1.0.1" expl="VC for prog" proved="true">
          <proof prover="0"><result status="valid" time="52.92" steps="46634"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.54" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.55" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.56" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.57" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.58" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.59" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.60" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.61" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.62" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.63" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.64" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.65" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.66" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.67" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.68" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.69" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="186"/></proof>
  </goal>
  <goal name="prog&#39;vc.70" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="186"/></proof>
  </goal>
  <goal name="prog&#39;vc.71" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="187"/></proof>
  </goal>
  <goal name="prog&#39;vc.72" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="187"/></proof>
  </goal>
  <goal name="prog&#39;vc.73" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="187"/></proof>
  </goal>
  <goal name="prog&#39;vc.74" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.74.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="prog&#39;vc.74.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="2.96" steps="6863"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.75" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="257"/></proof>
  </goal>
  <goal name="prog&#39;vc.76" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="257"/></proof>
  </goal>
  <goal name="prog&#39;vc.77" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="257"/></proof>
  </goal>
  <goal name="prog&#39;vc.78" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="257"/></proof>
  </goal>
  <goal name="prog&#39;vc.79" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="258"/></proof>
  </goal>
  <goal name="prog&#39;vc.80" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="258"/></proof>
  </goal>
  <goal name="prog&#39;vc.81" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.81.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="79.49" steps="47523"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.82" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="326"/></proof>
  </goal>
  <goal name="prog&#39;vc.83" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="326"/></proof>
  </goal>
  <goal name="prog&#39;vc.84" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="326"/></proof>
  </goal>
  <goal name="prog&#39;vc.85" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="326"/></proof>
  </goal>
  <goal name="prog&#39;vc.86" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="341"/></proof>
  </goal>
  <goal name="prog&#39;vc.87" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.07" steps="10300"/></proof>
  </goal>
  <goal name="prog&#39;vc.88" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="138.82" steps="74896"/></proof>
  </goal>
  <goal name="prog&#39;vc.89" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="4104"/></proof>
  </goal>
  <goal name="prog&#39;vc.90" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="4110"/></proof>
  </goal>
  <goal name="prog&#39;vc.91" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="767"/></proof>
  </goal>
  <goal name="prog&#39;vc.92" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="2.25" steps="4122"/></proof>
  </goal>
  <goal name="prog&#39;vc.93" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="775"/></proof>
  </goal>
  <goal name="prog&#39;vc.94" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.24" steps="4135"/></proof>
  </goal>
  <goal name="prog&#39;vc.95" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="2.24" steps="4140"/></proof>
  </goal>
  <goal name="prog&#39;vc.96" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.96.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <proof prover="1"><result status="valid" time="4.32" steps="367069"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.97" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="112.74" steps="56353"/></proof>
  </goal>
  <goal name="prog&#39;vc.98" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="4158"/></proof>
  </goal>
  <goal name="prog&#39;vc.99" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="2.32" steps="4164"/></proof>
  </goal>
  <goal name="prog&#39;vc.100" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="362"/></proof>
  </goal>
  <goal name="prog&#39;vc.101" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="364"/></proof>
  </goal>
  <goal name="prog&#39;vc.102" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="366"/></proof>
  </goal>
  <goal name="prog&#39;vc.103" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="367"/></proof>
  </goal>
  <goal name="prog&#39;vc.104" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="367"/></proof>
  </goal>
  <goal name="prog&#39;vc.105" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="367"/></proof>
  </goal>
  <goal name="prog&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="255"/></proof>
  </goal>
  <goal name="prog&#39;vc.107" expl="wr ({} union pool union pool`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="18.88" steps="22374"/></proof>
  </goal>
  <goal name="prog&#39;vc.108" expl="wr ({} union pool union pool`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="19.23" steps="22211"/></proof>
  </goal>
  <goal name="prog&#39;vc.109" expl="wr ({} union pool union pool`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="1.84" steps="5532"/></proof>
  </goal>
  <goal name="prog&#39;vc.110" expl="wr (pool union pool`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="561"/></proof>
  </goal>
  <goal name="prog&#39;vc.111" expl="wr ({} union pool union pool`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="19.81" steps="23226"/></proof>
  </goal>
  <goal name="prog&#39;vc.112" expl="wr (pool union pool`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="569"/></proof>
  </goal>
  <goal name="prog&#39;vc.113" expl="wr ({} union pool union pool`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="19.86" steps="23234"/></proof>
  </goal>
  <goal name="prog&#39;vc.114" expl="wr ({} union pool union pool`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="19.62" steps="22149"/></proof>
  </goal>
  <goal name="prog&#39;vc.115" expl="wr ({} union pool union pool`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="19.32" steps="22470"/></proof>
  </goal>
  <goal name="prog&#39;vc.116" expl="wr ({} union pool union pool`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="19.44" steps="22483"/></proof>
  </goal>
  <goal name="prog&#39;vc.117" expl="wr ({} union pool union pool`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="4.49" steps="5717"/></proof>
  </goal>
  <goal name="prog&#39;vc.118" expl="wr ({} union pool union pool`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="17.57" steps="19836"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ListStack" proved="true">
 <goal name="stackRep_mono" proved="true">
 <transf name="intros_n" proved="true" arg1="1">
  <goal name="stackRep_mono.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="xs">
   <goal name="stackRep_mono.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="stackRep_mono.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="14"/></proof>
    </goal>
    <goal name="stackRep_mono.0.0.1" proved="true">
    <transf name="unfold" proved="true" arg1="stackRep" arg2="in" arg3="H">
     <goal name="stackRep_mono.0.0.1.0" proved="true">
     <transf name="unfold" proved="true" arg1="stackRep">
      <goal name="stackRep_mono.0.0.1.0.0" proved="true">
      <transf name="split_all_right" proved="true" >
       <goal name="stackRep_mono.0.0.1.0.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="40"/></proof>
       </goal>
       <goal name="stackRep_mono.0.0.1.0.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="34"/></proof>
       </goal>
       <goal name="stackRep_mono.0.0.1.0.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="36"/></proof>
       </goal>
       <goal name="stackRep_mono.0.0.1.0.0.3" proved="true">
       <transf name="assert" proved="true" arg1="(isAllocated s&#39; n)">
        <goal name="stackRep_mono.0.0.1.0.0.3.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
        </goal>
        <goal name="stackRep_mono.0.0.1.0.0.3.1" proved="true">
        <transf name="subst" proved="true" arg1="x1">
         <goal name="stackRep_mono.0.0.1.0.0.3.1.0" proved="true">
         <proof prover="0"><result status="valid" time="0.05" steps="36"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="stackRep_mono.0.0.1.0.0.4" proved="true">
       <proof prover="0"><result status="valid" time="0.09" steps="384"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="stackRep_agree" proved="true">
 <transf name="intros" proved="true" arg1="xs">
  <goal name="stackRep_agree.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="xs">
   <goal name="stackRep_agree.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="stackRep_agree.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="111"/></proof>
    </goal>
    <goal name="stackRep_agree.0.0.1" proved="true">
    <transf name="unfold" proved="true" arg1="stackRep" arg2="in" arg3="H">
     <goal name="stackRep_agree.0.0.1.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H">
      <goal name="stackRep_agree.0.0.1.0.0" proved="true">
      <transf name="unfold" proved="true" arg1="stackRep">
       <goal name="stackRep_agree.0.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="stackRep_agree.0.0.1.0.0.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.06" steps="24"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.0.0.1" proved="true">
        <proof prover="0"><result status="valid" time="0.05" steps="24"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.0.0.2" proved="true">
        <proof prover="0"><result status="valid" time="0.05" steps="24"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.0.0.3" proved="true">
        <proof prover="0"><result status="valid" time="0.05" steps="24"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.0.0.4" proved="true">
        <transf name="apply" proved="true" arg1="H10" arg2="with" arg3="s,pi">
         <goal name="stackRep_agree.0.0.1.0.0.0.4.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.4" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.05" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.5" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.06" steps="24"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.6" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.7" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.0.0.4.8" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.06" steps="24"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="stackRep_agree.0.0.1.0.1" proved="true">
      <transf name="unfold" proved="true" arg1="stackRep">
       <goal name="stackRep_agree.0.0.1.0.1.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="stackRep_agree.0.0.1.0.1.0.0" proved="true">
        <proof prover="0"><result status="valid" time="2.30" steps="10293"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.1.0.1" proved="true">
        <proof prover="0"><result status="valid" time="1.88" steps="8321"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.1.0.2" proved="true">
        <proof prover="0"><result status="valid" time="3.80" steps="15015"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.1.0.3" proved="true">
        <proof prover="0"><result status="valid" time="3.50" steps="14370"/></proof>
        </goal>
        <goal name="stackRep_agree.0.0.1.0.1.0.4" proved="true">
        <transf name="apply" proved="true" arg1="H14" arg2="with" arg3="s,pi">
         <goal name="stackRep_agree.0.0.1.0.1.0.4.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.4" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.5" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="24.00" steps="97011"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.6" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.7" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
         </goal>
         <goal name="stackRep_agree.0.0.1.0.1.0.4.8" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="7.26" steps="30870"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Stack&#39;vc" expl="VC for init_Stack" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Stack&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="126"/></proof>
  <proof prover="1"><result status="valid" time="0.18" steps="56551"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="310"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="618"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="369"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="5919"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="213"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="200"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.8" expl="wr {self}`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="204"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.9" expl="wr {self}`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="208"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.10" expl="wr {self}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="212"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.11" expl="wr {self}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="216"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.12" expl="wr {self}`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="220"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.13" expl="wr {self}`car" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="224"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.14" expl="wr {self}`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="228"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.15" expl="wr {self}`top" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="232"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.16" expl="wr {self}`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="250"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.17" expl="wr {self}`size" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="254"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.18" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="258"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.19" expl="wr {self}`head" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="262"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.80" steps="8927"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="162"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="164"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="164"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="303"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="18.58" steps="57603"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.26" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="listStackPriv">
   <goal name="init_Stack&#39;vc.26.0" expl="VC for init_Stack" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Stack&#39;vc.26.0.0" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="158"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.26.0.1" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="5167"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.26.0.2" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="5183"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.26.0.3" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="87.52" steps="205623"/></proof>
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="init_Stack&#39;vc.26.0.3.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.74" steps="2427"/></proof>
     </goal>
     <goal name="init_Stack&#39;vc.26.0.3.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="100.03" steps="175645"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Stack&#39;vc.26.0.4" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="3.36" steps="11630"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.26.0.5" expl="VC for init_Stack" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="init_Stack&#39;vc.26.0.5.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.10" steps="324"/></proof>
     </goal>
     <goal name="init_Stack&#39;vc.26.0.5.1" expl="false case" proved="true">
     <transf name="apply" proved="true" arg1="stackRep_mono" arg2="with" arg3="s2">
      <goal name="init_Stack&#39;vc.26.0.5.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.07" steps="168"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.26.0.5.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.07" steps="170"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.26.0.5.1.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.07" steps="170"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.26.0.5.1.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.84" steps="3367"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="69"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="26"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="push&#39;vc" expl="VC for push" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="push&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="push&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="push&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="push&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="146"/></proof>
  </goal>
  <goal name="push&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="744"/></proof>
  </goal>
  <goal name="push&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="74"/></proof>
  </goal>
  <goal name="push&#39;vc.6" expl="Cell(v,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="70"/></proof>
  </goal>
  <goal name="push&#39;vc.7" expl="Cell(v,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="70"/></proof>
  </goal>
  <goal name="push&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="450"/></proof>
  </goal>
  <goal name="push&#39;vc.9" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="428"/></proof>
  </goal>
  <goal name="push&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="1905"/></proof>
  </goal>
  <goal name="push&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="204"/></proof>
  </goal>
  <goal name="push&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="614"/></proof>
  </goal>
  <goal name="push&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1401"/></proof>
  </goal>
  <goal name="push&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.80" steps="23470"/></proof>
  </goal>
  <goal name="push&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1908"/></proof>
  </goal>
  <goal name="push&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="210"/></proof>
  </goal>
  <goal name="push&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="14.77" steps="38635"/></proof>
  </goal>
  <goal name="push&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="236"/></proof>
  </goal>
  <goal name="push&#39;vc.19" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="534"/></proof>
  </goal>
  <goal name="push&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="264"/></proof>
  </goal>
  <goal name="push&#39;vc.21" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="577"/></proof>
  </goal>
  <goal name="push&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="662"/></proof>
  </goal>
  <goal name="push&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="306"/></proof>
  </goal>
  <goal name="push&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="845"/></proof>
  </goal>
  <goal name="push&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1931"/></proof>
  </goal>
  <goal name="push&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="845"/></proof>
  </goal>
  <goal name="push&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.52" steps="22054"/></proof>
  </goal>
  <goal name="push&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="312"/></proof>
  </goal>
  <goal name="push&#39;vc.29" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="push&#39;vc.29.0" expl="VC for push" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="push&#39;vc.29.0.0" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="56.39" steps="128797"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="314"/></proof>
  </goal>
  <goal name="push&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="4.33" steps="15260"/></proof>
  </goal>
  <goal name="push&#39;vc.32" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="319"/></proof>
  </goal>
  <goal name="push&#39;vc.33" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="701"/></proof>
  </goal>
  <goal name="push&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="351"/></proof>
  </goal>
  <goal name="push&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="967"/></proof>
  </goal>
  <goal name="push&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2193"/></proof>
  </goal>
  <goal name="push&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="967"/></proof>
  </goal>
  <goal name="push&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.61" steps="9935"/></proof>
  </goal>
  <goal name="push&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="357"/></proof>
  </goal>
  <goal name="push&#39;vc.40" expl="assertion" proved="true">
  <transf name="pose" proved="true" arg1="stk" arg2="s.heap.contents[self]">
   <goal name="push&#39;vc.40.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="&lt;-" arg2="H">
    <goal name="push&#39;vc.40.0.0" expl="assertion" proved="true">
    <transf name="induction_arg_ty_lex" proved="true" arg1="stk">
     <goal name="push&#39;vc.40.0.0.0" expl="VC for push" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="push&#39;vc.40.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0"><result status="valid" time="0.15" steps="338"/></proof>
      </goal>
      <goal name="push&#39;vc.40.0.0.0.1" expl="assertion" proved="true">
      <transf name="unfold" proved="true" arg1="stackRep">
       <goal name="push&#39;vc.40.0.0.0.1.0" expl="VC for push" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="push&#39;vc.40.0.0.0.1.0.0" expl="VC for push" proved="true">
        <proof prover="0"><result status="valid" time="0.12" steps="758"/></proof>
        </goal>
        <goal name="push&#39;vc.40.0.0.0.1.0.1" expl="VC for push" proved="true">
        <proof prover="0"><result status="valid" time="0.29" steps="339"/></proof>
        </goal>
        <goal name="push&#39;vc.40.0.0.0.1.0.2" expl="VC for push" proved="true">
        <proof prover="0"><result status="valid" time="0.21" steps="762"/></proof>
        </goal>
        <goal name="push&#39;vc.40.0.0.0.1.0.3" expl="VC for push" proved="true">
        <proof prover="0"><result status="valid" time="0.27" steps="759"/></proof>
        </goal>
        <goal name="push&#39;vc.40.0.0.0.1.0.4" expl="VC for push" proved="true">
        <transf name="apply" proved="true" arg1="stackRep_mono" arg2="with" arg3="s6">
         <goal name="push&#39;vc.40.0.0.0.1.0.4.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.24" steps="776"/></proof>
         </goal>
         <goal name="push&#39;vc.40.0.0.0.1.0.4.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.43" steps="18384"/></proof>
         </goal>
         <goal name="push&#39;vc.40.0.0.0.1.0.4.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.65" steps="7750"/></proof>
         </goal>
         <goal name="push&#39;vc.40.0.0.0.1.0.4.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.12" steps="5384"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="357"/></proof>
  </goal>
  <goal name="push&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.06" steps="8005"/></proof>
  </goal>
  <goal name="push&#39;vc.43" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="5.38" steps="14918"/></proof>
  </goal>
  <goal name="push&#39;vc.44" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="3.33" steps="9950"/></proof>
  </goal>
  <goal name="push&#39;vc.45" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="3.44" steps="10273"/></proof>
  </goal>
  <goal name="push&#39;vc.46" expl="wr ({} union {self} union {self}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="47.63" steps="40858"/></proof>
  <transf name="unfold" proved="true" arg1="wrs_to_cdr_framed_by">
   <goal name="push&#39;vc.46.0" expl="VC for push" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="push&#39;vc.46.0.0" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="4.45" steps="11673"/></proof>
    <transf name="assert" proved="true" arg1="(p &lt;&gt; n)">
     <goal name="push&#39;vc.46.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.23" steps="375"/></proof>
     </goal>
     <goal name="push&#39;vc.46.0.0.1" expl="VC for push" proved="true">
     <proof prover="0"><result status="valid" time="3.34" steps="9689"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.47" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="8.92" steps="12509"/></proof>
  </goal>
  <goal name="push&#39;vc.48" expl="wr ({} union {self} union {self}`rep)`car" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_car_framed_by">
   <goal name="push&#39;vc.48.0" expl="VC for push" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.48.0.0" expl="VC for push" proved="true">
    <transf name="assert" proved="true" arg1="(p &lt;&gt; v)">
     <goal name="push&#39;vc.48.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.15" steps="350"/></proof>
     </goal>
     <goal name="push&#39;vc.48.0.0.1" expl="VC for push" proved="true">
     <proof prover="0"><result status="valid" time="9.26" steps="13231"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.49" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="12.72" steps="12093"/></proof>
  </goal>
  <goal name="push&#39;vc.50" expl="wr ({} union {self} union {self}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="47.31" steps="42861"/></proof>
  </goal>
  <goal name="push&#39;vc.51" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="8.86" steps="11150"/></proof>
  </goal>
  <goal name="push&#39;vc.52" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="12.81" steps="12166"/></proof>
  </goal>
  <goal name="push&#39;vc.53" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="9.07" steps="13418"/></proof>
  </goal>
  <goal name="push&#39;vc.54" expl="wr ({} union {self} union {self}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="37.55" steps="34718"/></proof>
  </goal>
  <goal name="push&#39;vc.55" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="push&#39;vc.55.0" expl="VC for push" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="push&#39;vc.55.0.0" expl="VC for push" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="push&#39;vc.55.0.0.0" expl="VC for push" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="push&#39;vc.55.0.0.0.0" expl="VC for push" proved="true">
      <proof prover="0"><result status="valid" time="0.19" steps="389"/></proof>
      </goal>
      <goal name="push&#39;vc.55.0.0.0.1" expl="VC for push" proved="true">
      <transf name="rewrite" proved="true" arg1="union_def">
       <goal name="push&#39;vc.55.0.0.0.1.0" expl="VC for push" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="push&#39;vc.55.0.0.0.1.0.0" expl="VC for push" proved="true">
        <transf name="destruct_rec" proved="true" arg1="H">
         <goal name="push&#39;vc.55.0.0.0.1.0.0.0" expl="VC for push" proved="true">
         <proof prover="0"><result status="valid" time="64.26" steps="57890"/></proof>
         <transf name="case" proved="true" arg1="(q = self)">
          <goal name="push&#39;vc.55.0.0.0.1.0.0.0.0" expl="true case" proved="true">
          <proof prover="0"><result status="valid" time="4.34" steps="11877"/></proof>
          </goal>
          <goal name="push&#39;vc.55.0.0.0.1.0.0.0.1" expl="false case" proved="true">
          <proof prover="0"><result status="valid" time="31.94" steps="31995"/></proof>
          <transf name="assert" proved="true" arg1="(x &lt;&gt; n /\ x &lt;&gt; v)">
           <goal name="push&#39;vc.55.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.63" steps="2039"/></proof>
           </goal>
           <goal name="push&#39;vc.55.0.0.0.1.0.0.0.1.1" expl="false case" proved="true">
           <proof prover="0"><result status="valid" time="33.66" steps="28133"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82" steps="5866"/></proof>
  </goal>
  <goal name="push&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.85" steps="6340"/></proof>
  </goal>
  <goal name="push&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="8.35" steps="14682"/></proof>
  </goal>
  <goal name="push&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="66.75" steps="69544"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="push&#39;vc.59.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.59.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="11.06" steps="21967"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.60" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="stackPub">
   <goal name="push&#39;vc.60.0" expl="VC for push" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.60.0.0" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="372"/></proof>
    </goal>
    <goal name="push&#39;vc.60.0.1" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="10.27" steps="13410"/></proof>
    </goal>
    <goal name="push&#39;vc.60.0.2" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="31.87" steps="27325"/></proof>
    </goal>
    <goal name="push&#39;vc.60.0.3" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="28.87" steps="26498"/></proof>
    </goal>
    <goal name="push&#39;vc.60.0.4" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="31.41" steps="26480"/></proof>
    </goal>
    <goal name="push&#39;vc.60.0.5" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="177.80" steps="187539"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.61" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="listStackPriv">
   <goal name="push&#39;vc.61.0" expl="VC for push" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.61.0.0" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="0.15" steps="370"/></proof>
    </goal>
    <goal name="push&#39;vc.61.0.1" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="32.56" steps="29702"/></proof>
    </goal>
    <goal name="push&#39;vc.61.0.2" expl="VC for push" proved="true">
    <proof prover="0"><result status="valid" time="48.67" steps="48006"/></proof>
    </goal>
    <goal name="push&#39;vc.61.0.3" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.61.0.3.0" expl="true case" proved="true">
     <transf name="assert" proved="true" arg1="(s2.heap.rep[self] = s.heap.rep[self])">
      <goal name="push&#39;vc.61.0.3.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.13" steps="378"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.3.0.1" expl="true case" proved="true">
      <transf name="assert" proved="true" arg1="(img_cdr s2 s2.heap.rep[self] = img_cdr s s.heap.rep[self])">
       <goal name="push&#39;vc.61.0.3.0.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="extensionality1">
        <goal name="push&#39;vc.61.0.3.0.1.0.0" expl="apply premises" proved="true">
        <transf name="unfold" proved="true" arg1="(==&#39;)">
         <goal name="push&#39;vc.61.0.3.0.1.0.0.0" proved="true">
         <proof prover="0"><result status="valid" time="8.48" steps="23860"/></proof>
         <transf name="introduce_premises" proved="true" >
          <goal name="push&#39;vc.61.0.3.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="push&#39;vc.61.0.3.0.1.0.0.0.0.0" proved="true">
           <proof prover="1"><result status="valid" time="0.45" steps="88605"/></proof>
           <proof prover="2"><result status="valid" time="0.11" steps="384296"/></proof>
           </goal>
           <goal name="push&#39;vc.61.0.3.0.1.0.0.0.0.1" proved="true">
           <proof prover="1"><result status="valid" time="0.47" steps="88684"/></proof>
           <proof prover="2"><result status="valid" time="0.11" steps="384280"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="push&#39;vc.61.0.3.0.1.1" expl="true case" proved="true">
       <proof prover="0"><result status="valid" time="0.15" steps="381"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="push&#39;vc.61.0.3.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s7.heap.rep[s1] = s.heap.rep[s1])">
      <goal name="push&#39;vc.61.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.63" steps="5825"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.3.1.1" expl="false case" proved="true">
      <transf name="assert" proved="true" arg1="(img_cdr s7 s7.heap.rep[s1] = img_cdr s s.heap.rep[s1])">
       <goal name="push&#39;vc.61.0.3.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="extensionality1">
        <goal name="push&#39;vc.61.0.3.1.1.0.0" expl="apply premises" proved="true">
        <transf name="unfold" proved="true" arg1="(==&#39;)">
         <goal name="push&#39;vc.61.0.3.1.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="push&#39;vc.61.0.3.1.1.0.0.0.0" proved="true">
          <proof prover="0"><result status="valid" time="85.30" steps="75778"/></proof>
          </goal>
          <goal name="push&#39;vc.61.0.3.1.1.0.0.0.1" proved="true">
          <transf name="rewrite" proved="true" arg1="img_cdr_ax" arg2="in" arg3="H">
           <goal name="push&#39;vc.61.0.3.1.1.0.0.0.1.0" proved="true">
           <transf name="destruct_rec" proved="true" arg1="H">
            <goal name="push&#39;vc.61.0.3.1.1.0.0.0.1.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="img_cdr_ax">
             <goal name="push&#39;vc.61.0.3.1.1.0.0.0.1.0.0.0" proved="true">
             <proof prover="0"><result status="valid" time="4.80" steps="14392"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="push&#39;vc.61.0.3.1.1.1" expl="false case" proved="true">
       <proof prover="0"><result status="valid" time="2.66" steps="8905"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.61.0.4" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.61.0.4.0" expl="true case" proved="true">
     <proof prover="0"><result status="valid" time="0.56" steps="2474"/></proof>
     </goal>
     <goal name="push&#39;vc.61.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(s7.heap.rep[s1] = s.heap.rep[s1])">
      <goal name="push&#39;vc.61.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="3.19" steps="10330"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.4.1.1" expl="false case" proved="true">
      <proof prover="0"><result status="valid" time="36.94" steps="40131"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="push&#39;vc.61.0.5" expl="VC for push" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="push&#39;vc.61.0.5.0" expl="true case" proved="true">
     <proof prover="1"><result status="valid" time="0.23" steps="58896"/></proof>
     </goal>
     <goal name="push&#39;vc.61.0.5.1" expl="false case" proved="true">
     <transf name="apply" proved="true" arg1="stackRep_mono" arg2="with" arg3="s7">
      <goal name="push&#39;vc.61.0.5.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.23" steps="1010"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.5.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="41.99" steps="26899"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.5.1.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.63" steps="14618"/></proof>
      </goal>
      <goal name="push&#39;vc.61.0.5.1.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="34.41" steps="2048105"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pop&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="pop&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="24"/></proof>
  </goal>
  <goal name="pop&#39;vc.2" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(listLength s.heap.contents[self] &gt; 0)">
   <goal name="pop&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="55"/></proof>
   </goal>
   <goal name="pop&#39;vc.2.1" expl="assertion" proved="true">
   <transf name="destruct_term" proved="true" arg1="s.heap.contents[self]">
    <goal name="pop&#39;vc.2.1.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.06" steps="28"/></proof>
    </goal>
    <goal name="pop&#39;vc.2.1.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="106"/></proof>
  </goal>
  <goal name="pop&#39;vc.4" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="95"/></proof>
  </goal>
  <goal name="pop&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="409"/></proof>
  </goal>
  <goal name="pop&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="157"/></proof>
  </goal>
  <goal name="pop&#39;vc.7" expl="result := tmp.car" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="458"/></proof>
  </goal>
  <goal name="pop&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="200"/></proof>
  </goal>
  <goal name="pop&#39;vc.9" expl="nxt := tmp.cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="468"/></proof>
  </goal>
  <goal name="pop&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="238"/></proof>
  </goal>
  <goal name="pop&#39;vc.11" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="152"/></proof>
  </goal>
  <goal name="pop&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="94"/></proof>
  </goal>
  <goal name="pop&#39;vc.13" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="194"/></proof>
  </goal>
  <goal name="pop&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="126"/></proof>
  </goal>
  <goal name="pop&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="322"/></proof>
  </goal>
  <goal name="pop&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="867"/></proof>
  </goal>
  <goal name="pop&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="328"/></proof>
  </goal>
  <goal name="pop&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.53" steps="18891"/></proof>
  </goal>
  <goal name="pop&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="132"/></proof>
  </goal>
  <goal name="pop&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1096"/></proof>
  </goal>
  <goal name="pop&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1854"/></proof>
  </goal>
  <goal name="pop&#39;vc.22" expl="wr ({self} union {self}`rep union {result})`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="231"/></proof>
  </goal>
  <goal name="pop&#39;vc.23" expl="wr ({self} union {self}`rep union {result})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="235"/></proof>
  </goal>
  <goal name="pop&#39;vc.24" expl="wr ({self} union {self}`rep union {result})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="3631"/></proof>
  </goal>
  <goal name="pop&#39;vc.25" expl="wr ({self} union {self}`rep union {result})`top" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="243"/></proof>
  </goal>
  <goal name="pop&#39;vc.26" expl="wr ({self} union {self}`rep union {result})`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="247"/></proof>
  </goal>
  <goal name="pop&#39;vc.27" expl="wr ({self} union {self}`rep union {result})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="251"/></proof>
  </goal>
  <goal name="pop&#39;vc.28" expl="wr ({self} union {self}`rep union {result})`car" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="255"/></proof>
  </goal>
  <goal name="pop&#39;vc.29" expl="wr ({self} union {self}`rep union {result})`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="259"/></proof>
  </goal>
  <goal name="pop&#39;vc.30" expl="wr ({self} union {self}`rep union {result})`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="263"/></proof>
  </goal>
  <goal name="pop&#39;vc.31" expl="wr ({self} union {self}`rep union {result})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1461"/></proof>
  </goal>
  <goal name="pop&#39;vc.32" expl="wr ({self} union {self}`rep union {result})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="271"/></proof>
  </goal>
  <goal name="pop&#39;vc.33" expl="wr ({self} union {self}`rep union {result})`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="3731"/></proof>
  </goal>
  <goal name="pop&#39;vc.34" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="pop&#39;vc.34.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.37" steps="5052"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="164"/></proof>
  </goal>
  <goal name="pop&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="3923"/></proof>
  </goal>
  <goal name="pop&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="168"/></proof>
  </goal>
  <goal name="pop&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1673"/></proof>
  </goal>
  <goal name="pop&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="168"/></proof>
  </goal>
  <goal name="pop&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="15.74" steps="63486"/></proof>
  </goal>
  <goal name="pop&#39;vc.41" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="pop&#39;vc.41.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pop&#39;vc.41.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.06" steps="159"/></proof>
    </goal>
    <goal name="pop&#39;vc.41.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="2606"/></proof>
    </goal>
    <goal name="pop&#39;vc.41.0.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(s1 = self)">
     <goal name="pop&#39;vc.41.0.2.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(head3 = s2.heap.cdr[tmp])">
      <goal name="pop&#39;vc.41.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.06" steps="171"/></proof>
      </goal>
      <goal name="pop&#39;vc.41.0.2.0.1" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(listStackPriv s2)">
       <goal name="pop&#39;vc.41.0.2.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.05" steps="169"/></proof>
       </goal>
       <goal name="pop&#39;vc.41.0.2.0.1.1" expl="true case (postcondition)" proved="true">
       <transf name="unfold" proved="true" arg1="listStackPriv" arg2="in" arg3="h">
        <goal name="pop&#39;vc.41.0.2.0.1.1.0" expl="true case (postcondition)" proved="true">
        <transf name="destruct_rec" proved="true" arg1="h">
         <goal name="pop&#39;vc.41.0.2.0.1.1.0.0" expl="true case (postcondition)" proved="true">
         <transf name="instantiate" proved="true" arg1="h" arg2="self">
          <goal name="pop&#39;vc.41.0.2.0.1.1.0.0.0" expl="true case (postcondition)" proved="true">
          <proof prover="0"><result status="valid" time="1.75" steps="6311"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="pop&#39;vc.41.0.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.55" steps="2645"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="pop&#39;vc.41.0.3" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="pop&#39;vc.41.0.3.0" expl="postcondition" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="pop&#39;vc.41.0.3.0.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(mem1 x (s2.heap.rep[s1]))">
       <goal name="pop&#39;vc.41.0.3.0.0.0" expl="asserted formula" proved="true">
       <transf name="unfold" proved="true" arg1="listStackPriv" arg2="in" arg3="Requires">
        <goal name="pop&#39;vc.41.0.3.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Requires">
         <goal name="pop&#39;vc.41.0.3.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="instantiate" proved="true" arg1="Requires" arg2="s1">
          <goal name="pop&#39;vc.41.0.3.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="destruct_rec" proved="true" arg1="Hinst">
           <goal name="pop&#39;vc.41.0.3.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.09" steps="169"/></proof>
           </goal>
           <goal name="pop&#39;vc.41.0.3.0.0.0.0.0.0.1" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.08" steps="169"/></proof>
           </goal>
           <goal name="pop&#39;vc.41.0.3.0.0.0.0.0.0.2" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.06" steps="165"/></proof>
           </goal>
           <goal name="pop&#39;vc.41.0.3.0.0.0.0.0.0.3" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="2.37" steps="8679"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="pop&#39;vc.41.0.3.0.0.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="169"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pop&#39;vc.41.0.4" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="3560"/></proof>
    </goal>
    <goal name="pop&#39;vc.41.0.5" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(stackRep s2 s2.heap.contents[s1] s2.heap.head[s1])">
     <goal name="pop&#39;vc.41.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.51" steps="2493"/></proof>
     </goal>
     <goal name="pop&#39;vc.41.0.5.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.97" steps="12461"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getMaxSize&#39;vc" expl="VC for getMaxSize" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getMaxSize&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="getMaxSize&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getCellValue&#39;vc" expl="VC for getCellValue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getCellValue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.1" expl="result := c.cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="25"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="getCellValue&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_ListStack" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="boundary_frames_invariant_ListStack.0" proved="true">
  <transf name="unfold" proved="true" arg1="listStackPriv">
   <goal name="boundary_frames_invariant_ListStack.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="boundary_frames_invariant_ListStack.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="73.39" steps="266574"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ListStack.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="1.27" steps="5494"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ListStack.0.0.2" proved="true">
    <proof prover="0"><result status="valid" time="7.65" steps="36066"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ListStack.0.0.3" proved="true">
    <transf name="assert" proved="true" arg1="(subset (img_cdr s s.heap.rep[s1]) s.heap.rep[s1])">
     <goal name="boundary_frames_invariant_ListStack.0.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.89" steps="4362"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_ListStack.0.0.3.1" proved="true">
     <transf name="assert" proved="true" arg1="(agree_cdr s t pi (union s.pool (img_rep s s.pool)))">
      <goal name="boundary_frames_invariant_ListStack.0.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.04" steps="24"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_ListStack.0.0.3.1.1" proved="true">
      <proof prover="1"><result status="valid" time="11.24" steps="944055"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="boundary_frames_invariant_ListStack.0.0.4" proved="true">
    <proof prover="0"><result status="valid" time="43.69" steps="111073"/></proof>
    </goal>
    <goal name="boundary_frames_invariant_ListStack.0.0.5" proved="true">
    <transf name="assert" proved="true" arg1="(s.heap.rep[s1] = t.heap.rep[s1] /\ s.heap.head[s1] = t.heap.head[s1])">
     <goal name="boundary_frames_invariant_ListStack.0.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.74" steps="8566"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_ListStack.0.0.5.1" proved="true">
     <transf name="assert" proved="true" arg1="(stackRep s stk head3)">
      <goal name="boundary_frames_invariant_ListStack.0.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.13" steps="5259"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1" proved="true">
      <transf name="apply" proved="true" arg1="stackRep_agree" arg2="with" arg3="s,pi">
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.98" steps="4697"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.6" expl="apply premises" proved="true">
       <transf name="unfold" proved="true" arg1="subset">
        <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.6.0" proved="true">
        <transf name="introduce_premises" proved="true" >
         <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.6.0.0" proved="true">
         <proof prover="0"><result status="valid" time="51.50" steps="122468"/></proof>
         <transf name="rewrite" proved="true" arg1="img_cdr_ax" arg2="in" arg3="H">
          <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.6.0.0.0" proved="true">
          <transf name="destruct_rec" proved="true" arg1="H">
           <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.6.0.0.0.0" proved="true">
           <proof prover="0"><result status="valid" time="3.21" steps="12963"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.76" steps="24574"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_ListStack.0.0.5.1.1.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="26"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Client2" proved="true">
 <goal name="prog&#39;vc" expl="VC for prog" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prog&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
  <goal name="prog&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="prog&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="prog&#39;vc.3" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="prog&#39;vc.4" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="prog&#39;vc.5" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="63"/></proof>
  </goal>
  <goal name="prog&#39;vc.6" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1648"/></proof>
  </goal>
  <goal name="prog&#39;vc.7" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="302"/></proof>
  </goal>
  <goal name="prog&#39;vc.8" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="359"/></proof>
  </goal>
  <goal name="prog&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1899"/></proof>
  </goal>
  <goal name="prog&#39;vc.10" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.10.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.11" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="298"/></proof>
  </goal>
  <goal name="prog&#39;vc.12" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="1.73" steps="3278"/></proof>
  </goal>
  <goal name="prog&#39;vc.13" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="306"/></proof>
  </goal>
  <goal name="prog&#39;vc.14" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="3190"/></proof>
  </goal>
  <goal name="prog&#39;vc.15" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="314"/></proof>
  </goal>
  <goal name="prog&#39;vc.16" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.37" steps="3313"/></proof>
  </goal>
  <goal name="prog&#39;vc.17" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="322"/></proof>
  </goal>
  <goal name="prog&#39;vc.18" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="3220"/></proof>
  </goal>
  <goal name="prog&#39;vc.19" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="2.36" steps="3334"/></proof>
  </goal>
  <goal name="prog&#39;vc.20" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="334"/></proof>
  </goal>
  <goal name="prog&#39;vc.21" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="338"/></proof>
  </goal>
  <goal name="prog&#39;vc.22" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="154"/></proof>
  </goal>
  <goal name="prog&#39;vc.23" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="457"/></proof>
  </goal>
  <goal name="prog&#39;vc.24" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="158"/></proof>
  </goal>
  <goal name="prog&#39;vc.25" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="158"/></proof>
  </goal>
  <goal name="prog&#39;vc.26" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="21.27" steps="30905"/></proof>
  </goal>
  <goal name="prog&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="553"/></proof>
  </goal>
  <goal name="prog&#39;vc.28" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.29" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.30" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.31" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.32" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="183"/></proof>
  </goal>
  <goal name="prog&#39;vc.33" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="183"/></proof>
  </goal>
  <goal name="prog&#39;vc.34" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="783"/></proof>
  </goal>
  <goal name="prog&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.11" steps="4917"/></proof>
  </goal>
  <goal name="prog&#39;vc.36" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="42.20" steps="32628"/></proof>
  </goal>
  <goal name="prog&#39;vc.37" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="42.01" steps="32454"/></proof>
  </goal>
  <goal name="prog&#39;vc.38" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="44.76" steps="37139"/></proof>
  </goal>
  <goal name="prog&#39;vc.39" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="43.38" steps="34501"/></proof>
  </goal>
  <goal name="prog&#39;vc.40" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="42.41" steps="32660"/></proof>
  </goal>
  <goal name="prog&#39;vc.41" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="45.16" steps="36729"/></proof>
  </goal>
  <goal name="prog&#39;vc.42" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="44.05" steps="34955"/></proof>
  </goal>
  <goal name="prog&#39;vc.43" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="44.83" steps="36768"/></proof>
  </goal>
  <goal name="prog&#39;vc.44" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="44.00" steps="34946"/></proof>
  </goal>
  <goal name="prog&#39;vc.45" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="44.94" steps="34974"/></proof>
  </goal>
  <goal name="prog&#39;vc.46" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="8.34" steps="6417"/></proof>
  </goal>
  <goal name="prog&#39;vc.47" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="44.03" steps="32389"/></proof>
  </goal>
  <goal name="prog&#39;vc.48" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="261"/></proof>
  </goal>
  <goal name="prog&#39;vc.49" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="263"/></proof>
  </goal>
  <goal name="prog&#39;vc.50" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="265"/></proof>
  </goal>
  <goal name="prog&#39;vc.51" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="266"/></proof>
  </goal>
  <goal name="prog&#39;vc.52" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.52.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="prog&#39;vc.52.0.0" expl="loop invariant preservation" proved="true">
    <transf name="rewrite" proved="true" arg1="diff_def" arg2="in" arg3="H">
     <goal name="prog&#39;vc.52.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H">
      <goal name="prog&#39;vc.52.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="rewrite" proved="true" arg1="diff_def">
       <goal name="prog&#39;vc.52.0.0.0.0.0" expl="VC for prog" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="prog&#39;vc.52.0.0.0.0.0.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="0.33" steps="1675"/></proof>
        </goal>
        <goal name="prog&#39;vc.52.0.0.0.0.0.1" expl="VC for prog" proved="true">
        <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H1">
         <goal name="prog&#39;vc.52.0.0.0.0.0.1.0" expl="VC for prog" proved="true">
         <transf name="destruct_rec" proved="true" arg1="H1">
          <goal name="prog&#39;vc.52.0.0.0.0.0.1.0.0" expl="VC for prog" proved="true">
          <proof prover="0"><result status="valid" time="0.22" steps="845"/></proof>
          </goal>
          <goal name="prog&#39;vc.52.0.0.0.0.0.1.0.1" expl="VC for prog" proved="true">
          <proof prover="0"><result status="valid" time="165.19" steps="250790"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.53" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.54" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.55" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.55.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <proof prover="0"><result status="valid" time="0.12" steps="560"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.56" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.57" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="51490"/></proof>
  <proof prover="2"><result status="valid" time="0.02" steps="10978"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.57.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="560"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.57.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
    <proof prover="0"><result status="valid" time="0.17" steps="560"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.58" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.59" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.60" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="181"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.60.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <proof prover="0"><result status="valid" time="0.12" steps="560"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.61" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.62" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.63" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.64" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.65" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.66" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.67" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="prog&#39;vc.68" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="183"/></proof>
  </goal>
  <goal name="prog&#39;vc.69" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="183"/></proof>
  </goal>
  <goal name="prog&#39;vc.70" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.71" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.72" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="prog&#39;vc.73" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="55.45" steps="50853"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.73.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.73.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.73.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="valid" time="2.05" steps="6357"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.74" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="254"/></proof>
  </goal>
  <goal name="prog&#39;vc.75" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="254"/></proof>
  </goal>
  <goal name="prog&#39;vc.76" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="254"/></proof>
  </goal>
  <goal name="prog&#39;vc.77" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="254"/></proof>
  </goal>
  <goal name="prog&#39;vc.78" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="255"/></proof>
  </goal>
  <goal name="prog&#39;vc.79" expl="c := pop(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="255"/></proof>
  </goal>
  <goal name="prog&#39;vc.80" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="121.58" steps="51052"/></proof>
  </goal>
  <goal name="prog&#39;vc.81" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="323"/></proof>
  </goal>
  <goal name="prog&#39;vc.82" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="323"/></proof>
  </goal>
  <goal name="prog&#39;vc.83" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="323"/></proof>
  </goal>
  <goal name="prog&#39;vc.84" expl="v := getCellValue(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="323"/></proof>
  </goal>
  <goal name="prog&#39;vc.85" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="338"/></proof>
  </goal>
  <goal name="prog&#39;vc.86" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.36" steps="10034"/></proof>
  </goal>
  <goal name="prog&#39;vc.87" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.87.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.87.0.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
    <proof prover="0"><result status="valid" time="30.95" steps="17516"/></proof>
    <proof prover="1"><result status="valid" time="12.91" steps="1716759"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.88" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="3490"/></proof>
  </goal>
  <goal name="prog&#39;vc.89" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="1"><result status="valid" time="3.28" steps="255848"/></proof>
  </goal>
  <goal name="prog&#39;vc.90" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="2.12" steps="3502"/></proof>
  </goal>
  <goal name="prog&#39;vc.91" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="2.09" steps="3508"/></proof>
  </goal>
  <goal name="prog&#39;vc.92" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="2.12" steps="3514"/></proof>
  </goal>
  <goal name="prog&#39;vc.93" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.12" steps="3520"/></proof>
  </goal>
  <goal name="prog&#39;vc.94" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="2.07" steps="3526"/></proof>
  </goal>
  <goal name="prog&#39;vc.95" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="2.06" steps="3532"/></proof>
  </goal>
  <goal name="prog&#39;vc.96" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="128.86" steps="57752"/></proof>
  <proof prover="2"><result status="valid" time="4.53" steps="2603258"/></proof>
  </goal>
  <goal name="prog&#39;vc.97" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="2.07" steps="3544"/></proof>
  </goal>
  <goal name="prog&#39;vc.98" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="2.07" steps="3550"/></proof>
  </goal>
  <goal name="prog&#39;vc.99" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="359"/></proof>
  </goal>
  <goal name="prog&#39;vc.100" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="361"/></proof>
  </goal>
  <goal name="prog&#39;vc.101" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="363"/></proof>
  </goal>
  <goal name="prog&#39;vc.102" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="364"/></proof>
  </goal>
  <goal name="prog&#39;vc.103" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="364"/></proof>
  </goal>
  <goal name="prog&#39;vc.104" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="364"/></proof>
  </goal>
  <goal name="prog&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="252"/></proof>
  </goal>
  <goal name="prog&#39;vc.106" expl="wr ({} union pool union pool`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="19.73" steps="20885"/></proof>
  </goal>
  <goal name="prog&#39;vc.107" expl="wr (pool union pool`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="19.40" steps="20650"/></proof>
  </goal>
  <goal name="prog&#39;vc.108" expl="wr ({} union pool union pool`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="19.66" steps="20901"/></proof>
  </goal>
  <goal name="prog&#39;vc.109" expl="wr ({} union pool union pool`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="19.96" steps="20541"/></proof>
  </goal>
  <goal name="prog&#39;vc.110" expl="wr ({} union pool union pool`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="19.99" steps="20943"/></proof>
  </goal>
  <goal name="prog&#39;vc.111" expl="wr ({} union pool union pool`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="20.09" steps="20635"/></proof>
  </goal>
  <goal name="prog&#39;vc.112" expl="wr ({} union pool union pool`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="20.12" steps="20952"/></proof>
  </goal>
  <goal name="prog&#39;vc.113" expl="wr ({} union pool union pool`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="19.86" steps="20614"/></proof>
  </goal>
  <goal name="prog&#39;vc.114" expl="wr ({} union pool union pool`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="21.47" steps="22564"/></proof>
  </goal>
  <goal name="prog&#39;vc.115" expl="wr ({} union pool union pool`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="19.52" steps="20986"/></proof>
  </goal>
  <goal name="prog&#39;vc.116" expl="wr (pool union pool`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="19.50" steps="20721"/></proof>
  </goal>
  <goal name="prog&#39;vc.117" expl="wr ({} union pool union pool`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="19.43" steps="20674"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CLIENT_REL" proved="true">
 <goal name="prog&#39;vc" expl="VC for prog" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prog&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="118"/></proof>
  </goal>
  <goal name="prog&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="118"/></proof>
  </goal>
  <goal name="prog&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="279"/></proof>
  </goal>
  <goal name="prog&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="287"/></proof>
  </goal>
  <goal name="prog&#39;vc.4" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="136"/></proof>
  </goal>
  <goal name="prog&#39;vc.5" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="136"/></proof>
  </goal>
  <goal name="prog&#39;vc.6" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="136"/></proof>
  </goal>
  <goal name="prog&#39;vc.7" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="136"/></proof>
  </goal>
  <goal name="prog&#39;vc.8" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="6.61" steps="23771"/></proof>
  </goal>
  <goal name="prog&#39;vc.9" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="138"/></proof>
  </goal>
  <goal name="prog&#39;vc.10" expl="Stack(stk)" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.10.0" expl="Stack(stk)" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.10.0.0" expl="Stack(stk)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.10.0.0.0" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.50" steps="2096"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.1" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.50" steps="2101"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.2" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.49" steps="2071"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.3" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.51" steps="2100"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.4" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.50" steps="2098"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.5" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.50" steps="2098"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.6" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.92" steps="2455"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.7" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="1.45" steps="4473"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.8" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.83" steps="2451"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.9" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.83" steps="2451"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.10" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.83" steps="2451"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.0.0.11" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="0.90" steps="2455"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prog&#39;vc.10.1" expl="Stack(stk)" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.10.1.0" expl="Stack(stk)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.10.1.0.0" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="9.09" steps="22739"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.1" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="8.59" steps="22992"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.2" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="9.00" steps="24758"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.3" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="8.90" steps="23810"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.4" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="9.06" steps="29172"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.5" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="9.05" steps="29172"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.6" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="8.88" steps="24110"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.7" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="9.90" steps="24559"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.8" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="7.58" steps="22879"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.9" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="7.81" steps="22160"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.10" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="8.45" steps="22879"/></proof>
     </goal>
     <goal name="prog&#39;vc.10.1.0.11" expl="Stack(stk)" proved="true">
     <proof prover="0"><result status="valid" time="8.93" steps="24110"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.11" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="prog&#39;vc.12" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="4.00" steps="9356"/></proof>
  </goal>
  <goal name="prog&#39;vc.13" expl="Stack(stk)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="273"/></proof>
  </goal>
  <goal name="prog&#39;vc.14" expl="locals type invariant left" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="938"/></proof>
  </goal>
  <goal name="prog&#39;vc.15" expl="locals type invariant right" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="950"/></proof>
  </goal>
  <goal name="prog&#39;vc.16" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.16.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="1735"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.17" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.17.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <proof prover="0"><result status="valid" time="0.22" steps="779"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.18" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.18.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <proof prover="0"><result status="valid" time="0.36" steps="1746"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.19" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.19.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
   <proof prover="0"><result status="valid" time="0.24" steps="786"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.20" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.20.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
   <proof prover="0"><result status="valid" time="0.38" steps="1757"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.21" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.21.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="794"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.22" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.22.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
   <proof prover="0"><result status="valid" time="0.37" steps="1789"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.23" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.23.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="803"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.24" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.24.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <proof prover="0"><result status="valid" time="0.37" steps="1778"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.25" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.25.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
   <proof prover="0"><result status="valid" time="0.34" steps="1785"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.26" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.26.0" expl="wr ({stk} union {stk}`rep)`length" proved="true">
   <proof prover="0"><result status="valid" time="0.23" steps="815"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.27" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.27.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="818"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.28" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="821"/></proof>
  </goal>
  <goal name="prog&#39;vc.29" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.29.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="1821"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.30" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.30.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <proof prover="0"><result status="valid" time="0.23" steps="837"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.31" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.31.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="1832"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.31.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1832"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.32" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.32.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="844"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.33" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.33.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="1843"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.34" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.34.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="852"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.35" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.35.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
   <proof prover="0"><result status="valid" time="0.40" steps="1875"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.36" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.36.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="861"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.37" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.37.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="1864"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.38" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.38.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="1871"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.38.0.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="prog&#39;vc.38.0.0.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="1861"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.39" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.39.0" expl="wr ({stk} union {stk}`rep)`length" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="873"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.40" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.40.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="876"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.41" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="879"/></proof>
  </goal>
  <goal name="prog&#39;vc.42" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="294"/></proof>
  </goal>
  <goal name="prog&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="2222"/></proof>
  </goal>
  <goal name="prog&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="299"/></proof>
  </goal>
  <goal name="prog&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="301"/></proof>
  </goal>
  <goal name="prog&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="302"/></proof>
  </goal>
  <goal name="prog&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="302"/></proof>
  </goal>
  <goal name="prog&#39;vc.48" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.48.0" expl="loop invariant init" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.48.0.0" expl="loop invariant init" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="prog&#39;vc.48.0.0.0" expl="loop invariant init" proved="true">
     <proof prover="0"><result status="valid" time="86.08" steps="80398"/></proof>
     <transf name="rewrite" proved="true" arg1="diff_def" arg2="in" arg3="H">
      <goal name="prog&#39;vc.48.0.0.0.0" expl="loop invariant init" proved="true">
      <transf name="destruct_rec" proved="true" arg1="H">
       <goal name="prog&#39;vc.48.0.0.0.0.0" expl="loop invariant init" proved="true">
       <proof prover="0"><result status="valid" time="78.71" steps="66676"/></proof>
       <transf name="rewrite" proved="true" arg1="diff_def">
        <goal name="prog&#39;vc.48.0.0.0.0.0.0" expl="VC for prog" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="prog&#39;vc.48.0.0.0.0.0.0.0" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="0.32" steps="1828"/></proof>
         </goal>
         <goal name="prog&#39;vc.48.0.0.0.0.0.0.1" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="32.43" steps="30097"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prog&#39;vc.48.1" expl="loop invariant init" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.48.1.0" expl="loop invariant init" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.48.1.0.0" expl="loop invariant init" proved="true">
     <proof prover="0"><result status="valid" time="103.08" steps="96443"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.49" expl="lockstep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="306"/></proof>
  </goal>
  <goal name="prog&#39;vc.50" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.51" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.52" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.53" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.54" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.55" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="346"/></proof>
  </goal>
  <goal name="prog&#39;vc.56" expl="push(stk,i)" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.56.0" expl="push(stk,i)" proved="true">
   <transf name="replace" proved="true" arg1="(diff (union (singleton l_stk) (rep (heap l_s))[l_stk])
   (union (pool l_s) ((img_rep @ l_s) @ pool l_s)))" arg2="emptyRgn">
    <goal name="prog&#39;vc.56.0.0" expl="push(stk,i)" proved="true">
    <proof prover="0"><result status="valid" time="74.07" steps="87915"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="prog&#39;vc.56.0.0.0" expl="push(stk,i)" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="prog&#39;vc.56.0.0.0.0" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.1" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.2" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.15" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.3" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.4" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.5" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.6" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.13" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.7" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.8" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.12" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.9" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.13" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.10" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.11" steps="3000"/></proof>
      </goal>
      <goal name="prog&#39;vc.56.0.0.0.11" expl="push(stk,i)" proved="true">
      <proof prover="0"><result status="valid" time="1.14" steps="3000"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="prog&#39;vc.56.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="prog&#39;vc.56.0.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="prog&#39;vc.56.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="prog&#39;vc.56.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="6.50" steps="8421"/></proof>
       </goal>
       <goal name="prog&#39;vc.56.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.26" steps="3699"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prog&#39;vc.56.1" expl="push(stk,i)" proved="true">
   <transf name="replace" proved="true" arg1="(diff (union (singleton r_stk) (rep (heap r_s))[r_stk])
   (union (pool r_s) ((img_rep @ r_s) @ pool r_s)))" arg2="emptyRgn">
    <goal name="prog&#39;vc.56.1.0" expl="push(stk,i)" proved="true">
    <transf name="assert" proved="true" arg1="(okRefperm r_s l_s (invert pi))">
     <goal name="prog&#39;vc.56.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="7.78" steps="12121"/></proof>
     </goal>
     <goal name="prog&#39;vc.56.1.0.1" expl="push(stk,i)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="prog&#39;vc.56.1.0.1.0" expl="push(stk,i)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="prog&#39;vc.56.1.0.1.0.0" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.0.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.25" steps="3510"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.1" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.1.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.24" steps="3510"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.2" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.2.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="3516"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.3" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.3.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.23" steps="3516"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.4" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.4.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="3509"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.5" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.5.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="3509"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.6" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.6.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.50" steps="5082"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.7" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.7.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.49" steps="5082"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.8" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.8.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.50" steps="5082"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.9" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.9.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.22" steps="3523"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.10" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.10.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.41" steps="5082"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="prog&#39;vc.56.1.0.1.0.11" expl="VC for prog" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="prog&#39;vc.56.1.0.1.0.11.0" expl="VC for prog" proved="true">
        <proof prover="0"><result status="valid" time="1.41" steps="5082"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="prog&#39;vc.56.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="prog&#39;vc.56.1.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="prog&#39;vc.56.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="7.79" steps="11706"/></proof>
      <proof prover="1"><result status="valid" time="10.23" steps="684483"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="prog&#39;vc.56.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="6.53" steps="8421"/></proof>
       </goal>
       <goal name="prog&#39;vc.56.1.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.44" steps="3700"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.57" expl="push(stk,i)" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.57.0" expl="push(stk,i)" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="298"/></proof>
   </goal>
   <goal name="prog&#39;vc.57.1" expl="push(stk,i)" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="298"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.58" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.59" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="354"/></proof>
  </goal>
  <goal name="prog&#39;vc.60" expl="push(stk,i)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="354"/></proof>
  </goal>
  <goal name="prog&#39;vc.61" expl="locals type invariant left" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1786"/></proof>
  </goal>
  <goal name="prog&#39;vc.62" expl="locals type invariant right" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="1795"/></proof>
  </goal>
  <goal name="prog&#39;vc.63" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.63.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <proof prover="0"><result status="valid" time="173.83" steps="70008"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.64" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.64.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.64.0.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
    <transf name="case" proved="true" arg1="(p = l_stk)">
     <goal name="prog&#39;vc.64.0.0.0" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
     <proof prover="0"><result status="valid" time="0.08" steps="464"/></proof>
     </goal>
     <goal name="prog&#39;vc.64.0.0.1" expl="false case (wr ({stk} union {stk}`rep)`slots)" proved="true">
     <proof prover="0"><result status="valid" time="175.01" steps="65106"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by" arg2="in" arg3="Ensures29">
   <goal name="prog&#39;vc.64.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.64.0.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="prog&#39;vc.64.0.0.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
     <transf name="case" proved="true" arg1="(p \: alloct l_s1)">
      <goal name="prog&#39;vc.64.0.0.0.0" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
      <proof prover="0"><result status="valid" time="150.63" steps="54356"/></proof>
      <transf name="instantiate" proved="true" arg1="Ensures29" arg2="p">
       <goal name="prog&#39;vc.64.0.0.0.0.0" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
       <proof prover="0"><result status="valid" time="157.55" steps="56900"/></proof>
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="prog&#39;vc.64.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.08" steps="464"/></proof>
        </goal>
        <goal name="prog&#39;vc.64.0.0.0.0.0.1" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.08" steps="464"/></proof>
        </goal>
        <goal name="prog&#39;vc.64.0.0.0.0.0.2" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.08" steps="464"/></proof>
        </goal>
        <goal name="prog&#39;vc.64.0.0.0.0.0.3" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
        <proof prover="0"><result status="valid" time="150.53" steps="54879"/></proof>
        <transf name="assert" proved="true" arg1="(not (p = l_stk))">
         <goal name="prog&#39;vc.64.0.0.0.0.0.3.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.07" steps="466"/></proof>
         </goal>
         <goal name="prog&#39;vc.64.0.0.0.0.0.3.1" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
         <proof prover="0"><result status="valid" time="150.20" steps="54871"/></proof>
         <transf name="assert" proved="true" arg1="(not (mem1 p l_s.heap.rep[l_stk]))">
          <goal name="prog&#39;vc.64.0.0.0.0.0.3.1.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.15" steps="470"/></proof>
          </goal>
          <goal name="prog&#39;vc.64.0.0.0.0.0.3.1.1" expl="true case (wr ({stk} union {stk}`rep)`slots)" proved="true">
          <proof prover="0"><result status="valid" time="153.99" steps="57021"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.64.0.0.0.1" expl="false case (wr ({stk} union {stk}`rep)`slots)" proved="true">
      <proof prover="0"><result status="valid" time="0.48" steps="1442"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.65" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.65.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.65.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
    <proof prover="0"><result status="valid" time="124.93" steps="65861"/></proof>
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="prog&#39;vc.65.0.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="prog&#39;vc.65.0.0.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
      <proof prover="0"><result status="valid" time="168.63" steps="93216"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.66" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.66.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.66.0.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="prog&#39;vc.66.0.0.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="prog&#39;vc.66.0.0.0.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
      <proof prover="0"><result status="valid" time="192.42" steps="119575"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.67" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="195.40" steps="130597"/></proof>
  </goal>
  <goal name="prog&#39;vc.68" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="191.74" steps="154735"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.68.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.68.0.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
    <proof prover="0"><result status="valid" time="190.09" steps="127172"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.69" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.69.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.69.0.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
    <proof prover="0"><result status="valid" time="157.95" steps="60512"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.70" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.70.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.70.0.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
    <proof prover="0"><result status="valid" time="149.38" steps="65148"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.71" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.71.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.71.0.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
    <proof prover="0"><result status="valid" time="163.74" steps="68018"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.72" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.72.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.72.0.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
    <proof prover="0"><result status="valid" time="159.99" steps="67969"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.73" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="8.57" steps="14276"/></proof>
  </goal>
  <goal name="prog&#39;vc.74" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.74.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.74.0.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
    <proof prover="0"><result status="valid" time="163.73" steps="88481"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1487"/></proof>
  </goal>
  <goal name="prog&#39;vc.76" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="161.14" steps="74144"/></proof>
  </goal>
  <goal name="prog&#39;vc.77" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="183.53" steps="91122"/></proof>
  </goal>
  <goal name="prog&#39;vc.78" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="162.94" steps="74283"/></proof>
  </goal>
  <goal name="prog&#39;vc.79" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="168.48" steps="75114"/></proof>
  </goal>
  <goal name="prog&#39;vc.80" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="164.11" steps="74294"/></proof>
  </goal>
  <goal name="prog&#39;vc.81" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="175.21" steps="87279"/></proof>
  </goal>
  <goal name="prog&#39;vc.82" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="168.23" steps="74267"/></proof>
  </goal>
  <goal name="prog&#39;vc.83" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="185.17" steps="93287"/></proof>
  </goal>
  <goal name="prog&#39;vc.84" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="171.71" steps="78357"/></proof>
  </goal>
  <goal name="prog&#39;vc.85" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="165.10" steps="74415"/></proof>
  </goal>
  <goal name="prog&#39;vc.86" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="8.08" steps="14330"/></proof>
  </goal>
  <goal name="prog&#39;vc.87" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="179.85" steps="83137"/></proof>
  </goal>
  <goal name="prog&#39;vc.88" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="1539"/></proof>
  </goal>
  <goal name="prog&#39;vc.89" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="508"/></proof>
  </goal>
  <goal name="prog&#39;vc.90" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="508"/></proof>
  </goal>
  <goal name="prog&#39;vc.91" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="514"/></proof>
  </goal>
  <goal name="prog&#39;vc.92" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="517"/></proof>
  </goal>
  <goal name="prog&#39;vc.93" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="518"/></proof>
  </goal>
  <goal name="prog&#39;vc.94" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="520"/></proof>
  </goal>
  <goal name="prog&#39;vc.95" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.95.0" expl="loop invariant preservation" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.95.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.95.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="rewrite" proved="true" arg1="diff_def" arg2="in" arg3="H">
      <goal name="prog&#39;vc.95.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="destruct_rec" proved="true" arg1="H">
       <goal name="prog&#39;vc.95.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="rewrite" proved="true" arg1="diff_def">
        <goal name="prog&#39;vc.95.0.0.0.0.0.0" expl="VC for prog" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="prog&#39;vc.95.0.0.0.0.0.0.0" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="0.81" steps="3221"/></proof>
         </goal>
         <goal name="prog&#39;vc.95.0.0.0.0.0.0.1" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="138.50" steps="55339"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prog&#39;vc.95.1" expl="loop invariant preservation" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="prog&#39;vc.95.1.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="prog&#39;vc.95.1.0.0" expl="loop invariant preservation" proved="true">
     <transf name="rewrite" proved="true" arg1="diff_def" arg2="in" arg3="H">
      <goal name="prog&#39;vc.95.1.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="destruct_rec" proved="true" arg1="H">
       <goal name="prog&#39;vc.95.1.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="rewrite" proved="true" arg1="diff_def">
        <goal name="prog&#39;vc.95.1.0.0.0.0.0" expl="VC for prog" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="prog&#39;vc.95.1.0.0.0.0.0.0" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="0.57" steps="3221"/></proof>
         </goal>
         <goal name="prog&#39;vc.95.1.0.0.0.0.0.1" expl="VC for prog" proved="true">
         <proof prover="0"><result status="valid" time="129.51" steps="53319"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.96" expl="lockstep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="524"/></proof>
  </goal>
  <goal name="prog&#39;vc.97" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.98" expl="locals type invariant left" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.99" expl="locals type invariant right" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.100" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.101" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.102" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.103" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.104" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.105" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.106" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.107" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.108" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.109" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.110" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.111" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.112" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.113" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.114" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.115" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.116" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.117" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.118" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.119" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.120" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.121" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.122" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.123" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.124" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.125" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="350"/></proof>
  </goal>
  <goal name="prog&#39;vc.126" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="354"/></proof>
  </goal>
  <goal name="prog&#39;vc.127" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="355"/></proof>
  </goal>
  <goal name="prog&#39;vc.128" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="355"/></proof>
  </goal>
  <goal name="prog&#39;vc.129" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.130" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.131" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.132" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.134" expl="lockstep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="357"/></proof>
  </goal>
  <goal name="prog&#39;vc.135" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.136" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.137" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.138" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.139" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.140" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="458"/></proof>
  </goal>
  <goal name="prog&#39;vc.141" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.141.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff (union (singleton l_stk) (rep (heap l_s))[l_stk])
   (union (pool l_s) ((img_rep @ l_s) @ pool l_s)))" arg2="emptyRgn">
    <goal name="prog&#39;vc.141.0.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="prog&#39;vc.141.0.0.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="prog&#39;vc.141.0.0.0.0" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.41" steps="4315"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.1" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.1.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.41" steps="4315"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.2" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.2.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.41" steps="4323"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.3" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.3.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.44" steps="4323"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.4" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.4.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.45" steps="4311"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.5" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.5.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.46" steps="4311"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.6" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.6.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.49" steps="4331"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.7" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.7.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.48" steps="4331"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.8" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.8.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.67" steps="6359"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.9" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.9.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.45" steps="4331"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.10" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.10.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.77" steps="4331"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.0.0.0.11" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.0.0.0.11.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.47" steps="4331"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="prog&#39;vc.141.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="prog&#39;vc.141.0.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="prog&#39;vc.141.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="11.82" steps="14713"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="prog&#39;vc.141.1" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff (union (singleton r_stk) (rep (heap r_s))[r_stk])
   (union (pool r_s) ((img_rep @ r_s) @ pool r_s)))
" arg2="emptyRgn">
    <goal name="prog&#39;vc.141.1.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="prog&#39;vc.141.1.0.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="prog&#39;vc.141.1.0.0.0" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.0.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="21.30" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.1" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.1.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="21.61" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.2" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.2.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="20.42" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.3" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.3.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="20.47" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.4" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.4.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="20.34" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.5" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.5.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="20.52" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.6" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.6.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="20.31" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.7" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.7.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="22.96" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.8" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.8.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="22.68" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.9" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.9.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="22.90" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.10" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.10.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="25.29" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="prog&#39;vc.141.1.0.0.11" expl="precondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="prog&#39;vc.141.1.0.0.11.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="25.15" steps="33523"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="prog&#39;vc.141.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="prog&#39;vc.141.1.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="prog&#39;vc.141.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="11.73" steps="14713"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.142" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="462"/></proof>
  </goal>
  <goal name="prog&#39;vc.143" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.143.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="406"/></proof>
   </goal>
   <goal name="prog&#39;vc.143.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="406"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.144" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="462"/></proof>
  </goal>
  <goal name="prog&#39;vc.145" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="464"/></proof>
  </goal>
  <goal name="prog&#39;vc.146" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="569"/></proof>
  </goal>
  <goal name="prog&#39;vc.147" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="570"/></proof>
  </goal>
  <goal name="prog&#39;vc.148" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="571"/></proof>
  </goal>
  <goal name="prog&#39;vc.149" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="572"/></proof>
  </goal>
  <goal name="prog&#39;vc.150" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="573"/></proof>
  </goal>
  <goal name="prog&#39;vc.151" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="573"/></proof>
  </goal>
  <goal name="prog&#39;vc.152" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="573"/></proof>
  </goal>
  <goal name="prog&#39;vc.153" expl="locals type invariant left" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="591"/></proof>
  </goal>
  <goal name="prog&#39;vc.154" expl="locals type invariant right" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="594"/></proof>
  </goal>
  <goal name="prog&#39;vc.155" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.155.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.155.0.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
    <transf name="assert" proved="true" arg1="(l_s5.heap.contents[p] = l_s1.heap.contents[p])">
     <goal name="prog&#39;vc.155.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="1.16" steps="1599819"/></proof>
     </goal>
     <goal name="prog&#39;vc.155.0.0.1" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
     <proof prover="0"><result status="valid" time="0.66" steps="1677"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.156" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.156.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="795351"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.157" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.157.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="791388"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.158" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.158.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
   <proof prover="2"><result status="valid" time="0.33" steps="793017"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.159" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.159.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="791947"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.160" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.160.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="793586"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.161" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.161.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="789034"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.162" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.162.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="788566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.163" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.163.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="790007"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.164" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.164.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="790273"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.165" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="8.56" steps="15708"/></proof>
  </goal>
  <goal name="prog&#39;vc.166" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.166.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.166.0.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
    <proof prover="2"><result status="valid" time="3.38" steps="2673007"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.167" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.167.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.167.0.0" expl="wr ({stk} union {stk}`rep)`contents" proved="true">
    <proof prover="2"><result status="valid" time="3.53" steps="2630036"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.168" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.168.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.168.0.0" expl="wr ({stk} union {stk}`rep)`slots" proved="true">
    <proof prover="2"><result status="valid" time="3.57" steps="2692445"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.169" expl="wr ({stk} union {stk}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.169.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.169.0.0" expl="wr ({stk} union {stk}`rep)`head" proved="true">
    <proof prover="2"><result status="valid" time="3.56" steps="2674858"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.170" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.170.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.170.0.0" expl="wr ({stk} union {stk}`rep)`cdr" proved="true">
    <proof prover="2"><result status="valid" time="3.56" steps="2689168"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.171" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.171.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.171.0.0" expl="wr ({stk} union {stk}`rep)`arr" proved="true">
    <proof prover="2"><result status="valid" time="3.56" steps="2674788"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.172" expl="wr ({stk} union {stk}`rep)`car" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.172.0" expl="wr ({stk} union {stk}`rep)`car" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="795977"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.173" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.173.0" expl="wr ({stk} union {stk}`rep)`rep" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="791419"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.174" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.174.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.174.0.0" expl="wr ({stk} union {stk}`rep)`cell_rep" proved="true">
    <proof prover="2"><result status="valid" time="3.07" steps="1941248"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.175" expl="wr ({stk} union {stk}`rep)`top" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.175.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.175.0.0" expl="wr ({stk} union {stk}`rep)`top" proved="true">
    <proof prover="2"><result status="valid" time="3.54" steps="2639163"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.176" expl="wr ({stk} union {stk}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.176.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.176.0.0" expl="wr ({stk} union {stk}`rep)`size" proved="true">
    <proof prover="2"><result status="valid" time="3.44" steps="2640897"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.177" expl="wr ({stk} union {stk}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="6.86" steps="15780"/></proof>
  </goal>
  <goal name="prog&#39;vc.178" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="prog&#39;vc.178.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="prog&#39;vc.178.0.0" expl="wr ({stk} union {stk}`rep)`cell_value" proved="true">
    <proof prover="2"><result status="valid" time="2.79" steps="2678113"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.179" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="641"/></proof>
  </goal>
  <goal name="prog&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="641"/></proof>
  </goal>
  <goal name="prog&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="645"/></proof>
  </goal>
  <goal name="prog&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="646"/></proof>
  </goal>
  <goal name="prog&#39;vc.183" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="650"/></proof>
  </goal>
  <goal name="prog&#39;vc.184" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="652"/></proof>
  </goal>
  <goal name="prog&#39;vc.185" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="654"/></proof>
  </goal>
  <goal name="prog&#39;vc.186" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="654"/></proof>
  </goal>
  <goal name="prog&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="655"/></proof>
  </goal>
  <goal name="prog&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prog&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="596"/></proof>
   </goal>
   <goal name="prog&#39;vc.188.1" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.10" steps="596"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prog&#39;vc.189" expl="lockstep" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="658"/></proof>
  </goal>
  <goal name="prog&#39;vc.190" expl="wr (pool union pool`rep union {})`contents" proved="true">
  <proof prover="2"><result status="valid" time="1.42" steps="1546012"/></proof>
  </goal>
  <goal name="prog&#39;vc.191" expl="wr (pool union pool`rep union {})`slots" proved="true">
  <proof prover="2"><result status="valid" time="1.42" steps="1558592"/></proof>
  </goal>
  <goal name="prog&#39;vc.192" expl="wr (pool union pool`rep union {})`head" proved="true">
  <proof prover="2"><result status="valid" time="1.43" steps="1553356"/></proof>
  </goal>
  <goal name="prog&#39;vc.193" expl="wr (pool union pool`rep)`cdr" proved="true">
  <proof prover="2"><result status="valid" time="0.62" steps="1013970"/></proof>
  </goal>
  <goal name="prog&#39;vc.194" expl="wr (pool union pool`rep union {})`arr" proved="true">
  <proof prover="2"><result status="valid" time="1.38" steps="1554825"/></proof>
  </goal>
  <goal name="prog&#39;vc.195" expl="wr (pool union pool`rep)`car" proved="true">
  <proof prover="2"><result status="valid" time="0.58" steps="1016474"/></proof>
  </goal>
  <goal name="prog&#39;vc.196" expl="wr (pool union pool`rep union {})`rep" proved="true">
  <proof prover="2"><result status="valid" time="1.31" steps="1555075"/></proof>
  </goal>
  <goal name="prog&#39;vc.197" expl="wr (pool union pool`rep union {})`cell_rep" proved="true">
  <proof prover="2"><result status="valid" time="1.31" steps="1556207"/></proof>
  </goal>
  <goal name="prog&#39;vc.198" expl="wr (pool union pool`rep union {})`top" proved="true">
  <proof prover="2"><result status="valid" time="1.30" steps="1555983"/></proof>
  </goal>
  <goal name="prog&#39;vc.199" expl="wr (pool union pool`rep union {})`size" proved="true">
  <proof prover="2"><result status="valid" time="1.36" steps="1556303"/></proof>
  </goal>
  <goal name="prog&#39;vc.200" expl="wr (pool union pool`rep union {})`length" proved="true">
  <proof prover="2"><result status="valid" time="1.45" steps="1560198"/></proof>
  </goal>
  <goal name="prog&#39;vc.201" expl="wr (pool union pool`rep union {})`cell_value" proved="true">
  <proof prover="2"><result status="valid" time="1.46" steps="1558779"/></proof>
  </goal>
  <goal name="prog&#39;vc.202" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.89" steps="11442"/></proof>
  </goal>
  <goal name="prog&#39;vc.203" expl="wr (pool union pool`rep union {})`contents" proved="true">
  <proof prover="2"><result status="valid" time="1.46" steps="1612405"/></proof>
  </goal>
  <goal name="prog&#39;vc.204" expl="wr (pool union pool`rep)`slots" proved="true">
  <proof prover="2"><result status="valid" time="0.62" steps="1050047"/></proof>
  </goal>
  <goal name="prog&#39;vc.205" expl="wr (pool union pool`rep union {})`head" proved="true">
  <proof prover="2"><result status="valid" time="1.52" steps="1619466"/></proof>
  </goal>
  <goal name="prog&#39;vc.206" expl="wr (pool union pool`rep union {})`cdr" proved="true">
  <proof prover="2"><result status="valid" time="1.52" steps="1620776"/></proof>
  </goal>
  <goal name="prog&#39;vc.207" expl="wr (pool union pool`rep union {})`arr" proved="true">
  <proof prover="2"><result status="valid" time="1.56" steps="1620860"/></proof>
  </goal>
  <goal name="prog&#39;vc.208" expl="wr (pool union pool`rep union {})`car" proved="true">
  <proof prover="2"><result status="valid" time="1.57" steps="1622832"/></proof>
  </goal>
  <goal name="prog&#39;vc.209" expl="wr (pool union pool`rep union {})`rep" proved="true">
  <proof prover="2"><result status="valid" time="1.60" steps="1621441"/></proof>
  </goal>
  <goal name="prog&#39;vc.210" expl="wr (pool union pool`rep union {})`cell_rep" proved="true">
  <proof prover="2"><result status="valid" time="1.61" steps="1622574"/></proof>
  </goal>
  <goal name="prog&#39;vc.211" expl="wr (pool union pool`rep union {})`top" proved="true">
  <proof prover="2"><result status="valid" time="1.62" steps="1622129"/></proof>
  </goal>
  <goal name="prog&#39;vc.212" expl="wr (pool union pool`rep union {})`size" proved="true">
  <proof prover="2"><result status="valid" time="1.65" steps="1622590"/></proof>
  </goal>
  <goal name="prog&#39;vc.213" expl="wr (pool union pool`rep)`length" proved="true">
  <proof prover="2"><result status="valid" time="0.68" steps="1053642"/></proof>
  </goal>
  <goal name="prog&#39;vc.214" expl="wr (pool union pool`rep union {})`cell_value" proved="true">
  <proof prover="2"><result status="valid" time="1.68" steps="1624996"/></proof>
  </goal>
  <goal name="prog&#39;vc.215" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="466791"/></proof>
  </goal>
  <goal name="prog&#39;vc.216" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="11844"/></proof>
  </goal>
  <goal name="prog&#39;vc.217" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11846"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="REL_STACK" proved="true">
 <goal name="init_Stack&#39;vc" expl="VC for init_Stack" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Stack&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="174"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="248"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="762"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1748"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="769"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.94" steps="10849"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="254"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.7" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="320"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.8" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="683"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.9" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init_Stack&#39;vc.9.0" expl="type invariant" proved="true">
   <transf name="unfold" proved="true" arg1="agree_allfields">
    <goal name="init_Stack&#39;vc.9.0.0" expl="type invariant" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="init_Stack&#39;vc.9.0.0.0" expl="type invariant" proved="true">
     <proof prover="0"><result status="valid" time="0.26" steps="384"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1169"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.14" steps="28116"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1150"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.77" steps="30811"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="784"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="418"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1192"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="2675"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="1174"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.16" steps="19151"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="798"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.21" expl="wr {self}`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="2907"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.22" expl="wr ({self} union {})`slots" proved="true">
  <proof prover="0"><result status="valid" time="1.83" steps="6868"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.23" expl="wr {self}`head" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="801"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.24" expl="wr {self}`cdr" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init_Stack&#39;vc.24.0" expl="wr {self}`cdr" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="init_Stack&#39;vc.24.0.0" expl="wr {self}`cdr" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="init_Stack&#39;vc.24.0.0.0" expl="wr {self}`cdr" proved="true">
     <proof prover="0"><result status="valid" time="0.28" steps="769"/></proof>
     <proof prover="1"><result status="valid" time="0.32" steps="72693"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.25" expl="wr {self}`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="3010"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.26" expl="wr {self}`car" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="813"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.27" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="3047"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.28" expl="wr {self}`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="821"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.29" expl="wr {self}`top" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="3083"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.30" expl="wr {self}`size" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="3091"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.31" expl="wr ({self} union {})`length" proved="true">
  <proof prover="0"><result status="valid" time="4.07" steps="9812"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.32" expl="wr {self}`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="837"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1631"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.34" expl="wr {self}`head" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="935"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.35" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="937"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.36" expl="wr {self}`size" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="943"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.37" expl="wr {self}`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="947"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.38" expl="wr {self}`top" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="861"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.39" expl="wr {self}`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="865"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.40" expl="wr {self}`car" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="869"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.41" expl="wr {self}`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="873"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.42" expl="wr {self}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="877"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.43" expl="wr {self}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="881"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.44" expl="wr {self}`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="885"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.45" expl="wr {self}`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="889"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="893"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.13" steps="12285"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.48" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="stackCoupling">
   <goal name="init_Stack&#39;vc.48.0" expl="VC for init_Stack" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Stack&#39;vc.48.0.0" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="460"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.1" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="460"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.2" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="460"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.3" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.22" steps="460"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.4" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="462"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.5" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="21.30" steps="61799"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.48.0.6" expl="VC for init_Stack" proved="true">
    <proof prover="0"><result status="valid" time="1.76" steps="7858"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.49" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init_Stack&#39;vc.49.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((diff
   (union
    (diff (domain (to_fmap (alloct l_s))) (domain (to_fmap (alloct l_s3))))
    (singleton l_self))
   (union (pool l_s) ((img_rep @ l_s) @ pool l_s))))" arg2="emptyRgn">
    <goal name="init_Stack&#39;vc.49.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="20.24" steps="58854"/></proof>
    </goal>
    <goal name="init_Stack&#39;vc.49.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="init_Stack&#39;vc.49.0.1.0" expl="apply premises" proved="true">
     <transf name="unfold" proved="true" arg1="(==&#39;)">
      <goal name="init_Stack&#39;vc.49.0.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="13.08" steps="27503"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="init_Stack&#39;vc.49.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((diff
   (union
    (diff (domain (to_fmap (alloct r_s))) (domain (to_fmap (alloct r_s1))))
    (singleton r_self))
   (union (pool r_s) ((img_rep @ r_s) @ pool r_s))))" arg2="emptyRgn">
    <goal name="init_Stack&#39;vc.49.1.0" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Stack&#39;vc.49.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="init_Stack&#39;vc.49.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="43.24" steps="112604"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.53" steps="42954"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.2" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="21.89" steps="40951"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.3" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.07" steps="40951"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.4" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.40" steps="42954"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.5" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.43" steps="42954"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.6" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.49" steps="42956"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.7" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.88" steps="42956"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.8" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.23" steps="40945"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.9" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.27" steps="40945"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.10" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.25" steps="40945"/></proof>
      </goal>
      <goal name="init_Stack&#39;vc.49.1.0.0.11" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="22.62" steps="42956"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Stack&#39;vc.49.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="12.32" steps="29642"/></proof>
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="init_Stack&#39;vc.49.1.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="init_Stack&#39;vc.49.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.27" steps="4495"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="496"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="496"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.52" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="498"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.53" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="501"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="504"/></proof>
  </goal>
  <goal name="init_Stack&#39;vc.55" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init_Stack&#39;vc.55.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="init_Stack&#39;vc.55.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="91.81" steps="2884997"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="init_Stack&#39;vc.55.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="init_Stack&#39;vc.55.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="59.12" steps="85554"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Stack&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="508"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="182"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="187"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.11" steps="14213"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="63"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="push&#39;vc" expl="VC for push" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="push&#39;vc.0" expl="a := self.arr" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="228"/></proof>
  </goal>
  <goal name="push&#39;vc.1" expl="t := self.top" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="233"/></proof>
  </goal>
  <goal name="push&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="88"/></proof>
  </goal>
  <goal name="push&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="511"/></proof>
  </goal>
  <goal name="push&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1559"/></proof>
  </goal>
  <goal name="push&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="402"/></proof>
  </goal>
  <goal name="push&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="3550"/></proof>
  </goal>
  <goal name="push&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="94"/></proof>
  </goal>
  <goal name="push&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="174"/></proof>
  </goal>
  <goal name="push&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="push&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="144"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="448"/></proof>
  </goal>
  <goal name="push&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="452"/></proof>
  </goal>
  <goal name="push&#39;vc.12" expl="Cell(v,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="244"/></proof>
  </goal>
  <goal name="push&#39;vc.13" expl="Cell(v,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="244"/></proof>
  </goal>
  <goal name="push&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="5930"/></proof>
  </goal>
  <goal name="push&#39;vc.15" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="4947"/></proof>
  </goal>
  <goal name="push&#39;vc.16" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="903"/></proof>
  </goal>
  <goal name="push&#39;vc.17" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="977"/></proof>
  </goal>
  <goal name="push&#39;vc.18" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1005"/></proof>
  </goal>
  <goal name="push&#39;vc.19" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1076"/></proof>
  </goal>
  <goal name="push&#39;vc.20" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1103"/></proof>
  </goal>
  <goal name="push&#39;vc.21" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1204"/></proof>
  </goal>
  <goal name="push&#39;vc.22" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="1236"/></proof>
  </goal>
  <goal name="push&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="628"/></proof>
  </goal>
  <goal name="push&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.57" steps="40714"/></proof>
  </goal>
  <goal name="push&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="36.73" steps="103220"/></proof>
  </goal>
  <goal name="push&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="1975"/></proof>
  </goal>
  <goal name="push&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="34.46" steps="106548"/></proof>
  </goal>
  <goal name="push&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="634"/></proof>
  </goal>
  <goal name="push&#39;vc.29" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="stackCoupling">
   <goal name="push&#39;vc.29.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="push&#39;vc.29.0.0" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.30" steps="594"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.86" steps="2058"/></proof>
  </goal>
  <goal name="push&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="5383"/></proof>
  </goal>
  <goal name="push&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="28.48" steps="87220"/></proof>
  </goal>
  <goal name="push&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="25.63" steps="89266"/></proof>
  </goal>
  <goal name="push&#39;vc.34" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_car_framed_by">
   <goal name="push&#39;vc.34.0" expl="type invariant" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="push&#39;vc.34.0.0" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="642"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.35" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="3.51" steps="11677"/></proof>
  </goal>
  <goal name="push&#39;vc.36" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="4.05" steps="15050"/></proof>
  </goal>
  <goal name="push&#39;vc.37" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1221"/></proof>
  </goal>
  <goal name="push&#39;vc.38" expl="wr ({self} union {self}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1225"/></proof>
  </goal>
  <goal name="push&#39;vc.39" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="3.40" steps="10864"/></proof>
  </goal>
  <goal name="push&#39;vc.40" expl="wr ({self} union {self}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="1233"/></proof>
  </goal>
  <goal name="push&#39;vc.41" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="3.76" steps="12742"/></proof>
  </goal>
  <goal name="push&#39;vc.42" expl="wr ({self} union {self}`rep union {})`cell_rep" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="push&#39;vc.42.0" expl="wr ({self} union {self}`rep union {})`cell_rep" proved="true">
   <proof prover="0"><result status="valid" time="5.75" steps="19334"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.43" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="3.79" steps="11325"/></proof>
  </goal>
  <goal name="push&#39;vc.44" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="3.93" steps="12160"/></proof>
  </goal>
  <goal name="push&#39;vc.45" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1263"/></proof>
  </goal>
  <goal name="push&#39;vc.46" expl="wr ({self} union {self}`rep union {})`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="22.74" steps="38224"/></proof>
  </goal>
  <goal name="push&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="2746"/></proof>
  </goal>
  <goal name="push&#39;vc.48" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="5.83" steps="14902"/></proof>
  </goal>
  <goal name="push&#39;vc.49" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="3.82" steps="10263"/></proof>
  </goal>
  <goal name="push&#39;vc.50" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="5.84" steps="14889"/></proof>
  </goal>
  <goal name="push&#39;vc.51" expl="wr ({self} union {self}`rep union {})`cdr" proved="true">
  <proof prover="0"><result status="valid" time="12.43" steps="18226"/></proof>
  </goal>
  <goal name="push&#39;vc.52" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="4.16" steps="10652"/></proof>
  </goal>
  <goal name="push&#39;vc.53" expl="wr ({self} union {self}`rep union {})`car" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="push&#39;vc.53.0" expl="wr ({self} union {self}`rep union {})`car" proved="true">
   <proof prover="0"><result status="valid" time="66.30" steps="45415"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.54" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="11.25" steps="15664"/></proof>
  </goal>
  <goal name="push&#39;vc.55" expl="wr ({self} union {self}`rep union {})`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="11.47" steps="16710"/></proof>
  </goal>
  <goal name="push&#39;vc.56" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="4.20" steps="10687"/></proof>
  </goal>
  <goal name="push&#39;vc.57" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="11.91" steps="15712"/></proof>
  </goal>
  <goal name="push&#39;vc.58" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="4.09" steps="10678"/></proof>
  </goal>
  <goal name="push&#39;vc.59" expl="wr ({self} union {self}`rep union {})`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="11.62" steps="17144"/></proof>
  </goal>
  <goal name="push&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.05" steps="9894"/></proof>
  </goal>
  <goal name="push&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="6.15" steps="13695"/></proof>
  </goal>
  <goal name="push&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="6.14" steps="13782"/></proof>
  </goal>
  <goal name="push&#39;vc.63" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="push&#39;vc.63.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff
   (union
    (diff (domain (to_fmap (alloct l_s))) (domain (to_fmap (alloct l_s3))))
    (union (singleton l_self) (rep (heap l_s3))[l_self]))
   (union (pool l_s) ((img_rep @ l_s) @ pool l_s)))" arg2="emptyRgn">
    <goal name="push&#39;vc.63.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="6.99" steps="17069"/></proof>
    </goal>
    <goal name="push&#39;vc.63.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="7.06" steps="15547"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="push&#39;vc.63.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff
   (union
    (diff (domain (to_fmap (alloct r_s))) (domain (to_fmap (alloct r_s4))))
    (union (singleton r_self) (rep (heap r_s4))[r_self]))
   (union (pool r_s) ((img_rep @ r_s) @ pool r_s)))" arg2="emptyRgn">
    <goal name="push&#39;vc.63.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.10" steps="17021"/></proof>
    </goal>
    <goal name="push&#39;vc.63.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="push&#39;vc.63.1.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="push&#39;vc.63.1.1.0.0" expl="apply premises" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="push&#39;vc.63.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="push&#39;vc.63.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.63" steps="15533"/></proof>
        </goal>
        <goal name="push&#39;vc.63.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.33" steps="9458"/></proof>
        <proof prover="1"><result status="valid" time="1.06" steps="122094"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="718"/></proof>
  </goal>
  <goal name="push&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="718"/></proof>
  </goal>
  <goal name="push&#39;vc.66" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="push&#39;vc.66.0" expl="VC for push" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="push&#39;vc.66.0.0" expl="VC for push" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="push&#39;vc.66.0.0.0" expl="VC for push" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="720"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="push&#39;vc.66.1" expl="VC for push" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="push&#39;vc.66.1.0" expl="VC for push" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="push&#39;vc.66.1.0.0" expl="VC for push" proved="true">
     <proof prover="0"><result status="valid" time="6.01" steps="15091"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.74" steps="14832"/></proof>
  </goal>
  <goal name="push&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="726"/></proof>
  </goal>
  <goal name="push&#39;vc.69" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="push&#39;vc.69.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="push&#39;vc.69.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="push&#39;vc.69.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
      <goal name="push&#39;vc.69.0.0.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="push&#39;vc.69.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.62" steps="686"/></proof>
       </goal>
       <goal name="push&#39;vc.69.0.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="161.79" steps="115392"/></proof>
       <transf name="rewrite" proved="true" arg1="union_def">
        <goal name="push&#39;vc.69.0.0.0.0.1.0" expl="VC for push" proved="true">
        <transf name="right" proved="true" >
         <goal name="push&#39;vc.69.0.0.0.0.1.0.0" expl="right case" proved="true">
         <proof prover="0"><result status="valid" time="104.14" steps="87701"/></proof>
         <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
          <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0" expl="right case" proved="true">
          <transf name="destruct_rec" proved="true" arg1="H">
           <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0" expl="right case" proved="true">
           <proof prover="0"><result status="valid" time="30.30" steps="43734"/></proof>
           <transf name="rewrite" proved="true" arg1="img_rep_ax">
            <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0" expl="VC for push" proved="true">
            <transf name="exists" proved="true" arg1="q">
             <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0.0.0" proved="true">
              <proof prover="0"><result status="valid" time="0.58" steps="692"/></proof>
              </goal>
              <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0.0.1" proved="true">
              <proof prover="0"><result status="valid" time="0.60" steps="692"/></proof>
              </goal>
              <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0.0.2" proved="true">
              <proof prover="0"><result status="valid" time="0.45" steps="690"/></proof>
              </goal>
              <goal name="push&#39;vc.69.0.0.0.0.1.0.0.0.0.0.0.3" proved="true">
              <proof prover="0"><result status="valid" time="27.71" steps="39794"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="push&#39;vc.69.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="push&#39;vc.69.1.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="push&#39;vc.69.1.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(x = r_self)">
      <goal name="push&#39;vc.69.1.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="0.47" steps="688"/></proof>
      </goal>
      <goal name="push&#39;vc.69.1.0.0.1" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
       <goal name="push&#39;vc.69.1.0.0.1.0" expl="false case (postcondition)" proved="true">
       <transf name="destruct" proved="true" arg1="H">
        <goal name="push&#39;vc.69.1.0.0.1.0.0" expl="false case (postcondition)" proved="true">
        <proof prover="0"><result status="valid" time="0.46" steps="688"/></proof>
        </goal>
        <goal name="push&#39;vc.69.1.0.0.1.0.1" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="union_def">
         <goal name="push&#39;vc.69.1.0.0.1.0.1.0" expl="VC for push" proved="true">
         <transf name="right" proved="true" >
          <goal name="push&#39;vc.69.1.0.0.1.0.1.0.0" expl="right case" proved="true">
          <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
           <goal name="push&#39;vc.69.1.0.0.1.0.1.0.0.0" expl="right case" proved="true">
           <transf name="destruct_rec" proved="true" arg1="H">
            <goal name="push&#39;vc.69.1.0.0.1.0.1.0.0.0.0" expl="right case" proved="true">
            <transf name="rewrite" proved="true" arg1="img_rep_ax">
             <goal name="push&#39;vc.69.1.0.0.1.0.1.0.0.0.0.0" expl="VC for push" proved="true">
             <transf name="exists" proved="true" arg1="q">
              <goal name="push&#39;vc.69.1.0.0.1.0.1.0.0.0.0.0.0" proved="true">
              <proof prover="0"><result status="valid" time="20.43" steps="28229"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="730"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pop&#39;vc.0" expl="a := self.arr" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="226"/></proof>
  </goal>
  <goal name="pop&#39;vc.1" expl="t := self.top" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="231"/></proof>
  </goal>
  <goal name="pop&#39;vc.2" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="236"/></proof>
  </goal>
  <goal name="pop&#39;vc.3" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(listLength r_s.heap.contents[r_self] &gt; 0)">
   <goal name="pop&#39;vc.3.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="249"/></proof>
   </goal>
   <goal name="pop&#39;vc.3.1" expl="assertion" proved="true">
   <transf name="destruct_term" proved="true" arg1="r_s.heap.contents[r_self]">
    <goal name="pop&#39;vc.3.1.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="68"/></proof>
    </goal>
    <goal name="pop&#39;vc.3.1.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="68"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1503"/></proof>
  </goal>
  <goal name="pop&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="71"/></proof>
  </goal>
  <goal name="pop&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="809"/></proof>
  </goal>
  <goal name="pop&#39;vc.7" expl="result := a.{t} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="942"/></proof>
  </goal>
  <goal name="pop&#39;vc.8" expl="result := tmp.car" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1560"/></proof>
  </goal>
  <goal name="pop&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="84"/></proof>
  </goal>
  <goal name="pop&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="284"/></proof>
  </goal>
  <goal name="pop&#39;vc.11" expl="nxt := tmp.cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1623"/></proof>
  </goal>
  <goal name="pop&#39;vc.12" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="356"/></proof>
  </goal>
  <goal name="pop&#39;vc.13" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="362"/></proof>
  </goal>
  <goal name="pop&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="196"/></proof>
  </goal>
  <goal name="pop&#39;vc.15" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="445"/></proof>
  </goal>
  <goal name="pop&#39;vc.16" expl="contents := self.contents" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="451"/></proof>
  </goal>
  <goal name="pop&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="254"/></proof>
  </goal>
  <goal name="pop&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="864"/></proof>
  </goal>
  <goal name="pop&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1703"/></proof>
  </goal>
  <goal name="pop&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="1043"/></proof>
  </goal>
  <goal name="pop&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="11776"/></proof>
  </goal>
  <goal name="pop&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="260"/></proof>
  </goal>
  <goal name="pop&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="262"/></proof>
  </goal>
  <goal name="pop&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="859"/></proof>
  </goal>
  <goal name="pop&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1919"/></proof>
  </goal>
  <goal name="pop&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="690"/></proof>
  </goal>
  <goal name="pop&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.27" steps="31514"/></proof>
  </goal>
  <goal name="pop&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="268"/></proof>
  </goal>
  <goal name="pop&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="2837"/></proof>
  </goal>
  <goal name="pop&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="3659"/></proof>
  </goal>
  <goal name="pop&#39;vc.31" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="3745"/></proof>
  </goal>
  <goal name="pop&#39;vc.32" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="554"/></proof>
  </goal>
  <goal name="pop&#39;vc.33" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="558"/></proof>
  </goal>
  <goal name="pop&#39;vc.34" expl="wr ({self} union {self}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="562"/></proof>
  </goal>
  <goal name="pop&#39;vc.35" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="566"/></proof>
  </goal>
  <goal name="pop&#39;vc.36" expl="wr ({self} union {self}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="570"/></proof>
  </goal>
  <goal name="pop&#39;vc.37" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="574"/></proof>
  </goal>
  <goal name="pop&#39;vc.38" expl="wr ({self} union {self}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="578"/></proof>
  </goal>
  <goal name="pop&#39;vc.39" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="3719"/></proof>
  </goal>
  <goal name="pop&#39;vc.40" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="3767"/></proof>
  </goal>
  <goal name="pop&#39;vc.41" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="590"/></proof>
  </goal>
  <goal name="pop&#39;vc.42" expl="wr ({self} union {self}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="594"/></proof>
  </goal>
  <goal name="pop&#39;vc.43" expl="wr ({self} union {self}`rep)`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="3596"/></proof>
  </goal>
  <goal name="pop&#39;vc.44" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="608"/></proof>
  </goal>
  <goal name="pop&#39;vc.45" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="3617"/></proof>
  </goal>
  <goal name="pop&#39;vc.46" expl="wr ({self} union {self}`rep)`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="616"/></proof>
  </goal>
  <goal name="pop&#39;vc.47" expl="wr ({self} union {self}`rep)`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="620"/></proof>
  </goal>
  <goal name="pop&#39;vc.48" expl="wr ({self} union {self}`rep)`car" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="624"/></proof>
  </goal>
  <goal name="pop&#39;vc.49" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="628"/></proof>
  </goal>
  <goal name="pop&#39;vc.50" expl="wr ({self} union {self}`rep)`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="632"/></proof>
  </goal>
  <goal name="pop&#39;vc.51" expl="wr ({self} union {self}`rep)`top" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="636"/></proof>
  </goal>
  <goal name="pop&#39;vc.52" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="3694"/></proof>
  </goal>
  <goal name="pop&#39;vc.53" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="644"/></proof>
  </goal>
  <goal name="pop&#39;vc.54" expl="wr ({self} union {self}`rep)`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="648"/></proof>
  </goal>
  <goal name="pop&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.52" steps="7685"/></proof>
  </goal>
  <goal name="pop&#39;vc.56" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="stackCoupling">
   <goal name="pop&#39;vc.56.0" expl="VC for pop" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pop&#39;vc.56.0.0" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="308"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.1" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="308"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.2" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="308"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.3" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="308"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.4" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="310"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.5" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="310"/></proof>
    </goal>
    <goal name="pop&#39;vc.56.0.6" expl="VC for pop" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="6902"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="3972"/></proof>
  </goal>
  <goal name="pop&#39;vc.58" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pop&#39;vc.58.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff
   (union
    (diff (domain (to_fmap (alloct l_s))) (domain (to_fmap (alloct l_s1))))
    (union (singleton l_self) (rep (heap l_s1))[l_self]))
   (union (pool l_s) ((img_rep @ l_s) @ pool l_s)))" arg2="emptyRgn">
    <goal name="pop&#39;vc.58.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.44" steps="34423"/></proof>
    </goal>
    <goal name="pop&#39;vc.58.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="pop&#39;vc.58.0.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="pop&#39;vc.58.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="pop&#39;vc.58.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.77" steps="8572"/></proof>
       </goal>
       <goal name="pop&#39;vc.58.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.78" steps="4169"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="pop&#39;vc.58.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(diff
   (union
    (diff (domain (to_fmap (alloct r_s))) (domain (to_fmap (alloct r_s1))))
    (union (singleton r_self) (rep (heap r_s1))[r_self]))
   (union (pool r_s) ((img_rep @ r_s) @ pool r_s)))" arg2="emptyRgn">
    <goal name="pop&#39;vc.58.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="26.54" steps="94906"/></proof>
    </goal>
    <goal name="pop&#39;vc.58.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="extensionality1">
     <goal name="pop&#39;vc.58.1.1.0" expl="apply premises" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="pop&#39;vc.58.1.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="pop&#39;vc.58.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.72" steps="8605"/></proof>
       </goal>
       <goal name="pop&#39;vc.58.1.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.89" steps="4050"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="342"/></proof>
  </goal>
  <goal name="pop&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="342"/></proof>
  </goal>
  <goal name="pop&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="344"/></proof>
  </goal>
  <goal name="pop&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="564"/></proof>
  </goal>
  <goal name="pop&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.13" steps="9403"/></proof>
  </goal>
  <goal name="pop&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="574"/></proof>
  </goal>
  <goal name="pop&#39;vc.65" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pop&#39;vc.65.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="9.80" steps="21668"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="pop&#39;vc.65.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="pop&#39;vc.65.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.75" steps="13124"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="pop&#39;vc.65.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="8.46" steps="21409"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="pop&#39;vc.65.1.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="pop&#39;vc.65.1.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="4.15" steps="13056"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.71" steps="12618"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getCellValue&#39;vc" expl="VC for getCellValue" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="273"/></proof>
 </goal>
 <goal name="boundary_frames_coupling_REL_STACK" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="boundary_frames_coupling_REL_STACK.0" proved="true">
  <proof prover="0"><result status="valid" time="5.00" steps="27048"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="stackCoupling_is_refperm_monotonic" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="stackCoupling_is_refperm_monotonic.0" proved="true">
  <transf name="unfold" proved="true" arg1="stackCoupling">
   <goal name="stackCoupling_is_refperm_monotonic.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="stackCoupling_is_refperm_monotonic.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="12"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="12"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.2" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="12"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.3" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="12"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.4" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="12"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.5" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="111"/></proof>
    </goal>
    <goal name="stackCoupling_is_refperm_monotonic.0.0.6" proved="true">
    <transf name="unfold" proved="true" arg1="stackCoupling" arg2="in" arg3="H10">
     <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H10">
      <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.03" steps="22"/></proof>
      </goal>
      <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1" proved="true">
      <transf name="apply" proved="true" arg1="H10" arg2="with" arg3="l_s11,r_s12">
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.12" steps="525"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="stackCoupling_is_refperm_monotonic.0.0.6.0.1.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cell" proved="true">
 <goal name="init_Cell&#39;vc" expl="VC for init_Cell" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Cell&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="68"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="784"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="395"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="228"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="833"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="74"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.7" expl="wr {self}`cell_rep" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="118"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.8" expl="wr {self}`cell_value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="122"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.9" expl="wr {self}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="116"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.10" expl="wr {self}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.11" expl="wr {self}`cdr" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="124"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.12" expl="wr {self}`car" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="128"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.13" expl="wr {self}`arr" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="132"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.14" expl="wr {self}`top" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="136"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.15" expl="wr {self}`contents" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="140"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.16" expl="wr {self}`size" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.17" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="148"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.18" expl="wr {self}`head" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="152"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="100"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="102"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="stack_theory.mlw"/>
<theory name="Stack_theory" proved="true">
 <goal name="hd&#39;vc" expl="VC for hd" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="8"/></proof>
 </goal>
 <goal name="listNth&#39;vc" expl="VC for listNth" proved="true">
 <proof prover="0"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="listNth_0_Cons" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="34"/></proof>
 </goal>
 <goal name="listNth_pos_Cons" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="listNth_pos_Cons.0" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="470"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
