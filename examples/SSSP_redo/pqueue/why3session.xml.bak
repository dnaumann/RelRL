<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="2" name="CVC3" version="2.4.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="4" name="Z3" version="4.8.4" timelimit="80" steplimit="0" memlimit="16000"/>
<prover id="5" name="CVC4" version="1.6" alternative="counterexamples" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="6" name="CVC4" version="1.6" timelimit="100" steplimit="0" memlimit="16000"/>
<prover id="7" name="Z3" version="4.8.4" alternative="counterexamples" timelimit="15" steplimit="0" memlimit="10000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="pqueue.mlw"/>
<theory name="State" proved="true">
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="450"/></proof>
 </goal>
</theory>
<theory name="PQUEUE" proved="true">
 <goal name="noPqueueInRep" proved="true">
 <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="1576"/></proof>
 </goal>
</theory>
<theory name="PqueueL" proved="true">
 <goal name="repClosed_DEF" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="repClosed_DEF.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repClosed_DEF.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="6"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="6"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.2" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.3" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.4" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.5" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="822"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="1.14" steps="6568"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Node&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.06" steps="147"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="942"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="413"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="516"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="72"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.7" expl="wr {self}`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.07" steps="107"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.8" expl="wr {self}`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.07" steps="111"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.30" steps="1602"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.06" steps="78"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="60"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="178"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="584"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="494"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="2583"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="116"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="128"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="136"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="140"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="144"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="439"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="152"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="156"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="160"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="164"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="168"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="176"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.44" steps="7711"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="215"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="209"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0" memlimit="16000"><result status="valid" time="0.06" steps="242"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.25.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.25.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1573"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.1" expl="VC for init_Pqueue" proved="true">
    <transf name="unfold" proved="true" arg1="typeofRgn">
     <goal name="init_Pqueue&#39;vc.25.0.1.0" expl="VC for init_Pqueue" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="init_Pqueue&#39;vc.25.0.1.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="9.11" steps="23825"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.95" steps="4269"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.26" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.26.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.26.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Pqueue&#39;vc.26.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="init_Pqueue&#39;vc.26.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.00" steps="12543"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.14" steps="4259"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.2" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.96" steps="40901"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.3" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.56" steps="39543"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.4" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="19.89" steps="41872"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1549"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.95" steps="3997"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.3" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1726"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1738"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.5" expl="VC for init_Pqueue">
    <transf name="inline_goal" >
     <goal name="init_Pqueue&#39;vc.26.0.5.0" expl="VC for init_Pqueue">
     <transf name="split_vc" >
      <goal name="init_Pqueue&#39;vc.26.0.5.0.0" expl="VC for init_Pqueue">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.66" steps="50000"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.5.0.1" expl="VC for init_Pqueue">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.79" steps="50000"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="348"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="507"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.15" steps="55421"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.24" steps="59072"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="96"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="rep := self.rep" proved="true">
  <proof prover="5"><result status="valid" time="0.26" steps="63187"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="43"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="fkey := first.key" proved="true">
  <proof prover="5"><result status="valid" time="0.30" steps="64334"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="skey := second.key" proved="true">
  <proof prover="5"><result status="valid" time="0.30" steps="66054"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="tmp := first.prev" proved="true">
  <proof prover="5"><result status="valid" time="0.31" steps="66604"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.49" steps="87475"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="70959"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="108"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="tmp := second.child" proved="true">
  <proof prover="5"><result status="valid" time="0.34" steps="69892"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="tmp := first.sibling" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="70657"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="2428"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="75688"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="181"/></proof>
  <proof prover="5"><result status="valid" time="0.29" steps="72035"/></proof>
  </goal>
  <goal name="link&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="336"/></proof>
  <proof prover="5"><result status="valid" time="0.53" steps="106238"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="11.60" steps="56335"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1089"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1338"/></proof>
  <proof prover="5"><result status="valid" time="0.45" steps="93262"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="187"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="78194"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.24.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.24.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.66" steps="6351"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="1423"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.77" steps="7187"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="11.30" steps="52116"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.93" steps="8060"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="217"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="74440"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="428"/></proof>
  <proof prover="5"><result status="valid" time="0.56" steps="112399"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.12" steps="9830"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1388"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="1718"/></proof>
  <proof prover="5"><result status="valid" time="0.45" steps="94591"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="223"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="81175"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.79" steps="29404"/></proof>
  </goal>
  <goal name="link&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="220"/></proof>
  <proof prover="5"><result status="valid" time="0.14" steps="55245"/></proof>
  </goal>
  <goal name="link&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="438"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="74077"/></proof>
  </goal>
  <goal name="link&#39;vc.34" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="4856"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.35.0" expl="wr {self}`rep`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.35.0.0" expl="wr {self}`rep`prev" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.43" steps="12190"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.36" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="4921"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="53.02" steps="150026"/></proof>
  <proof prover="5"><result status="valid" time="9.42" steps="783982"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.38.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.38.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.60" steps="3019"/></proof>
    </goal>
    <goal name="link&#39;vc.38.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.56" steps="12456"/></proof>
    </goal>
    <goal name="link&#39;vc.38.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1398"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.39" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.39.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.39.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="11.09" steps="43844"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="2029"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1322"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2571"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="2574"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.06" steps="24042"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="241"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="65411"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="235"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="56675"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="235"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="61162"/></proof>
  </goal>
  <goal name="link&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.34" steps="71136"/></proof>
  </goal>
  <goal name="link&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="331"/></proof>
  <proof prover="5"><result status="valid" time="0.54" steps="100468"/></proof>
  </goal>
  <goal name="link&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.54" steps="19266"/></proof>
  </goal>
  <goal name="link&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1008"/></proof>
  </goal>
  <goal name="link&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1254"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="87762"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="181"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="77193"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.49.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.49.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.61" steps="6648"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1312"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.99" steps="8737"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.65" steps="19503"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.60" steps="7268"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="178"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="54788"/></proof>
  </goal>
  <goal name="link&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="343"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="70840"/></proof>
  </goal>
  <goal name="link&#39;vc.52" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.62" steps="3539"/></proof>
  </goal>
  <goal name="link&#39;vc.53" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.55" steps="15843"/></proof>
  </goal>
  <goal name="link&#39;vc.54" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.63" steps="3575"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.04" steps="18991"/></proof>
  <proof prover="5"><result status="valid" time="4.58" steps="428567"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.56.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.56.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.42" steps="2297"/></proof>
    </goal>
    <goal name="link&#39;vc.56.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.11" steps="8678"/></proof>
    </goal>
    <goal name="link&#39;vc.56.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="1080"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.57" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.57.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.57.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.34" steps="21452"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1567"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="1024"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="1993"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1993"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.19" steps="17754"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="199"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="64070"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="193"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56063"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="193"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="60595"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="74"/></proof>
  </goal>
  <goal name="link&#39;vc.62" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="164"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="66567"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1800"/></proof>
  <proof prover="5"><result status="valid" time="0.60" steps="88929"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="110"/></proof>
  </goal>
  <goal name="link&#39;vc.65" expl="tmp := first.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="67922"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="119"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="tmp := first.child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="267"/></proof>
  <proof prover="5"><result status="valid" time="0.36" steps="71117"/></proof>
  </goal>
  <goal name="link&#39;vc.69" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="176"/></proof>
  </goal>
  <goal name="link&#39;vc.70" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="317"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="71784"/></proof>
  </goal>
  <goal name="link&#39;vc.71" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.50" steps="2511"/></proof>
  </goal>
  <goal name="link&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="241"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="73966"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="415"/></proof>
  <proof prover="5"><result status="valid" time="0.58" steps="109639"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.98" steps="90810"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1437"/></proof>
  </goal>
  <goal name="link&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1471"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="92274"/></proof>
  </goal>
  <goal name="link&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="247"/></proof>
  <proof prover="5"><result status="valid" time="0.41" steps="80501"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.78.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.78.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.90" steps="7095"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.30" steps="1537"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.83" steps="18238"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="16.40" steps="68188"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.85" steps="8738"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="244"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="55459"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="449"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="73674"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="4219"/></proof>
  </goal>
  <goal name="link&#39;vc.82" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.82.0" expl="wr {self}`rep`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.82.0.0" expl="wr {self}`rep`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.08" steps="10802"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.83" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="13.85" steps="45566"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.60" steps="48799"/></proof>
  <proof prover="5"><result status="valid" time="7.69" steps="673703"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.85.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.85.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.47" steps="2868"/></proof>
    </goal>
    <goal name="link&#39;vc.85.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.74" steps="11766"/></proof>
    </goal>
    <goal name="link&#39;vc.85.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1251"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.86" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.86.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.86.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.63" steps="30461"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="1981"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="1195"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2438"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2440"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.66" steps="24341"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="265"/></proof>
  <proof prover="5"><result status="valid" time="0.24" steps="65772"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="259"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="56845"/></proof>
  </goal>
  <goal name="link&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="259"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61359"/></proof>
  </goal>
  <goal name="link&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="209"/></proof>
  <proof prover="5"><result status="valid" time="0.30" steps="72478"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="381"/></proof>
  <proof prover="5"><result status="valid" time="0.61" steps="104353"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.99" steps="26213"/></proof>
  </goal>
  <goal name="link&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1109"/></proof>
  </goal>
  <goal name="link&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="1513"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="88555"/></proof>
  </goal>
  <goal name="link&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.40" steps="78616"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.96.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.96.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.56" steps="6125"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.37" steps="1401"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.07" steps="14843"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.05" steps="15546"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.06" steps="7701"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="55141"/></proof>
  </goal>
  <goal name="link&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="403"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="72228"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.80" steps="3680"/></proof>
  </goal>
  <goal name="link&#39;vc.100" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.16" steps="20162"/></proof>
  </goal>
  <goal name="link&#39;vc.101" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.82" steps="26268"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.34" steps="22129"/></proof>
  <proof prover="5"><result status="valid" time="5.93" steps="550252"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="45.66" steps="172191"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.104.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.104.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.59" steps="26293"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="1676"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1107"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="2114"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2113"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.83" steps="21035"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="233"/></proof>
  <proof prover="5"><result status="valid" time="0.23" steps="64951"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56504"/></proof>
  </goal>
  <goal name="link&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.24" steps="61080"/></proof>
  </goal>
  <goal name="link&#39;vc.108" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="110"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="tmp := first.child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="68631"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="link&#39;vc.111" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="265"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="69928"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1956"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="209"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="72374"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="375"/></proof>
  <proof prover="5"><result status="valid" time="0.53" steps="103673"/></proof>
  </goal>
  <goal name="link&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.45" steps="33448"/></proof>
  </goal>
  <goal name="link&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1414"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1344"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="89629"/></proof>
  </goal>
  <goal name="link&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="78513"/></proof>
  </goal>
  <goal name="link&#39;vc.119" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.119.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.119.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.51" steps="5930"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="202"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.90" steps="14521"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.37" steps="20124"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.68" steps="7049"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="55130"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="394"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="72162"/></proof>
  </goal>
  <goal name="link&#39;vc.122" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.58" steps="3669"/></proof>
  </goal>
  <goal name="link&#39;vc.123" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.76" steps="16874"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.84" steps="16953"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.36" steps="20695"/></proof>
  <proof prover="5"><result status="valid" time="6.25" steps="541881"/></proof>
  </goal>
  <goal name="link&#39;vc.126" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="39.50" steps="154076"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.127.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.127.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.58" steps="22138"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1815"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="1081"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="2241"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="2242"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.08" steps="17697"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.128" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="233"/></proof>
  <proof prover="5"><result status="valid" time="0.27" steps="64963"/></proof>
  </goal>
  <goal name="link&#39;vc.129" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56510"/></proof>
  </goal>
  <goal name="link&#39;vc.130" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61019"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="177"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="70336"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="332"/></proof>
  <proof prover="5"><result status="valid" time="0.55" steps="97973"/></proof>
  </goal>
  <goal name="link&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.47" steps="19432"/></proof>
  </goal>
  <goal name="link&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="978"/></proof>
  </goal>
  <goal name="link&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="1213"/></proof>
  <proof prover="5"><result status="valid" time="0.38" steps="85081"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="183"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="76047"/></proof>
  </goal>
  <goal name="link&#39;vc.137" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.137.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.137.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.16" steps="4431"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="170"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="12053"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.38" steps="5418"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.34" steps="6027"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="180"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="54812"/></proof>
  </goal>
  <goal name="link&#39;vc.139" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="341"/></proof>
  <proof prover="5"><result status="valid" time="0.30" steps="70081"/></proof>
  </goal>
  <goal name="link&#39;vc.140" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="3173"/></proof>
  </goal>
  <goal name="link&#39;vc.141" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1386"/></proof>
  </goal>
  <goal name="link&#39;vc.142" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.97" steps="22175"/></proof>
  </goal>
  <goal name="link&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.08" steps="15169"/></proof>
  <proof prover="5"><result status="valid" time="4.81" steps="411740"/></proof>
  </goal>
  <goal name="link&#39;vc.144" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.144.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.144.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2196"/></proof>
    </goal>
    <goal name="link&#39;vc.144.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.76" steps="7945"/></proof>
    </goal>
    <goal name="link&#39;vc.144.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1044"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.145" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.145.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.145.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.59" steps="20525"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1517"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="987"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1924"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1922"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.5" expl="VC for link">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.31" steps="14634"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.146" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="201"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="63777"/></proof>
  </goal>
  <goal name="link&#39;vc.147" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="195"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="56093"/></proof>
  </goal>
  <goal name="link&#39;vc.148" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="195"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="60672"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.14" steps="1364"/></proof>
 </goal>
 <goal name="img_rep_lem" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="2"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="6.47" steps="33759"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="60"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="72.33" steps="273355"/></proof>
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.6.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.6.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.40" steps="1781"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.81" steps="12520"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="797"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="931"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.44" steps="26118"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1212"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="703"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="1283"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1285"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.5" expl="assertion">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.45" steps="11259"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="657"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="327"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="298"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="142"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="402"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="815"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1411"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.96" steps="13667"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="148"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="2446"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="2331"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="3038"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.21.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.21.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="2222"/></proof>
    </goal>
    <goal name="insert&#39;vc.21.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="timeout" time="200.00"/></proof>
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.21.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="134"/></proof>
     </goal>
     <goal name="insert&#39;vc.21.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.21.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.21.0.1.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="13.06" steps="42323"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.21.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="378"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="16.58" steps="50616"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.23.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.23.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.23.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.23.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="6.72" steps="16950"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.03" steps="4297"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="7.40" steps="22103"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="9.19" steps="26050"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="7.59" steps="23255"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.23.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1702"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="4096"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="2209"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="2381"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.5" expl="VC for insert">
    <proof prover="0"><result status="valid" time="8.75" steps="30330"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="154"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="152"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55889"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="424"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="160"/></proof>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="190"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="2328"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="369"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="196"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="498"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="230"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="600"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1157"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1939"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.93" steps="18303"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="236"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="232"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="550"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="5450"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="431"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="435"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="439"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_key_framed_by">
   <goal name="insert&#39;vc.45.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.45.0.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
    <proof prover="0"><result status="valid" time="2.82" steps="6774"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.46" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.05" steps="7256"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="4.35" steps="9734"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="wr ({} union {self}`rep)`child" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_tag_framed_by">
   <goal name="insert&#39;vc.48.0" expl="wr ({} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.48.0.0" expl="wr ({} union {self}`rep)`child" proved="true">
    <proof prover="0"><result status="valid" time="4.11" steps="8705"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.49" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="5"><result status="valid" time="1.97" steps="193571"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="wr ({} union {self}`rep)`tag" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="insert&#39;vc.50.0" expl="wr ({} union {self}`rep)`tag" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.50.0.0" expl="wr ({} union {self}`rep)`tag" proved="true">
    <proof prover="0"><result status="valid" time="11.98" steps="9084"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="4.41" steps="9832"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="489"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="11.97" steps="8886"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="497"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.55.0" expl="VC for insert" proved="true">
   <transf name="intros" proved="true" arg1="x">
    <goal name="insert&#39;vc.55.0.0" expl="VC for insert" proved="true">
    <transf name="intros" proved="true" arg1="H">
     <goal name="insert&#39;vc.55.0.0.0" expl="VC for insert" proved="true">
     <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
      <goal name="insert&#39;vc.55.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.55.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="0.25" steps="61192"/></proof>
       </goal>
       <goal name="insert&#39;vc.55.0.0.0.0.1" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.55.0.0.0.0.1.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.55.0.0.0.0.1.0.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.47" steps="14659"/></proof>
         <transf name="rewrite" proved="true" arg1="union_def">
          <goal name="insert&#39;vc.55.0.0.0.0.1.0.0.0" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.29" steps="10591"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="264"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="269"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="271"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="269"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="270"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="10.88" steps="18342"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="8.42" steps="13781"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.63.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.63.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.78" steps="8546"/></proof>
    </goal>
    <goal name="insert&#39;vc.63.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Assert9">
     <goal name="insert&#39;vc.63.0.1.0" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="47.07" steps="36688"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.63.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.32" steps="2027"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.64.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.64.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.64.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.64.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node (Nil : list reftype)))">
       <goal name="insert&#39;vc.64.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.32" steps="1934"/></proof>
       </goal>
       <goal name="insert&#39;vc.64.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="3.17" steps="9932"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.74" steps="6573"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="13.58" steps="22400"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="13.56" steps="22400"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="13.56" steps="22400"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.64.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.41" steps="12059"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.89" steps="10344"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.04" steps="12729"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="4.75" steps="12712"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.5" expl="VC for insert">
    <proof prover="2"><result status="valid" time="26.67"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.65" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="160"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.66.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.49" steps="16914"/></proof>
   <proof prover="6"><result status="valid" time="4.98" steps="457870"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.67" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="503"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="164"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1263"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="166"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="519"/></proof>
  </goal>
  <goal name="insert&#39;vc.72" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="168"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="168"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="3019"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="173"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="173"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="240"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="234"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="671"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="270"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="774"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="2676"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2449"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.56" steps="32527"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="276"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="270"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="723"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.79" steps="13972"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="551"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="555"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="559"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="48.84" steps="22297"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="48.73" steps="22302"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="17.19" steps="25624"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="63.59" steps="22714"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.48" steps="24151"/></proof>
  <proof prover="6" timelimit="80"><result status="valid" time="3.02" steps="258911"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="61.68" steps="22847"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="21.08" steps="25642"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="605"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="90046"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="61.74" steps="24443"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="613"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="90232"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.102.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.102.0.0" expl="postcondition" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def, img_rep_ax" arg2="in" arg3="H">
     <goal name="insert&#39;vc.102.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.102.0.0.0.0" expl="postcondition" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="insert&#39;vc.102.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="308"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.102.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="20.22" steps="27210"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.75" steps="6645"/></proof>
  <proof prover="5"><result status="valid" time="14.17" steps="774102"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="310"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="72752"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="312"/></proof>
  <proof prover="5"><result status="valid" time="0.46" steps="94154"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="308"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61025"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="309"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="61057"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="4.22" steps="386179"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.109.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="insert&#39;vc.109.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.109.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="901"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.109.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="888"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.110" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.110.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.110.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="9.43" steps="14567"/></proof>
    </goal>
    <goal name="insert&#39;vc.110.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures26">
     <goal name="insert&#39;vc.110.0.1.0" expl="VC for insert" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="insert&#39;vc.110.0.1.0.0" expl="VC for insert" proved="true">
      <proof prover="5"><result status="valid" time="8.13" steps="616677"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.110.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="2628"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.111" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.111.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.111.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.111.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.111.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="insert&#39;vc.111.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.53" steps="2514"/></proof>
       </goal>
       <goal name="insert&#39;vc.111.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="6.43" steps="14244"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="5"><result status="valid" time="2.08" steps="201048"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="1.04"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.91"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.90"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.111.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="36.65" steps="48928"/></proof>
    <proof prover="5"><result status="valid" time="3.44" steps="333031"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="12.88" steps="18250"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="27.58" steps="25902"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="25.67" steps="25861"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.5" expl="VC for insert">
    <transf name="unfold" arg1="nodeP">
     <goal name="insert&#39;vc.111.0.5.0" expl="VC for insert">
     <transf name="introduce_premises" >
      <goal name="insert&#39;vc.111.0.5.0.0" expl="VC for insert">
      <transf name="case" arg1="(p = self)">
       <goal name="insert&#39;vc.111.0.5.0.0.0" expl="true case">
       <proof prover="2"><result status="valid" time="27.78"/></proof>
       </goal>
       <goal name="insert&#39;vc.111.0.5.0.0.1" expl="false case">
       <proof prover="2"><result status="valid" time="48.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="array size" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="130"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="74616"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="160"/></proof>
  <proof prover="5"><result status="valid" time="0.29" steps="76582"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.59" steps="14623"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.89"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="7065"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="172"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="current := handle.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.27" steps="6442"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.20" steps="315"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="319"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="323"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="75111"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.24.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.24.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.24.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.24.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
       <goal name="combineAux&#39;vc.24.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.37" steps="4460"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.38" steps="1644"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.80" steps="7997"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.79" steps="7999"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.80" steps="7999"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.24.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="1338"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="1235"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1745"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1729"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.5" expl="VC for combineAux">
    <proof prover="0"><result status="valid" time="6.32" steps="18362"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.25.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.25.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="4413"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.25.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="39.72" steps="4127336"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.25.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1410"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="loop invariant init" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.26.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.26.0.0" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.26.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="455"/></proof>
     <proof prover="5"><result status="valid" time="0.55" steps="106603"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.26.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="1518"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.2" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.3" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.4" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="207"/></proof>
  <proof prover="5"><result status="valid" time="0.36" steps="89094"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="5698"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="2.54"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="277"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="tmp := current.prev" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="306"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="2735"/></proof>
  <proof prover="5"><result status="valid" time="4.92" steps="632198"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.38" steps="36487"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.41.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.80" steps="2485"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="308"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="308"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.92" steps="2483"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.41.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="5.05" steps="17359"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.41.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.82" steps="6516"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="4.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.06" steps="8095"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="69.70" steps="25769"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.47.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.92" steps="3920"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.47.0.0" expl="wr {self}`rep`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.96" steps="3920"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="552"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="556"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.50.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.50.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.50.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.50.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s2 s2.heap.rep[p] (Cons Node (Nil : list reftype)))">
       <goal name="combineAux&#39;vc.50.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="1878"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.50.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.40" steps="5238"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.90" steps="3062"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="64.12" steps="64066"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.83" steps="11580"/></proof>
      <proof prover="2"><result status="valid" time="1.44"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.86" steps="11580"/></proof>
      <proof prover="2"><result status="valid" time="1.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.50.0.1" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="130678"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.72" steps="129789"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.3" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.77" steps="133808"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.4" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.76" steps="131736"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.5" expl="VC for combineAux">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="90.41" steps="41864"/></proof>
    <transf name="assert" arg1="(nodeP s2 s2.heap.rep[p])">
     <goal name="combineAux&#39;vc.50.0.5.0" expl="asserted formula">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="1853"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.50.0.5.1" expl="VC for combineAux">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="43.00" steps="32532"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.51.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.51.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="4824"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.51.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="330"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="25.63" steps="1901086"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="2032"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.52.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.52.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="771"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="332"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.61" steps="14514"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1829"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1829"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="1865"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.51" steps="11299"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="3.19" steps="9233"/></proof>
  <proof prover="5"><result status="valid" time="5.86" steps="601270"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="9.25" steps="21822"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="280"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="current := current.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1413"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="type invariant" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.63.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.63.0.0" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.64" steps="2457"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.1" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="282"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.2" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="282"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.3" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.71" steps="2434"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.4" expl="type invariant" proved="true">
    <transf name="case" proved="true" arg1="(p = trees)">
     <goal name="combineAux&#39;vc.63.0.4.0" expl="true case (type invariant)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.58" steps="8422"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.63.0.4.1" expl="false case (type invariant)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.75" steps="6302"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="4.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="5.58" steps="7087"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.01" steps="3009"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.72.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.72.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.72.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.72.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 s1.heap.rep[p] (Cons Node Nil))">
       <goal name="combineAux&#39;vc.72.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.36" steps="1742"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.72.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.37" steps="5151"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.82" steps="3143"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.30" steps="11086"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.26" steps="11077"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.26" steps="11077"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.72.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2585"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1722"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3277"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.82" steps="3572"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.5" expl="VC for combineAux">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="85.11" steps="39228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.73.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.73.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.17" steps="4686"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.73.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.73.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.14" steps="303"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.73.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="13.40" steps="1090234"/></proof>
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.73.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.73.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.89" steps="8784"/></proof>
       <proof prover="4" timelimit="100"><result status="valid" time="0.67" steps="1502430"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.73.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1896"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="2.97"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.61" steps="12390"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.57" steps="8143"/></proof>
  <proof prover="5"><result status="valid" time="4.32" steps="492718"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="6.61" steps="14889"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.86.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.48" steps="2085"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="270"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="270"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.49" steps="2090"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.86.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.39" steps="5766"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.86.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="4719"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="3.48"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.88" steps="5415"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.67" steps="2170"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="497"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="501"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.97.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.97.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.97.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.97.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="20.94" steps="34194"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.67" steps="2451"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.60" steps="6324"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.60" steps="6324"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.57" steps="6324"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.97.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="2233"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="1536"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.68" steps="3080"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.62" steps="3104"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.5" expl="VC for combineAux">
    <proof prover="0"><result status="valid" time="16.44" steps="34574"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.98" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.98.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.98.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.80" steps="3537"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.98.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="LoopInvariant7">
     <goal name="combineAux&#39;vc.98.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="14.19" steps="28943"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.98.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1708"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.36" steps="4739"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.31" steps="4905"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="5187"/></proof>
  <proof prover="5"><result status="valid" time="2.95" steps="352246"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="341"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="342"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="844"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="852"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.113" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.44" steps="860"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.124.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="28.66" steps="54809"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.124.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="11.62" steps="25994"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="4281"/></proof>
  <proof prover="2"><result status="valid" time="10.27"/></proof>
  <proof prover="5"><result status="valid" time="0.69" steps="111177"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.68"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="wr {trees}`slots" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.129.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.77" steps="6048"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="4.15" steps="5393"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.46"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
   <goal name="combineAux&#39;vc.135.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="combineAux&#39;vc.135.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.135.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="rewrite" proved="true" arg1="repClosed_DEF">
      <goal name="combineAux&#39;vc.135.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.135.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="59.27" steps="38637"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.89" steps="3597"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.10" steps="5962"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.11" steps="5962"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.11" steps="5962"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="3418"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.68" steps="2915"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.3" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="3432"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.4" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.98" steps="3426"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.5" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="14.63" steps="1916175"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.136" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
   <goal name="combineAux&#39;vc.136.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="combineAux&#39;vc.136.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.136.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.54" steps="97732"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.136.0.0.1" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.136.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.23" steps="449"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.136.0.0.1.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.136.0.0.1.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="31.46" steps="27412"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.136.0.0.1.1.0.0" expl="VC for combineAux" proved="true">
        <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
         <goal name="combineAux&#39;vc.136.0.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.69" steps="5383"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.136.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.35" steps="96432"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="9.48" steps="17121"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="7.64" steps="19364"/></proof>
  <proof prover="5"><result status="valid" time="11.17" steps="1315756"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="22.22" steps="47900"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="851"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="859"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="867"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.159" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.163.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="24.20" steps="48645"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.163.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="11.79" steps="26001"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="10.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="wr {trees}`slots" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.168.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.84" steps="6055"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="4.11" steps="5401"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="4.14" steps="5410"/></proof>
  <proof prover="2"><result status="valid" time="1.24"/></proof>
  <proof prover="5"><result status="valid" time="0.88" steps="162214"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.172.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.172.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.172.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.172.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures10">
       <goal name="combineAux&#39;vc.172.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="54.96" steps="38656"/></proof>
       <proof prover="6"><result status="valid" time="47.89" steps="3129129"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.56" steps="5537"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.95" steps="31336"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="33.01" steps="31339"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.82" steps="31339"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.172.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.43" steps="5135"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.79" steps="2937"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.36" steps="8994"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.83" steps="10227"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.5" expl="VC for combineAux">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.172.0.5.0" expl="asserted formula">
     <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.92" steps="3625"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.172.0.5.1" expl="VC for combineAux">
     <transf name="unfold" arg1="nodeP">
      <goal name="combineAux&#39;vc.172.0.5.1.0" expl="VC for combineAux">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.24" steps="11566"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.173.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.173.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.40" steps="9786"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures11">
     <goal name="combineAux&#39;vc.173.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.173.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.25" steps="451"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.173.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.173.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="32.29" steps="27416"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.173.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="32.21" steps="27416"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.173.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="3162"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.174" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="10.72" steps="17126"/></proof>
  <proof prover="5"><result status="valid" time="10.32" steps="1111875"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="8.16" steps="19372"/></proof>
  <proof prover="5"><result status="valid" time="10.76" steps="1313767"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="25.69" steps="47908"/></proof>
  <proof prover="5"><result status="valid" time="9.55" steps="1191864"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.53" steps="489"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.52" steps="495"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.52"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.183" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="499"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="1223"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="1231"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.200.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="6.62" steps="7063"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.57" steps="569"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.59" steps="569"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="7.88" steps="7063"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.200.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="51.31" steps="7465825"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.200.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="27.21" steps="31279"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="23.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.86"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.205.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.08" steps="10722"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="9.50" steps="8541"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="2.28"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="2.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.209.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.209.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.209.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.209.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.209.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.83" steps="4929"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.209.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.39" steps="17681"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="2.98" steps="287769"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.84"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.83"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.209.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.61" steps="7329"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.68" steps="4164"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="6.76" steps="18254"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.01" steps="10715"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.5" expl="VC for combineAux">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.209.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="1.78" steps="5178"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.209.0.5.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="3.06" steps="326777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.210.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.210.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="11.09" steps="16675"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.210.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.210.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.210.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.48" steps="596"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.210.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.210.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.210.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="5" timelimit="30" memlimit="12000"><result status="valid" time="1.04" steps="159735"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.210.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.70" steps="4430"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="612"/></proof>
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  <proof prover="5"><result status="valid" time="0.23" steps="64794"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="33.73" steps="52921"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="24.30" steps="2703133"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="91.29" steps="100195"/></proof>
  <proof prover="6"><result status="valid" time="23.03" steps="2519170"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.54" steps="489"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="1205"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.221.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.34" steps="11373"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="wr {}`slots" proved="true">
  <proof prover="2"><result status="valid" time="30.09"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.226.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.226.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.02" steps="6055"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.23" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.22" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="404"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="403"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.248.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.248.0.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.248.0.0.0" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="397"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="978"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="986"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.254" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.255" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.256" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.257" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.258" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.259" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.260" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.261" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.262" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.263" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.264" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.264.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="36.20" steps="52172"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.264.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="18.63" steps="34720"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.265" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="12.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.266" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.267" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.268" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.269" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.269.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.56" steps="6930"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.270" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.02" steps="6893"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.271" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.272" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.273" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.273.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.273.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.273.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.273.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.273.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.22" steps="4095"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.273.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="5.80" steps="11826"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="1.92" steps="213482"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="52.42" steps="34706"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="52.43" steps="34412"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="51.70" steps="34702"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.273.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.83" steps="5622"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="3299"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.88" steps="8888"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.73" steps="8258"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.5" expl="VC for combineAux">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.273.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="1.22" steps="3880"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.273.0.5.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="2.00" steps="233335"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.274" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.274.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.274.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.27" steps="10943"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.274.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.274.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.274.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.31" steps="507"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.274.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.274.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.274.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="5" timelimit="30" memlimit="12000"><result status="valid" time="0.82" steps="135532"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.274.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.22" steps="3550"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.275" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.276" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="20.00" steps="29310"/></proof>
  <proof prover="5"><result status="valid" time="13.58" steps="1358915"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.277" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="15.47" steps="30149"/></proof>
  <proof prover="5"><result status="valid" time="13.15" steps="1549339"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.278" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="12.60" steps="1483893"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.279" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="403"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.280" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="857"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.281" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="406"/></proof>
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.282" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="408"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  <proof prover="5"><result status="valid" time="0.39" steps="86533"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.283" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="886"/></proof>
  <proof prover="2"><result status="valid" time="38.96"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="407"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="61099"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.285" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="11.77" steps="23128"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.286" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="4.69" steps="8953"/></proof>
  <proof prover="2"><result status="valid" time="7.96"/></proof>
  <proof prover="5"><result status="valid" time="0.97" steps="149935"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.287" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63431"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.288" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63435"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.289" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63439"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.290" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.290.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.290.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.290.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.290.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.32" steps="413"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.290.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="3287"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.291" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="413"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="61003"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.292" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="413"/></proof>
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="61007"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.293" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="418"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="94449"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="81"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="47"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="49"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="51"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="55"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="55"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="140"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="127"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="96"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="145"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="451"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="893"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="4416"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="196"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="168"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="198"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="202"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="206"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="210"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="214"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1313"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="222"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="226"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="3137"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="242"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="246"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="2.01" steps="186173"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="344"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="145"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="143"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="150"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.41.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.41.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.94" steps="2429"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.41.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.41.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="140"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.41.0.1.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.41.0.1.1.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.37" steps="6088"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.41.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1002"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.42.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.42.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.42.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.42.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.42.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.20" steps="970"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.42.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0"><result status="valid" time="0.99" steps="2729"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="0.68" steps="1536"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.48" steps="3779"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.51" steps="3779"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.58" steps="3779"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="2943"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.45" steps="4765"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="3729"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="3758"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.5" expl="VC for deleteMin">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.42.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.11" steps="943"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.42.0.5.1" expl="VC for deleteMin">
     <proof prover="0"><result status="valid" time="15.53" steps="15545"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="161"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="791"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.57" steps="2417"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="119"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="321"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="153"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="395"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="872"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1547"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.55" steps="11882"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="159"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="155"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="1022"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="5180"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.00" steps="3096"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="321"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="325"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.23" steps="3118"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.22" steps="3138"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.78" steps="8869"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.25" steps="3154"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="345"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="349"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.91" steps="8922"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.15" steps="3187"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="361"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="365"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.77.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.98" steps="10169"/></proof>
   <proof prover="4"><result status="valid" time="0.17" steps="510743"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="deleteMin&#39;vc.77.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.51" steps="10169"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="2.52" steps="317138"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="506"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="194"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="192"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="199"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.82.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.82.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.42" steps="6685"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.82.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.82.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="185"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.82.0.1.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.82.0.1.1.0" expl="VC for deleteMin" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="deleteMin&#39;vc.82.0.1.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="35.34" steps="15682"/></proof>
       <proof prover="4"><result status="valid" time="0.67" steps="1352422"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.82.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1807"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.83.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.83.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.83.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.83.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.83.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2056"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.83.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.54" steps="7228"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.59" steps="3498"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="39.38" steps="26575"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.63" steps="26575"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="39.61" steps="26575"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.88" steps="4018"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.01" steps="8778"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.91" steps="11585"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.92" steps="11882"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.5" expl="VC for deleteMin">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.83.0.5.0" expl="asserted formula">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="2047"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.83.0.5.1" expl="VC for deleteMin">
     <transf name="inline_goal" >
      <goal name="deleteMin&#39;vc.83.0.5.1.0" expl="VC for deleteMin">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.11" steps="8005"/></proof>
      <transf name="introduce_premises" >
       <goal name="deleteMin&#39;vc.83.0.5.1.0.0" expl="VC for deleteMin">
       <proof prover="6"><result status="valid" time="1.52" steps="206962"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.05" steps="158051"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="114"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="tmp := self.head" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.09" steps="174021"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="69"/></proof>
  <proof prover="6"><result status="valid" time="0.16" steps="57373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="tmp := handle.sibling" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="175935"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="72"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="pos := handle.prev" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="177538"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="102"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="tmp := handle.prev" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="285711"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="5898"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="118"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="pos := tmp.child" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="2.02" steps="2831968"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="120"/></proof>
  <proof prover="6"><result status="valid" time="0.24" steps="54804"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="209"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.17.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1171"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="154"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.85" steps="3841"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1169"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="154"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.32" steps="11397"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="226"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.17.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="30.14" steps="28477"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1037"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="315"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="380"/></proof>
  <proof prover="6"><result status="valid" time="0.23" steps="67547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="193"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.46" steps="30536"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1643"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="196"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1147"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="198"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.40.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.40.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.25" steps="4366"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.40.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.40.0.1.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.28" steps="68587"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.40.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="9.75" steps="727496"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.40.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="1259"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.41.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.41.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.41.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="20.82" steps="1992308"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2649"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1196"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="3179"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="3207"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.42.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.24" steps="1195"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.42.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.42.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.42.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="6" timelimit="80"><result status="valid" time="1.95" steps="220612"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.42.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.23" steps="1250"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="271"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="1318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="2035"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="17.38" steps="43683"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="270"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="438"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.50.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0"><result status="valid" time="1.89" steps="3413"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="446"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="450"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="454"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.55.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.55.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="4" timelimit="120"><result status="valid" time="0.30" steps="852791"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="10.29" steps="23736"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.57.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.57.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.51" steps="37016"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.58.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="1979"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="478"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="482"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.62.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.62.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="2.01" steps="5112"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="305"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.64.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.64.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="105124"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.64.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.64.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.14" steps="293"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.64.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="16.88" steps="997897"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.64.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="1.03" steps="147509"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.65.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.65.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.65.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="17.48" steps="893533"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="3901"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="5094"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.02" steps="5102"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.06" steps="5165"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.66.0.5.0" expl="asserted formula">
     <proof prover="5"><result status="valid" time="1.04" steps="143604"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.66.0.5.1" expl="VC for decreaseKey">
     <proof prover="5"><result status="valid" time="1.59" steps="178036"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="pos := handle.sibling" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="185019"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.56" steps="6010"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="168158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="17.31" steps="42037"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1256"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1101"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="196677"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.28" steps="2113"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="185"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55635"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="pos := self.head" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="208601"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="249369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="396"/></proof>
  <proof prover="6"><result status="valid" time="0.24" steps="68175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="184715"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="433"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.93" steps="31885"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1725"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="222634"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="184977"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.04" steps="1465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.07" steps="216842"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="677"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.16" steps="185293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.04" steps="1485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.07" steps="176671"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="226586"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.95.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.95.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="4917"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.95.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.95.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="10.69" steps="1149606"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.95.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1302"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.96.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.96.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.96.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.96.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="5"><result status="valid" time="17.45" steps="2188534"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.96.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.89" steps="3552"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.96.0.0.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.96" steps="267657"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.96.0.0.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.95" steps="269655"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.96.0.0.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.53" steps="211402"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.64" steps="116916"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.97" steps="137878"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.67" steps="119425"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.63" steps="117122"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.97.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.23" steps="1238"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.97.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.97.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.97.0.5.1.0.0" expl="VC for decreaseKey">
       <transf name="unfold" arg1="nodeP" arg2="in" arg3="h">
        <goal name="decreaseKey&#39;vc.97.0.5.1.0.0.0" expl="VC for decreaseKey">
        <transf name="instantiate" arg1="h" arg2="n">
         <goal name="decreaseKey&#39;vc.97.0.5.1.0.0.0.0" expl="VC for decreaseKey">
         <proof prover="0"><result status="valid" time="1.60" steps="4387"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.97.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.23" steps="1279"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="195421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="631"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="2131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2099"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="51.67" steps="73428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="244265"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="449"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.77" steps="4372"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.97" steps="4410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="38.59" steps="40256"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.112.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.112.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.17" steps="6243"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.113.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.113.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.10" steps="5770"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="489"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="493"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="497"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.117.0" expl="VC for decreaseKey" proved="true">
   <proof prover="6"><result status="valid" time="1.14" steps="140994"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.119.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.119.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="2.18" steps="7725"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.119.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.119.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="297"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.119.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="16.78" steps="1072118"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.119.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="1951"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.120.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.120.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.120.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="16.81" steps="931980"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.91" steps="4522"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="5812"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.16" steps="5807"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="5872"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.121.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.42" steps="1842"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.121.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.121.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.121.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.42" steps="1916"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.121.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.42" steps="1917"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="138"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="54916"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="230"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="894"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="294"/></proof>
  <proof prover="6"><result status="valid" time="0.26" steps="66606"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.91" steps="13028"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="1052"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="1317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="789"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="326"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.139.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.139.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.44" steps="81999"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.139.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.06" steps="157"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.139.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="6.01" steps="514870"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.60" steps="103556"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.140.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.140.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.140.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="7.84" steps="667152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.56" steps="99273"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.62" steps="103534"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.55" steps="100946"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.55" steps="99188"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.141.0.5.0" expl="asserted formula">
     <proof prover="5"><result status="valid" time="0.53" steps="100778"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.141.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.141.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.141.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="6" timelimit="80"><result status="valid" time="1.36" steps="195638"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.141.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.17" steps="993"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="227"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="528"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1021"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1723"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.75" steps="28442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="233"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="postcondition" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="544"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="377"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.149.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0"><result status="valid" time="1.28" steps="2710"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="393"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="2743"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="3.88" steps="9825"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="19.32" steps="9995"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="9.85" steps="10009"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="417"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.161.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="10.18" steps="10887"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="261"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.163.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.163.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.65" steps="96301"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.163.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="251"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.163.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="9.51" steps="665055"/></proof>
     </goal>
    </transf>
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.163.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="97.67" steps="6753575"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.84" steps="128867"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.164.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.164.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.164.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="14.22" steps="803892"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="123589"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.69" steps="3725"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="2.10" steps="210086"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="5.32" steps="555304"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.70" steps="4137"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.5" expl="VC for decreaseKey">
    <proof prover="2"><result status="valid" time="19.90"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="72"/></proof>
  <proof prover="6"><result status="valid" time="0.17" steps="54245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="913"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="90"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="244"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="7626"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="1012"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="150"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55238"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="268"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1301"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="382"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.25" steps="26467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1567"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1087"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.197.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.197.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="4204"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.197.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.197.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="5.60" steps="489152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.197.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2"><result status="valid" time="0.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.198.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.198.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.198.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="9.67" steps="708991"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="2541"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1136"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="3060"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="3080"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.199.0.5.0" expl="asserted formula">
     <proof prover="5"><result status="valid" time="0.52" steps="108653"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.199.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.199.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.199.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="6" timelimit="80"><result status="valid" time="1.94" steps="239786"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.199.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.21" steps="1189"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="240"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="580"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1957"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="35.60" steps="73498"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="414"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="80.86" steps="21414"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="11.19" steps="26846"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.215.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.215.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.41" steps="1910"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="446"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="450"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.219.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="71.84" steps="33394"/></proof>
   <proof prover="6" timelimit="80"><result status="valid" time="1.83" steps="146372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.221.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.221.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="2.03" steps="6755"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.221.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.221.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="262"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.221.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="13.64" steps="839658"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.221.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="1837"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.222.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.222.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.222.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="15.87" steps="873442"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="3782"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="4953"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="4966"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.88" steps="5016"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.223.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.26" steps="1728"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.223.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.223.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.223.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="5"><result status="valid" time="0.91" steps="142668"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.223.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="5"><result status="valid" time="0.78" steps="142689"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="90"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="1031"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.08" steps="10162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1024"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1699"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="344"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="166"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="390"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.27" steps="26146"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1598"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1112"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.252.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.252.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="4266"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.252.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.252.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="7.51" steps="631270"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.252.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="1201"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.253.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.253.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.253.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="10.09" steps="797025"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="2554"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1146"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="3072"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="3092"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.254.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.12" steps="1145"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.254.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.254.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.254.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="6" timelimit="80"><result status="valid" time="2.08" steps="254627"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.254.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="0"><result status="valid" time="0.21" steps="1177"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="244"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="588"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1989"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="32.00" steps="75681"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="250"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.71" steps="3360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="430"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="3398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="10.21" steps="23521"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.72" steps="3409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.270.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="4575"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="450"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="454"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.274.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="20.90" steps="27085"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="278"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.276.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.276.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.81" steps="6832"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.276.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.276.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="0.25" steps="60823"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.276.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="14.13" steps="876908"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.276.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1837"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.277.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.277.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.277.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="16.36" steps="915461"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.74" steps="3803"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.92" steps="4624"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="4990"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.93" steps="5047"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.278.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.37" steps="1732"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.278.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.278.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.278.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="5"><result status="valid" time="0.84" steps="145841"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.278.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="5"><result status="valid" time="1.02" steps="145841"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="108"/></proof>
  <proof prover="6"><result status="valid" time="0.16" steps="54612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="188"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="834"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="119"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="295"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.77" steps="8143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="991"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="737"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.296.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.296.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="3367"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.296.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.296.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.05" steps="127"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.296.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="4.62" steps="435804"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.296.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.51" steps="98676"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.297.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.297.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.297.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="6.28" steps="513120"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.26" steps="1674"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="896"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2127"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2127"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.298.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.08" steps="898"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.298.0.5.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.298.0.5.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.298.0.5.1.0.0" expl="VC for decreaseKey">
       <proof prover="6" timelimit="80"><result status="valid" time="1.35" steps="206189"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.298.0.5.1.0.1" expl="VC for decreaseKey">
       <proof prover="5"><result status="valid" time="0.57" steps="103101"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="493"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="969"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1657"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.36" steps="25266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="216403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="2375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="217218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="355"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="218408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="439797"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.90" steps="8553"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="2422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="8.97" steps="8720"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="383"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="220928"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="221346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.318.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.318.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.318.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.318.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.09" steps="225"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.318.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="1.19" steps="3105"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="231"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.320.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.320.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.64" steps="5529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.320.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.320.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="221"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.320.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="8.99" steps="610725"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.320.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1564"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.321.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.321.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.321.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="26.21" steps="2085705"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.56" steps="2944"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.72" steps="3616"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.57" steps="3988"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.65" steps="4023"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.322.0.5.0" expl="asserted formula">
     <proof prover="5"><result status="valid" time="0.71" steps="119405"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.322.0.5.1" expl="VC for decreaseKey">
     <proof prover="5"><result status="valid" time="1.04" steps="137506"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="3099"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="758"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="758"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="732"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="132"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="144"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="148"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.342.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="0.64" steps="2560"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="101"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="17.05" steps="46491"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.345.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.345.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.345.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="7.40" steps="747374"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.345.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="764"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.345.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="672"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.345.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="1062"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.345.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.12" steps="1062"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.5" expl="VC for decreaseKey">
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.346.0.5.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.14" steps="670"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.346.0.5.1" expl="VC for decreaseKey">
     <proof prover="0"><result status="valid" time="1.57" steps="7292"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion">
  <proof prover="7" timelimit="60"><result status="timeout" time="60.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueL" proved="true">
 <transf name="unfold" proved="true" arg1="pqueueI">
  <goal name="boundary_frames_invariant_PqueueL.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueL.0.0" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="boundary_frames_invariant_PqueueL.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="repClosed_DEF">
      <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="23.73" steps="48233"/></proof>
       <proof prover="5"><result status="valid" time="14.80" steps="1301294"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.85" steps="3933"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="44.88" steps="119663"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="73.26" steps="201397"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="68.34" steps="195918"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.1" proved="true">
     <proof prover="5"><result status="valid" time="1.45" steps="192233"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.2" proved="true">
     <proof prover="5"><result status="valid" time="1.73" steps="193706"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.3" proved="true">
     <proof prover="5"><result status="valid" time="1.56" steps="196129"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.4" proved="true">
     <proof prover="5"><result status="valid" time="1.55" steps="194280"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.5">
     <transf name="inline_goal" >
      <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0">
      <transf name="split_vc" >
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0.0">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.20" steps="39528"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0.1">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.63" steps="38312"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PqueueR" proved="true">
 <goal name="repOk_EMPTY" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="409"/></proof>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="4721"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.26" steps="20081"/></proof>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="259"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="249"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="274"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="696"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.17" steps="47518"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="2840"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.25" steps="26143"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="2542"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="278"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="984"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="454"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="458"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="2080"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({} union {self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2264"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({} union {self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2276"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="2314"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({} union {self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.83" steps="2291"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="2293"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="wr ({} union {self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="4578"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="502"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="506"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="wr ({} union {self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="4777"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="514"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.26" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="init_Pqueue&#39;vc.26.0" expl="VC for init_Pqueue" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="init_Pqueue&#39;vc.26.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="init_Pqueue&#39;vc.26.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="init_Pqueue&#39;vc.26.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="0.38" steps="620"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="3.45" steps="9388"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="2466"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="637"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0" memlimit="16000"><result status="valid" time="1.27" steps="2998"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.30" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.30.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.30.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Pqueue&#39;vc.30.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="init_Pqueue&#39;vc.30.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.70" steps="9873"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.1" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="init_Pqueue&#39;vc.30.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="302"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.30.0.1.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="53.55" steps="6452127"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="15.56" steps="27697"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.31" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.31.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.31.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="12.08" steps="21886"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="14.48" steps="25475"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="14.43" steps="23726"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.3" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="init_Pqueue&#39;vc.31.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.96" steps="6048"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.3.1" expl="VC for init_Pqueue" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="init_Pqueue&#39;vc.31.0.3.1.0" expl="VC for init_Pqueue" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.0" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="4.21" steps="9593"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.1" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="2.19" steps="6688"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.2" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="2.13" steps="6769"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3" expl="VC for init_Pqueue" proved="true">
       <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0" expl="VC for init_Pqueue" proved="true">
        <transf name="assert" proved="true" arg1="(mem1 s3.heap.child[n] s3.heap.rep[pq] \/ s3.heap.child[n] = s3.heap.sntl[pq])">
         <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="7.81" steps="27813"/></proof>
         </goal>
         <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0.1" expl="VC for init_Pqueue" proved="true">
         <proof prover="0"><result status="valid" time="7.64" steps="29296"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.4" expl="VC for init_Pqueue" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.59" steps="29980"/></proof>
       <transf name="case" proved="true" arg1="(pq = self)">
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.4.0" expl="true case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.26" steps="2351"/></proof>
        </goal>
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.4.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="120.36" steps="119618"/></proof>
        <transf name="subst_all" proved="true" >
         <goal name="init_Pqueue&#39;vc.31.0.3.1.0.4.1.0" expl="false case" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="73.30" steps="51824"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5" expl="VC for init_Pqueue" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.56" steps="30497"/></proof>
       <transf name="case" proved="true" arg1="(pq = self)">
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5.0" expl="true case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.23" steps="2351"/></proof>
        </goal>
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="91.09" steps="74721"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="47.73" steps="50912"/></proof>
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="init_Pqueue&#39;vc.31.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="312"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.4.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="48.57" steps="58031"/></proof>
     <proof prover="6" timelimit="120"><result status="valid" time="38.48" steps="4485784"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.5" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="15.42" steps="25856"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.6" expl="VC for init_Pqueue" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="30.17" steps="4020369"/></proof>
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="init_Pqueue&#39;vc.31.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="310"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.6.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures">
      <goal name="init_Pqueue&#39;vc.31.0.6.1.0" expl="false case" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.68" steps="14081"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.7" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.63" steps="14048"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.8" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.53" steps="13670"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.9" expl="VC for init_Pqueue" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="init_Pqueue&#39;vc.31.0.9.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.03" steps="14240"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.9.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="15.80" steps="29254"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.10" expl="VC for init_Pqueue" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="74.78" steps="51156"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.11" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="init_Pqueue&#39;vc.31.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="12.58" steps="21461"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.11.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="0"><result status="valid" time="11.21" steps="30297"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="369"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="542"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="275"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="97"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="102"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="198"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="993"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="113"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="51"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="fkey := first.key" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="123"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="skey := second.key" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="133"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="168"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.07" steps="145"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="170"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="tmp := first.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="143"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="1523"/></proof>
  </goal>
  <goal name="link&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="94"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="223"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.80" steps="11880"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="839"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1074"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="100"/></proof>
  </goal>
  <goal name="link&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.28" steps="1470"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="128"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="124"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="tmp := second.child" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="254"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="160"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="335"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.53" steps="52776"/></proof>
  </goal>
  <goal name="link&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1159"/></proof>
  </goal>
  <goal name="link&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1504"/></proof>
  </goal>
  <goal name="link&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="166"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.67" steps="3651"/></proof>
  </goal>
  <goal name="link&#39;vc.36" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.89" steps="4539"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="166"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="327"/></proof>
  </goal>
  <goal name="link&#39;vc.39" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="8044"/></proof>
  </goal>
  <goal name="link&#39;vc.40" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="4829"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="5.72" steps="16585"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="200"/></proof>
  </goal>
  <goal name="link&#39;vc.43" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="208"/></proof>
  </goal>
  <goal name="link&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="210"/></proof>
  </goal>
  <goal name="link&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="432"/></proof>
  </goal>
  <goal name="link&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="20.44" steps="70941"/></proof>
  </goal>
  <goal name="link&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1471"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1839"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="216"/></proof>
  </goal>
  <goal name="link&#39;vc.50" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="59.45" steps="173032"/></proof>
  </goal>
  <goal name="link&#39;vc.51" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.74" steps="3110"/></proof>
  </goal>
  <goal name="link&#39;vc.52" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.02" steps="5175"/></proof>
  </goal>
  <goal name="link&#39;vc.53" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="213"/></proof>
  </goal>
  <goal name="link&#39;vc.54" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="246"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="250"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="508"/></proof>
  </goal>
  <goal name="link&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.83" steps="69091"/></proof>
  </goal>
  <goal name="link&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.44" steps="1751"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="2540"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="256"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(repOk s2 self)">
   <goal name="link&#39;vc.61.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="22.30" steps="78960"/></proof>
   </goal>
   <goal name="link&#39;vc.61.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="repOk">
    <goal name="link&#39;vc.61.1.0" expl="VC for link" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="link&#39;vc.61.1.0.0" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.92" steps="3769"/></proof>
     </goal>
     <goal name="link&#39;vc.61.1.0.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.34" steps="486"/></proof>
     </goal>
     <goal name="link&#39;vc.61.1.0.2" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.35" steps="1077"/></proof>
     </goal>
     <goal name="link&#39;vc.61.1.0.3" expl="VC for link" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="54.03" steps="171030"/></proof>
     <proof prover="7" timelimit="60" obsolete="true"><result status="timeout" time="60.00"/></proof>
     </goal>
     <goal name="link&#39;vc.61.1.0.4" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="1.10" steps="4702"/></proof>
     </goal>
     <goal name="link&#39;vc.61.1.0.5" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="1.09" steps="4682"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.62" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.88" steps="3871"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.35" steps="5951"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="253"/></proof>
  </goal>
  <goal name="link&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="473"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="2.44" steps="9143"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="8.26" steps="21186"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.88" steps="10866"/></proof>
  </goal>
  <goal name="link&#39;vc.69" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="link&#39;vc.69.0" expl="VC for link" proved="true">
   <proof prover="0"><result status="valid" time="6.72" steps="17840"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.70.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.70.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.91" steps="4142"/></proof>
    </goal>
    <goal name="link&#39;vc.70.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="41.18" steps="112748"/></proof>
    </goal>
    <goal name="link&#39;vc.70.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.40" steps="1715"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.71" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.71.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.71.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2798"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.68" steps="3194"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.36" steps="1591"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="66.54" steps="216198"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.58" steps="3100"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="3491"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="2779"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="4214"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="4214"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.34" steps="5786"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.27" steps="5009"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.11" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="265"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="276"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="268"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="268"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="166"/></proof>
  </goal>
  <goal name="link&#39;vc.76" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="198"/></proof>
  </goal>
  <goal name="link&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="202"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="416"/></proof>
  </goal>
  <goal name="link&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.65" steps="16372"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1415"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.46" steps="1771"/></proof>
  </goal>
  <goal name="link&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="208"/></proof>
  </goal>
  <goal name="link&#39;vc.83" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="12.08" steps="41402"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.69" steps="2714"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.77" steps="4341"/></proof>
  </goal>
  <goal name="link&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="206"/></proof>
  </goal>
  <goal name="link&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="386"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="7254"/></proof>
  </goal>
  <goal name="link&#39;vc.89" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.58" steps="7529"/></proof>
  <transf name="inline_goal" >
   <goal name="link&#39;vc.89.0" expl="wr {self}`rep`prev">
   <transf name="introduce_premises" >
    <goal name="link&#39;vc.89.0.0" expl="wr {self}`rep`prev">
    <transf name="assert" arg1="(p &lt;&gt; tmp)">
     <goal name="link&#39;vc.89.0.0.0" expl="asserted formula">
     <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="timeout" time="80.00"/></proof>
     </goal>
     <goal name="link&#39;vc.89.0.0.1" expl="wr {self}`rep`prev" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.26" steps="514"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.90" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.82" steps="7916"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="491183"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.92.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.92.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.77" steps="3347"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.1" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="link&#39;vc.92.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.18" steps="211"/></proof>
     </goal>
     <goal name="link&#39;vc.92.0.1.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="8.02" steps="19506"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.92.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1413"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.93" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.93.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.93.0.0" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="223656"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.1" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.16" steps="230546"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1310"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.3" expl="VC for link" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="link&#39;vc.93.0.3.0" expl="VC for link" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="link&#39;vc.93.0.3.0.0" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="2.95" steps="9581"/></proof>
      </goal>
      <goal name="link&#39;vc.93.0.3.0.1" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.29" steps="1332"/></proof>
      </goal>
      <goal name="link&#39;vc.93.0.3.0.2" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.45" steps="1637"/></proof>
      </goal>
      <goal name="link&#39;vc.93.0.3.0.3" expl="VC for link" proved="true">
      <proof prover="5"><result status="valid" time="2.39" steps="192491"/></proof>
      </goal>
      <goal name="link&#39;vc.93.0.3.0.4" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="2.48" steps="10670"/></proof>
      </goal>
      <goal name="link&#39;vc.93.0.3.0.5" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="2.57" steps="11973"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.93.0.4" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="223830"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.5" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="231448"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.6" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="223861"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.7" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.08" steps="223889"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.8" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.19" steps="223891"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="4515"/></proof>
    </goal>
    <goal name="link&#39;vc.93.0.10" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.86" steps="3841"/></proof>
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="link&#39;vc.53.0.9.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.78" steps="2991"/></proof>
     </goal>
     <goal name="link&#39;vc.53.0.9.1" expl="VC for link">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="77.67" steps="247234"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.93.0.11" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="219"/></proof>
    <transf name="assert" arg1="(sntlOk s3 s3.heap.sntl[pq])">
     <goal name="link&#39;vc.93.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.47" steps="2369"/></proof>
     </goal>
     <goal name="link&#39;vc.93.0.11.1" expl="VC for link">
     <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="timeout" time="120.00"/></proof>
     <transf name="unfold" arg1="sntlOk">
      <goal name="link&#39;vc.93.0.11.1.0" expl="VC for link">
      <transf name="split_vc" >
       <goal name="link&#39;vc.93.0.11.1.0.0" expl="VC for link" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="471"/></proof>
       </goal>
       <goal name="link&#39;vc.93.0.11.1.0.1" expl="VC for link" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="471"/></proof>
       </goal>
       <goal name="link&#39;vc.93.0.11.1.0.2" expl="VC for link">
       <proof prover="2" timelimit="120" memlimit="16000" obsolete="true"><result status="timeout" time="120.00"/></proof>
       <proof prover="6" timelimit="120" obsolete="true"><result status="timeout" time="120.00" steps="8919171"/></proof>
       </goal>
       <goal name="link&#39;vc.93.0.11.1.0.3" expl="VC for link">
       <proof prover="6" timelimit="120" obsolete="true"><result status="timeout" time="120.00" steps="5096975"/></proof>
       <transf name="subst_all" >
        <goal name="link&#39;vc.93.0.11.1.0.3.0" expl="VC for link">
        <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="failure" time="0.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="link&#39;vc.93.0.11.1.0.4" expl="VC for link">
       <proof prover="6" timelimit="120" obsolete="true"><result status="timeout" time="120.00" steps="9881811"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    <transf name="assert" arg1="(sntl2 = sntl4)">
     <goal name="link&#39;vc.93.0.11.0" expl="asserted formula">
     <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="timeout" time="120.00"/></proof>
     </goal>
     <goal name="link&#39;vc.93.0.11.1" expl="VC for link">
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.94" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="228"/></proof>
  </goal>
  <goal name="link&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="221"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="221"/></proof>
  </goal>
  <goal name="link&#39;vc.97" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="link&#39;vc.98" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="181"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="2037"/></proof>
  </goal>
  <goal name="link&#39;vc.100" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="link&#39;vc.101" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="228"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="150"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="280"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="5132"/></proof>
  </goal>
  <goal name="link&#39;vc.105" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="186"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="334"/></proof>
  </goal>
  <goal name="link&#39;vc.107" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="195"/></proof>
  </goal>
  <goal name="link&#39;vc.108" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="251"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="424"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="40.53" steps="153381"/></proof>
  </goal>
  <goal name="link&#39;vc.111" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1221"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1473"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="257"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.114.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.114.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.87" steps="4374"/></proof>
    <proof prover="6"><result status="valid" time="1.27" steps="130504"/></proof>
    </goal>
    <goal name="link&#39;vc.114.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="446"/></proof>
    </goal>
    <goal name="link&#39;vc.114.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="903"/></proof>
    </goal>
    <goal name="link&#39;vc.114.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.46" steps="22812"/></proof>
    <proof prover="6"><result status="valid" time="2.38" steps="203129"/></proof>
    </goal>
    <goal name="link&#39;vc.114.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.66" steps="33708"/></proof>
    </goal>
    <goal name="link&#39;vc.114.0.5" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(mem1 s1.heap.prev[n] s1.heap.rep[self] \/ s1.heap.prev[n] = s1.heap.sntl[self])">
     <goal name="link&#39;vc.114.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.54" steps="6983"/></proof>
     </goal>
     <goal name="link&#39;vc.114.0.5.1" expl="assertion" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="60.90" steps="246100"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.115" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="254"/></proof>
  </goal>
  <goal name="link&#39;vc.116" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="443"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="4997"/></proof>
  </goal>
  <goal name="link&#39;vc.118" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.118.0" expl="wr {self}`rep`prev" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.91" steps="17630"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.119" expl="wr {self}`rep`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.119.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.95" steps="13421"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="107.66" steps="384621"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.121.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.121.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3161"/></proof>
    </goal>
    <goal name="link&#39;vc.121.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="5.50" steps="20800"/></proof>
    </goal>
    <goal name="link&#39;vc.121.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="1236"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.122" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.122.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.122.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="2003"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="2046"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1175"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="19.78" steps="84501"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="2385"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.50" steps="2660"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="2171"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="2900"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="2900"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="3901"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="3372"/></proof>
    </goal>
    <goal name="link&#39;vc.122.0.11" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.96" steps="5189"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="275"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="269"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="269"/></proof>
  </goal>
  <goal name="link&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="217"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="388"/></proof>
  </goal>
  <goal name="link&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.73" steps="37899"/></proof>
  </goal>
  <goal name="link&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1134"/></proof>
  </goal>
  <goal name="link&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1384"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="223"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="repOk">
   <goal name="link&#39;vc.132.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.132.0.0" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.32" steps="663855"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.1" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="208590"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.2" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="209251"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.88" steps="22831"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.56" steps="28308"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.5" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 self)">
     <goal name="link&#39;vc.132.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.17" steps="408"/></proof>
     </goal>
     <goal name="link&#39;vc.132.0.5.1" expl="VC for link" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.41" steps="29193"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.133" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="220"/></proof>
  </goal>
  <goal name="link&#39;vc.134" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="394"/></proof>
  </goal>
  <goal name="link&#39;vc.135" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="4184"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="timeout" time="120.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.136.0" expl="wr {self}`rep`prev" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.17" steps="5447"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.137" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="11.04" steps="31098"/></proof>
  </goal>
  <goal name="link&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="14.73" steps="48983"/></proof>
  </goal>
  <goal name="link&#39;vc.139" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.139.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.139.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="2708"/></proof>
    </goal>
    <goal name="link&#39;vc.139.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.49" steps="13420"/></proof>
    </goal>
    <goal name="link&#39;vc.139.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="1149"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.140" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.140.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.140.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1860"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1916"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="1088"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.79" steps="32766"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2060"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="2299"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1696"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="2543"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="2543"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="3488"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.62" steps="2968"/></proof>
    </goal>
    <goal name="link&#39;vc.140.0.11" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.03" steps="5813"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.141" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="241"/></proof>
  </goal>
  <goal name="link&#39;vc.142" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.144" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="118"/></proof>
  </goal>
  <goal name="link&#39;vc.145" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="231"/></proof>
  </goal>
  <goal name="link&#39;vc.146" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="4148"/></proof>
  </goal>
  <goal name="link&#39;vc.147" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="154"/></proof>
  </goal>
  <goal name="link&#39;vc.148" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="285"/></proof>
  </goal>
  <goal name="link&#39;vc.149" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="163"/></proof>
  </goal>
  <goal name="link&#39;vc.150" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="219"/></proof>
  </goal>
  <goal name="link&#39;vc.151" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="387"/></proof>
  </goal>
  <goal name="link&#39;vc.152" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.86" steps="51229"/></proof>
  </goal>
  <goal name="link&#39;vc.153" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1500"/></proof>
  </goal>
  <goal name="link&#39;vc.154" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1378"/></proof>
  </goal>
  <goal name="link&#39;vc.155" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="225"/></proof>
  </goal>
  <goal name="link&#39;vc.156" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.156.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.156.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.74" steps="3971"/></proof>
    </goal>
    <goal name="link&#39;vc.156.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="396"/></proof>
    </goal>
    <goal name="link&#39;vc.156.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="815"/></proof>
    </goal>
    <goal name="link&#39;vc.156.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.91" steps="20226"/></proof>
    </goal>
    <goal name="link&#39;vc.156.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.15" steps="17968"/></proof>
    </goal>
    <goal name="link&#39;vc.156.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.06" steps="27483"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.157" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="222"/></proof>
  </goal>
  <goal name="link&#39;vc.158" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="393"/></proof>
  </goal>
  <goal name="link&#39;vc.159" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="4590"/></proof>
  </goal>
  <goal name="link&#39;vc.160" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.30" steps="38472"/></proof>
  </goal>
  <goal name="link&#39;vc.161" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="failure" time="0.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.161.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.45" steps="11984"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.162" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="107.49" steps="367604"/></proof>
  </goal>
  <goal name="link&#39;vc.163" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.163.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.163.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="2944"/></proof>
    </goal>
    <goal name="link&#39;vc.163.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="5.67" steps="22010"/></proof>
    </goal>
    <goal name="link&#39;vc.163.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.18" steps="1147"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.164" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.164.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.164.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2062"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2125"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="1086"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="21.48" steps="85085"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2112"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="2537"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1883"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="2582"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="2582"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="3738"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.67" steps="3230"/></proof>
    </goal>
    <goal name="link&#39;vc.164.0.11" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.12" steps="6196"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.165" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="243"/></proof>
  </goal>
  <goal name="link&#39;vc.166" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="237"/></proof>
  </goal>
  <goal name="link&#39;vc.167" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="237"/></proof>
  </goal>
  <goal name="link&#39;vc.168" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="185"/></proof>
  </goal>
  <goal name="link&#39;vc.169" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="341"/></proof>
  </goal>
  <goal name="link&#39;vc.170" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.96" steps="26876"/></proof>
  </goal>
  <goal name="link&#39;vc.171" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1208"/></proof>
  </goal>
  <goal name="link&#39;vc.172" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1261"/></proof>
  </goal>
  <goal name="link&#39;vc.173" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="191"/></proof>
  </goal>
  <goal name="link&#39;vc.174" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.174.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.174.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.57" steps="2945"/></proof>
    </goal>
    <goal name="link&#39;vc.174.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="340"/></proof>
    </goal>
    <goal name="link&#39;vc.174.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="724"/></proof>
    </goal>
    <goal name="link&#39;vc.174.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.35" steps="17375"/></proof>
    <proof prover="6" timelimit="120"><result status="valid" time="1.73" steps="159980"/></proof>
    </goal>
    <goal name="link&#39;vc.174.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.17" steps="15026"/></proof>
    </goal>
    <goal name="link&#39;vc.174.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.37" steps="13876"/></proof>
    <proof prover="6" timelimit="120"><result status="valid" time="1.85" steps="159969"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.175" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="188"/></proof>
  </goal>
  <goal name="link&#39;vc.176" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="337"/></proof>
  </goal>
  <goal name="link&#39;vc.177" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="3805"/></proof>
  </goal>
  <goal name="link&#39;vc.178" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1543"/></proof>
  </goal>
  <goal name="link&#39;vc.179" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="17.71" steps="47271"/></proof>
  </goal>
  <goal name="link&#39;vc.180" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="52.85" steps="193898"/></proof>
  </goal>
  <goal name="link&#39;vc.181" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.181.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.181.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="2501"/></proof>
    </goal>
    <goal name="link&#39;vc.181.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.87" steps="10854"/></proof>
    </goal>
    <goal name="link&#39;vc.181.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="1054"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.182" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.182.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.182.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1750"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="1805"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="993"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.97" steps="39302"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1941"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="2174"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1749"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2400"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2400"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="3320"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.56" steps="2824"/></proof>
    </goal>
    <goal name="link&#39;vc.182.0.11" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.93" steps="5403"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.183" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="209"/></proof>
  </goal>
  <goal name="link&#39;vc.184" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="203"/></proof>
  </goal>
  <goal name="link&#39;vc.185" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="203"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.13" steps="1380"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="67"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="60"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="69"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.6.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.6.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="3180"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="4.37" steps="15992"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.22" steps="1265"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1153"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="186"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="441"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.10.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.42" steps="2013"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="2016"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.40" steps="2023"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="180"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="180"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.74" steps="17856"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.77" steps="17851"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.75" steps="17852"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="2034"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="1700"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="192"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="2227"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="190"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="441"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="10.60" steps="36177"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="230"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="538"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1182"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="1881"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.12" steps="15704"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="236"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="9.61" steps="33661"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="556"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1233"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="insert&#39;vc.27.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.27.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if_term" proved="true" >
     <goal name="insert&#39;vc.27.0.0.0" expl="VC for insert" proved="true">
     <transf name="eliminate_if_fmla" proved="true" >
      <goal name="insert&#39;vc.27.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="9.09" steps="25879"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.27.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="0.10" steps="226"/></proof>
       </goal>
       <goal name="insert&#39;vc.27.0.0.0.0.1" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="6.53" steps="16715"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.28.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.28.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3562"/></proof>
    </goal>
    <goal name="insert&#39;vc.28.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.28.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="222"/></proof>
     </goal>
     <goal name="insert&#39;vc.28.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.28.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.28.0.1.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.44" steps="20369"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.28.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="3389"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="240"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="238"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="544"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="276"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="630"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1221"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2799"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.61" steps="24910"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="282"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="4.26" steps="17084"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.28" steps="280"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="616"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="314"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="704"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1357"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="2388"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.18" steps="8052"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="320"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="316"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="667"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56" steps="6729"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="509"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="513"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="517"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.53.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.53.0.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.21" steps="5728"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.33" steps="10796"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_size_framed_by">
   <goal name="insert&#39;vc.55.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0"><result status="valid" time="3.10" steps="10591"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.26" steps="12359"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="5"><result status="valid" time="2.88" steps="241688"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="10.37" steps="26864"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.59.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.59.0.0" expl="wr ({self} union {self}`rep)`size" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.59" steps="802"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="567"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr ({} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="insert&#39;vc.61.0" expl="wr ({} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="10.48" steps="23267"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="575"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.63.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.63.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.63.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.63.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.34" steps="352"/></proof>
      </goal>
      <goal name="insert&#39;vc.63.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="30.17" steps="80642"/></proof>
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.63.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.63.0.0.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.14" steps="15434"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="5407"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="354"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="356"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="354"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="355"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="4.06" steps="331288"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.70.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="insert&#39;vc.70.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.70.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.48" steps="854"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.70.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.42" steps="841"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.71" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.71.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.71.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.12" steps="10323"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.71.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="80.34" steps="79820"/></proof>
     </goal>
     <goal name="insert&#39;vc.71.0.1.1" expl="VC for insert" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="24.25" steps="1175534"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.71.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.71" steps="2277"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.72" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.72.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.72.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.53" steps="6881"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.41" steps="6429"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.30" steps="7356"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.3" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.72.0.3.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.72.0.3.0.0" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="109.06" steps="13099094"/></proof>
      </goal>
      <goal name="insert&#39;vc.72.0.3.0.1" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="6.33" steps="556889"/></proof>
      </goal>
      <goal name="insert&#39;vc.72.0.3.0.2" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="5.85" steps="575806"/></proof>
      </goal>
      <goal name="insert&#39;vc.72.0.3.0.3" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="24.13" steps="1138421"/></proof>
      </goal>
      <goal name="insert&#39;vc.72.0.3.0.4" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="24.19" steps="1139710"/></proof>
      </goal>
      <goal name="insert&#39;vc.72.0.3.0.5" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="24.26" steps="1137530"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.72.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="insert&#39;vc.72.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.21" steps="354"/></proof>
     </goal>
     <goal name="insert&#39;vc.72.0.4.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.40" steps="25425"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.72.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.23" steps="9453"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="insert&#39;vc.72.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.43" steps="912"/></proof>
     </goal>
     <goal name="insert&#39;vc.72.0.6.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.63" steps="7827"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.72.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.78" steps="7957"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.81" steps="7854"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.9" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.84" steps="11952"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.10" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.21" steps="15766"/></proof>
    <proof prover="6" timelimit="80"><result status="timeout" time="89.00" steps="11005121"/></proof>
    </goal>
    <goal name="insert&#39;vc.72.0.11" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="insert&#39;vc.72.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="26.64" steps="59032"/></proof>
     </goal>
     <goal name="insert&#39;vc.72.0.11.1" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="1.72" steps="8062"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.73" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="246"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="10.69" steps="20628"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="625"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="250"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1550"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="656"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="662"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="256"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="256"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="4309"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="261"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="tmp := link(self,hd,result)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.84.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.84.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="3983"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="3622"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.50" steps="4189"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="insert&#39;vc.84.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.22" steps="706"/></proof>
     </goal>
     <goal name="insert&#39;vc.84.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.84.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.84.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="9.20" steps="12720"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.68" steps="4190"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.62" steps="3813"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="26.94" steps="1691108"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="26.80" steps="1686541"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="27.01" steps="1690374"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.84.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="57.81" steps="12292"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="4694"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.6" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.45" steps="3560"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.72" steps="4352"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.70" steps="4347"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.9" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.07" steps="5081"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.10" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.00" steps="12270"/></proof>
    <proof prover="5"><result status="unknown" time="21.46" steps="1636104"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.11" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="insert&#39;vc.84.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.55" steps="3581"/></proof>
     </goal>
     <goal name="insert&#39;vc.84.0.11.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="insert&#39;vc.84.0.11.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.84.0.11.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.31" steps="9277"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.11.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.53" steps="9277"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.11.1.0.2" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="8.83" steps="850487"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.11.1.0.3" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.98" steps="8750"/></proof>
       <proof prover="5"><result status="valid" time="8.86" steps="849850"/></proof>
       </goal>
       <goal name="insert&#39;vc.84.0.11.1.0.4" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.94" steps="8755"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.85" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="452"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.29" steps="322"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="801"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="358"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="886"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="1735"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="2784"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="17.68" steps="53165"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="364"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="358"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="853"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.49" steps="16812"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="642"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="646"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="650"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="105.83" steps="25390"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="105.39" steps="26320"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="25.27" steps="26447"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="115.97" steps="25501"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="60.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.104.0" expl="wr ({self} union {self}`rep)`rep" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.104.0.0" expl="wr ({self} union {self}`rep)`rep" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.44" steps="990"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.105" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="71.11" steps="29907"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="timeout" time="62.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.106.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.106.0.0" expl="wr ({self} union {self}`rep)`size" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.46" steps="980"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.107" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="696"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="76.20" steps="30246"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="704"/></proof>
  </goal>
  <goal name="insert&#39;vc.110" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.110.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.110.0.0" expl="postcondition" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def, img_rep_ax" arg2="in" arg3="H">
     <goal name="insert&#39;vc.110.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.110.0.0.0.0" expl="postcondition" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="insert&#39;vc.110.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.40" steps="396"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.110.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.68" steps="18613"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.99" steps="9505"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="398"/></proof>
  </goal>
  <goal name="insert&#39;vc.113" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="400"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="396"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="397"/></proof>
  </goal>
  <goal name="insert&#39;vc.116" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.116.0" expl="postcondition" proved="true">
   <proof prover="6" timelimit="80"><result status="valid" time="4.51" steps="417731"/></proof>
   </goal>
   <goal name="insert&#39;vc.116.1" expl="postcondition" proved="true">
   <proof prover="6" timelimit="80"><result status="valid" time="4.61" steps="416887"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.117" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000" obsolete="true"><result status="timeout" time="120.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.117.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.117.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="1030"/></proof>
    </goal>
    <goal name="insert&#39;vc.117.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.32" steps="1017"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.118" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.118.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.118.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.50" steps="17151"/></proof>
    </goal>
    <goal name="insert&#39;vc.118.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.118.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="388"/></proof>
     </goal>
     <goal name="insert&#39;vc.118.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.118.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.118.0.1.1.0.0" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.118.0.1.1.0.0.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.118.0.1.1.0.0.0.0" expl="VC for insert" proved="true">
         <proof prover="6" timelimit="120"><result status="valid" time="9.22" steps="456644"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.118.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="2870"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.119" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.119.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.119.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.46" steps="9693"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.32" steps="9176"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.52" steps="2698"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s6 pq)">
     <goal name="insert&#39;vc.119.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.43" steps="1085"/></proof>
     </goal>
     <goal name="insert&#39;vc.119.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.119.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.119.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="31.88" steps="1502712"/></proof>
       </goal>
       <goal name="insert&#39;vc.119.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="1.40" steps="175807"/></proof>
       </goal>
       <goal name="insert&#39;vc.119.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="1.41" steps="175391"/></proof>
       </goal>
       <goal name="insert&#39;vc.119.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="31.80" steps="1420083"/></proof>
       </goal>
       <goal name="insert&#39;vc.119.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="31.87" steps="1422461"/></proof>
       </goal>
       <goal name="insert&#39;vc.119.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="31.88" steps="1422440"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.119.0.4" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="97.28" steps="118368"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.64" steps="12569"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.6" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="56.69" steps="90788"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.26" steps="12004"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.00" steps="11686"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.9" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.25" steps="12715"/></proof>
    </goal>
    <goal name="insert&#39;vc.119.0.10" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.119.0.10.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.119.0.10.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.04" steps="14330"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.119.0.11" expl="VC for insert" proved="true">
    <proof prover="2"><result status="valid" time="76.58"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="104"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="264"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="137"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="167"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="169"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="770"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.67" steps="13695"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1362"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="175"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="4.35" steps="9795"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="179"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="current := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="2232"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="4082"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.23.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.20" steps="1143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="wr {self}`rep`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.24.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.09" steps="200"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="329"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="333"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.27.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.27.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="2024"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1880"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.18" steps="1338"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.3" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="combineAux&#39;vc.27.0.3.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.27.0.3.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.78" steps="7992"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.26" steps="1345"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="7132"/></proof>
      <proof prover="5"><result status="valid" time="3.69" steps="486742"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.3" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="8.60" steps="648625"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.42" steps="11203"/></proof>
      <proof prover="5"><result status="valid" time="8.52" steps="648625"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.5" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.47" steps="11202"/></proof>
      <proof prover="5"><result status="valid" time="8.59" steps="648575"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.27.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="4271"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2119"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="1824"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2120"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2118"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.9" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="4011"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.48" steps="3226"/></proof>
    <transf name="assert" arg1="(nodeP s2 rep1)">
     <goal name="combineAux&#39;vc.27.0.9.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="1.46" steps="7148"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.27.0.9.1" expl="VC for combineAux">
     <proof prover="0"><result status="valid" time="2.14" steps="10487"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.27.0.11" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.90" steps="10343"/></proof>
    <proof prover="5"><result status="valid" time="4.80" steps="640024"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.28.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.28.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.41" steps="5620"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.28.0.1" expl="VC for combineAux" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="63.88" steps="4919754"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.28.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="1528"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="6970"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="214"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="486"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="252"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="286"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="tmp := current.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1303"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="308"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="5004"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="319"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="660"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="19.41" steps="66950"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.42.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.01" steps="3793"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.19" steps="311"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.17" steps="311"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.17" steps="3787"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.42.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.45" steps="18524"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.42.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="6.68" steps="24420"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="2649"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="325"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.62" steps="14541"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="3.14" steps="10434"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="13.34" steps="22760"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="158.35" steps="157486"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="535"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="539"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.51.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.51.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.00" steps="4293"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="3896"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="1775"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.51.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="744"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.51.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.51.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="3.51" steps="253025"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.34" steps="92435"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.33" steps="92391"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.99" steps="162973"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.09" steps="369549"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="1.15" steps="162801"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="18.50" steps="11775"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.23" steps="5400"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.88" steps="3452"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.28" steps="5494"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="4535"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.9" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.78" steps="11268"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.61" steps="6071"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.51.0.9.0" expl="asserted formula">
     <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.09" steps="249444"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.9.1" expl="VC for combineAux">
     <proof prover="0"><result status="valid" time="41.73" steps="36122"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.11" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.51.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.82" steps="3459"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.11.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="combineAux&#39;vc.51.0.11.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.51.0.11.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.11.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.11.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.26" steps="12433"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.11.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.28" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.11.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.52.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.52.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.06" steps="6840"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.52.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="335"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.52.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.52.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="combineAux&#39;vc.52.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="6" timelimit="60"><result status="valid" time="3.02" steps="195494"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.52.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="1977"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.55" steps="14785"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="Ensures8" arg2="k7">
   <goal name="combineAux&#39;vc.54.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.29" steps="700"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="766"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="514"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="248"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="282"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="598"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="tmp := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="285"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="287"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="638"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1537"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.65.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="3.41" steps="10615"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.65.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="2.45" steps="10316"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="2864"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="293"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="3456"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.01" steps="6572"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.65" steps="9907"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.12" steps="3051"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="513"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="311"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.75.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.75.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.66" steps="2773"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.1" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.65" steps="2774"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.2" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.30" steps="1649"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.3" expl="loop invariant init" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="combineAux&#39;vc.75.0.3.0" expl="loop invariant init" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.75.0.3.0.0" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="16.21" steps="1209836"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.1" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="6.71" steps="706299"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.2" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="6.96" steps="752131"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.3" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="20.92" steps="1337364"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.4" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="20.80" steps="1413653"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.5" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="18.72" steps="1329977"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.75.0.4" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.32" steps="10160"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.5" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3261"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.6" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.63" steps="2714"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.7" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3240"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.8" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3224"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.9" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.82" steps="6387"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.10" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.63" steps="5387"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.11" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="9.01" steps="24017"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.76.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.76.0.0" expl="loop invariant init" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="1.63" steps="141891"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.76.0.1" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.76.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="304"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.76.0.1.1" expl="loop invariant init" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="41.45" steps="71859"/></proof>
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.76.0.1.1.0" expl="loop invariant init" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="combineAux&#39;vc.76.0.1.1.0.0" expl="loop invariant init" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="combineAux&#39;vc.76.0.1.1.0.0.0" expl="loop invariant init" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="combineAux&#39;vc.76.0.1.1.0.0.0.0" expl="loop invariant init" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.75" steps="10924"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.76.0.2" expl="loop invariant init" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="1.26" steps="155021"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.77" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="5670"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="3310"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="745"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="757"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="356"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="353"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="787"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="863"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="873"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="2220"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="883"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="2330"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="367"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="372"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="372"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="993"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.98" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="413"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="443"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1075"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.83" steps="2094"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.102.0" expl="true case (type invariant)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.102.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="451"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="451"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="444"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.50" steps="453"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="47.44" steps="70987"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="combineAux&#39;vc.102.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="18.10" steps="35428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="4582"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="449"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="8872"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="12.73" steps="30562"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.107.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.81" steps="9353"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.89" steps="5583"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="3.72" steps="5592"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.74" steps="5601"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="469"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.112.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.112.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.64" steps="6508"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.1" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="19.46" steps="2307261"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.65" steps="2991"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.112.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.73" steps="1173"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.112.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.112.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="5.54" steps="13036"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.70" steps="1192"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.67" steps="2634"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.17" steps="254473"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="11.14" steps="21644"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.17" steps="21649"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.112.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.16" steps="296614"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.04" steps="6974"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.27" steps="5906"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.18" steps="7603"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.10" steps="7597"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.9" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="10.82" steps="24002"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.11" steps="11948"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.112.0.9.0" expl="asserted formula">
     <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="296324"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.9.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="2.34" steps="279892"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.112.0.11" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.112.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.52" steps="5389"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.11.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.72" steps="112597"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.113.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.113.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="5.11" steps="367980"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.113.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.113.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="460"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.113.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="66.54" steps="5442215"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.113.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="1.64" steps="220543"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="475"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="32.88" steps="46332"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="1194"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="353"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="354"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="764"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="363"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="794"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="367"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.37" steps="870"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.125" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="880"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="2229"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="890"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2339"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="374"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="379"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="379"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1000"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.136" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="420"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="448"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1080"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="2099"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.140.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="37.36" steps="48631"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.140.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="19.48" steps="35435"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="4589"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="454"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.47" steps="8879"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="14.76" steps="30572"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.145.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.14" steps="11033"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.95" steps="5590"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="4.04" steps="5601"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="4.10" steps="5607"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.149.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.149.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.78" steps="6513"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.76" steps="5977"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.73" steps="2996"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.149.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="1176"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.149.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.149.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="6.81" steps="14482"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.74" steps="1195"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.73" steps="2639"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.18" steps="256910"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="14.97" steps="28296"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="14.32" steps="25568"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.149.0.4" expl="VC for combineAux" proved="true">
    <proof prover="2" timelimit="30" memlimit="12000"><result status="valid" time="0.65"/></proof>
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.15" steps="296641"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.46" steps="7807"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.36" steps="5911"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.28" steps="7609"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.26" steps="7593"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.9" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="11.93" steps="22884"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.94" steps="12050"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.149.0.9.0" expl="asserted formula">
     <proof prover="7" timelimit="20" memlimit="12000"><result status="valid" time="0.12" steps="296354"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.9.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="2.43" steps="285781"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.149.0.11" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.149.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.61" steps="5394"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.11.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="2.21" steps="7688"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.150.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.150.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="4.69" steps="372216"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.150.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.150.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.42" steps="463"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.150.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="61.23" steps="5182286"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.150.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="1.70" steps="230780"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="478"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="480"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="22.41" steps="30920"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="1199"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.57" steps="506"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="1210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.159" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="1240"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="521"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.54" steps="516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="1257"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="3450"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.06" steps="1267"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="3604"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="740"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="530"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="530"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.172.0" expl="assertion" proved="true">
   <proof prover="0" memlimit="16000"><result status="valid" time="0.43" steps="539"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.172.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.172.1.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.172.1.0.0" expl="assertion" proved="true">
     <proof prover="0" memlimit="16000"><result status="valid" time="5.70" steps="14998"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="1409"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.174" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="575"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="605"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="1488"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="2900"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.178.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="8.87" steps="9089"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.63" steps="589"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.58" steps="589"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="19.01" steps="9089"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.178.4.0" expl="true case (type invariant)" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.178.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="11.25" steps="31617"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.178.4.1" expl="false case (type invariant)" proved="true">
    <transf name="subst_all" proved="true" >
     <goal name="combineAux&#39;vc.178.4.1.0" expl="false case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="58.02" steps="47476"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.01" steps="6733"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="611"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.86" steps="22037"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="53.96" steps="68405"/></proof>
  <transf name="assert" proved="true" arg1="(s2.alloct = s.alloct)">
   <goal name="combineAux&#39;vc.182.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="619"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.182.1" expl="loop invariant preservation" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.182.1.0" expl="loop invariant preservation" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.182.1.0.0" expl="loop invariant preservation" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.06" steps="1138"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.183" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.183.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.10" steps="11909"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="12.78" steps="12459"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="12.25" steps="10485"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="12.19" steps="9519"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.187.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.187.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.65" steps="9913"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.82" steps="10052"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.43" steps="4399"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.187.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.31" steps="1593"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.187.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.187.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.187.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="29.25" steps="26216"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.34" steps="1618"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.39" steps="3884"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="3.24" steps="360527"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="68.22" steps="42827"/></proof>
       <proof prover="5"><result status="valid" time="3.30" steps="360527"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="68.43" steps="42832"/></proof>
       <proof prover="5"><result status="valid" time="3.22" steps="360521"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.17" steps="350122"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.59" steps="10542"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.75" steps="9039"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="9.20" steps="22627"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="8.62" steps="21272"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.9" expl="VC for combineAux" proved="true">
    <proof prover="2" timelimit="120" memlimit="16000"><result status="valid" time="2.30"/></proof>
    <proof prover="4" timelimit="120"><result status="highfailure" time="91.67" steps="9915075"/></proof>
    <transf name="case" arg1="(pq = self)">
     <goal name="combineAux&#39;vc.187.0.9.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="68.84" steps="28832"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.187.0.9.1" expl="false case">
     <transf name="case" arg1="(pq2 = self)">
      <goal name="combineAux&#39;vc.187.0.9.1.0" expl="false case (true case)" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="55.09" steps="28837"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.187.0.9.1.1" expl="false case">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
      <proof prover="6" timelimit="120"><result status="timeout" time="120.00" steps="8821550"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="15.05" steps="22407"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.187.0.9.0" expl="asserted formula">
     <transf name="unfold" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.187.0.9.0.0" expl="asserted formula">
      <proof prover="0"><result status="valid" time="1.69" steps="4318"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.187.0.9.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="4.43" steps="484024"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.11" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.187.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="3.43" steps="8174"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.187.0.11.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="9.09" steps="21611"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.188.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.188.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="13.57" steps="776658"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.188.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.188.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.57" steps="616"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.188.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
      <goal name="combineAux&#39;vc.188.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.188.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.188.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.188.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="10.69" steps="9917"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.188.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="2.68" steps="376712"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="633"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="635"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="Ensures3" arg2="k15">
   <goal name="combineAux&#39;vc.191.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.00" steps="1191"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="1.90" steps="307051"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="506"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="1210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="3417"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="1242"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.199.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="15.78" steps="24166"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="wr {}`slots" proved="true">
  <proof prover="5"><result status="valid" time="7.34" steps="524638"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="wr {self}`rep`child" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="66085"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="wr {self}`rep`prev" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="66089"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="66093"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.204.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.204.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.204.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.204.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.53" steps="522"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.204.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="9.33" steps="8026"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="529"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.24" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.23" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.215.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.215.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.20" steps="339"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.215.0.1" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.19" steps="339"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.215.0.2" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.39" steps="814"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="351"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="361"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="361"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.32" steps="414"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="897"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="425"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="420"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="927"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="429"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.69" steps="1003"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="426"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="426"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1013"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="2701"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="1023"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="2833"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="434"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="612"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="439"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="439"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.237.0" expl="assertion" proved="true">
   <proof prover="0" memlimit="16000"><result status="valid" time="0.22" steps="450"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.237.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.237.1.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.237.1.0.0" expl="assertion" proved="true">
     <proof prover="0" memlimit="16000"><result status="valid" time="3.15" steps="9482"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="1165"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="484"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="514"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="1264"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.05" steps="2732"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.243.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="5.23" steps="7223"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="500"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.41" steps="500"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="8.59" steps="7225"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.243.4.0" expl="true case (type invariant)" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.243.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0"><result status="valid" time="3.98" steps="11214"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.243.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="30.17" steps="36662"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.96" steps="5553"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="520"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.38" steps="10420"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="35.72" steps="45016"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.248.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.93" steps="12163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="6.66" steps="7672"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="6.52" steps="6911"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="6.88" steps="7673"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.252.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.252.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.60" steps="8037"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.42" steps="7286"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.10" steps="3597"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.252.0.3.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="2.02" steps="277211"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.252.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.252.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.252.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="13.54" steps="19252"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.02" steps="1370"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.04" steps="3165"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.43" steps="296348"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="29.95" steps="30331"/></proof>
       <proof prover="5"><result status="valid" time="2.52" steps="298633"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="29.46" steps="30336"/></proof>
       <proof prover="5"><result status="valid" time="2.47" steps="300581"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.252.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.19" steps="318750"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.93" steps="8606"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.01" steps="7219"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.65" steps="10194"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.89" steps="12040"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.9" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="23.23" steps="28228"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="11.78" steps="28382"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.252.0.9.0" expl="asserted formula">
     <proof prover="7" timelimit="20" memlimit="12000"><result status="valid" time="0.12" steps="318236"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.252.0.9.1" expl="VC for combineAux">
     <proof prover="5"><result status="valid" time="3.14" steps="365827"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.252.0.11" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.252.0.11.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.252.0.11.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.61" steps="5080"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.252.0.11.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.80" steps="125687"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.253.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.253.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="8.64" steps="584114"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.253.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.253.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.37" steps="527"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.253.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn">
      <goal name="combineAux&#39;vc.253.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
       <goal name="combineAux&#39;vc.253.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.253.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.253.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="6.21" steps="7996"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.253.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="2.19" steps="298026"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.254" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="542"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.255" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="544"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.256" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="59.38" steps="76542"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.257" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="1370"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.258" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.31" steps="414"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.259" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="892"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.260" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.261" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="2449"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.262" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="924"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.263" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.264" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.264.0" expl="wr {}`length" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.264.0.0" expl="wr {}`length" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="3.92" steps="9362"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.265" expl="wr {}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.265.0" expl="wr {}`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.265.0.0" expl="wr {}`slots" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="2.71" steps="6192"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.266" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.267" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.268" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.269" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.269.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.269.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.269.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="3.22" steps="4745"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.270" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="430"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.271" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="430"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.272" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="32"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="81"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="115"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="59"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="150"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="2493"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="67"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="31"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="86"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="91"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="605"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="101"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="150"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="108"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="231"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="451"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="919"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="4524"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="114"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="171"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="205"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="209"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="213"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="217"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="1569"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="225"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="229"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="233"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="3735"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="241"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="245"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="249"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="deleteMin&#39;vc.39.0" expl="VC for deleteMin" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="deleteMin&#39;vc.39.0.0" expl="VC for deleteMin" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="deleteMin&#39;vc.39.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="deleteMin&#39;vc.39.0.0.0.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="143"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.39.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1886"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="149"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="154"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.44.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.44.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="2725"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.44.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.44.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="144"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.44.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="3.46" steps="321789"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.44.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.37" steps="79886"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.45.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.45.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1519"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1555"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="963"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.45.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="388"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.45.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.45.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.45.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="3076"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="393"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="871"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="0.93" steps="122943"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="3593"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="3593"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="19.30" steps="16335"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.42" steps="5420"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.96" steps="3298"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="3578"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="3772"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.9" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.84" steps="2338"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.62" steps="2617"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.45.0.9.0" expl="asserted formula">
     <proof prover="0" timelimit="15"><result status="valid" time="4.81" steps="3359"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.45.0.9.1" expl="VC for deleteMin">
     <proof prover="0" timelimit="15"><result status="valid" time="13.19" steps="12870"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.11" expl="VC for deleteMin" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures34">
     <goal name="deleteMin&#39;vc.45.0.11.0" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
      <goal name="deleteMin&#39;vc.45.0.11.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="950"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.45.0.11.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="2127"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="166"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="865"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="2.98" steps="9589"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="54"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="2.41" steps="9068"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="123"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="157"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="401"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="879"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1550"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.49" steps="10357"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="163"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="159"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1065"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="4933"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.01" steps="3634"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="326"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="330"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.18" steps="3674"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.17" steps="3682"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="4.88" steps="8173"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="3705"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="350"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="4.56" steps="8207"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="2.17" steps="3727"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="366"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="370"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.80.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="deleteMin&#39;vc.80.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="28.31" steps="12256"/></proof>
    <proof prover="4"><result status="valid" time="0.16" steps="538737"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="3.60" steps="393916"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1715"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="198"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="196"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="203"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.85" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.85.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.85.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="5.60" steps="7145"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.85.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.85.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="189"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.85.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="8.58" steps="566052"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.85.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1495"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.86" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.86.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.86.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="3109"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.68" steps="3165"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="1415"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.86.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="550"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.86.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.86.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.37" steps="8084"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="558"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="1274"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.09" steps="146482"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.10" steps="146482"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.11" steps="146470"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="3.86" steps="426214"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="7.18" steps="10811"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.67" steps="4270"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="3.87" steps="4352"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="7.09" steps="10390"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.9" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="4.02" steps="4645"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.93" steps="5224"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.86.0.9.0" expl="asserted formula">
     <transf name="unfold" arg1="pqueueI" arg2="in" arg3="Ensures31">
      <goal name="deleteMin&#39;vc.86.0.9.0.0" expl="asserted formula">
      <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1409"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.9.1" expl="VC for deleteMin">
     <transf name="inline_goal" >
      <goal name="deleteMin&#39;vc.86.0.9.1.0" expl="VC for deleteMin">
      <proof prover="0" memlimit="16000"><result status="valid" time="5.75" steps="8217"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.11" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="deleteMin&#39;vc.86.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="3143"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.11.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="4047"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="83"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="83"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="60"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="3535"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="916"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="795"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.62" steps="12363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="81"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="pos := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="166"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="118"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.37" steps="39677"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1051"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="23.27" steps="92349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="230"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="1309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.86" steps="4974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="352"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.85" steps="20202"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1393"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="1548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="364"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="209"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="490"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="30.68" steps="89104"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1711"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="2163"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="212"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="1481"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="2449"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.55.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.55.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.20" steps="4890"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.55.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.55.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="213"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.55.0.1.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.55.0.1.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.55.0.1.1.0.0" expl="VC for decreaseKey" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="decreaseKey&#39;vc.55.0.1.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="decreaseKey&#39;vc.55.0.1.1.0.0.0.0" expl="VC for decreaseKey" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="13.08" steps="22403"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.55.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="1601"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.56.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.56.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.37" steps="2175"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="2218"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1484"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.56.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.16" steps="510"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.56.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.30" steps="5492"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.10" steps="235708"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.12" steps="235657"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.72" steps="434628"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.33" steps="202951"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.51" steps="217389"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="229095"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="236352"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="229108"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.09" steps="229136"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="229136"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="3191"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.88" steps="4192"/></proof>
    <transf name="assert" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.110.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.17" steps="231937"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.9.1" expl="VC for decreaseKey">
     <transf name="inline_goal" >
      <goal name="decreaseKey&#39;vc.110.0.9.1.0" expl="VC for decreaseKey">
      <transf name="introduce_premises" >
       <goal name="decreaseKey&#39;vc.110.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" memlimit="16000"><result status="valid" time="3.15" steps="7948"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.11" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="42.01" steps="52941"/></proof>
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.56.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2194"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.11.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.56.0.11.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.56.0.11.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="499"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.11.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.14" steps="5174"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.11.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.18" steps="5174"/></proof>
       <proof prover="6" timelimit="120" obsolete="true"><result status="timeout" time="120.00" steps="4528056"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.11.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.40" steps="5174"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.11.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.93" steps="3752"/></proof>
       <proof prover="6" timelimit="120" obsolete="true"><result status="timeout" time="161.00" steps="9563429"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="688"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1364"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2462"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.61.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="277"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="277"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.52" steps="3738"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="277"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="41.13" steps="94739"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="572"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="785"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="3985"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="473"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="477"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="481"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="42.88" steps="36167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.71.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.71.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="833"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.72.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.72.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.28" steps="5606"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.73.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.73.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.69" steps="2334"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="505"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="509"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="513"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.77.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.77.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.14" steps="479380"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="3.12" steps="195339"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.79.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.79.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.71" steps="116483"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.79.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.79.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="305"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.79.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="22.61" steps="1129742"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.79.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="2223"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.80.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.80.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="3003"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="3041"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.37" steps="2068"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="decreaseKey&#39;vc.80.0.3.0" expl="VC for decreaseKey" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.80.0.3.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.47" steps="1139133"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.80.0.3.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="268038"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.80.0.3.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="268147"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.80.0.3.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="714728"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.80.0.3.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.35" steps="714728"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.80.0.3.0.5" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="714728"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="8.55" steps="721130"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.31" steps="5574"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.14" steps="262585"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.91" steps="4106"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="4571"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.03" steps="4914"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.79" steps="5808"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.134.0.9.0" expl="asserted formula">
     <proof prover="6" timelimit="120"><result status="valid" time="6.61" steps="575423"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.134.0.9.1" expl="VC for decreaseKey">
     <proof prover="5" timelimit="15"><result status="valid" time="2.34" steps="236762"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.80.0.11.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="3024"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.80.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="262460"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1624"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="356"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.48" steps="37213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1569"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="2580"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="202"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="437"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="212"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="499"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="31.50" steps="66260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1755"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1508"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="221"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="221"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="2558"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.109.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.109.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.22" steps="5383"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.109.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.109.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="216"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.109.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="13.46" steps="913591"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.109.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1604"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.110.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.110.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.14" steps="231934"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.13" steps="238597"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1487"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.110.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="230912"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.110.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.61" steps="6035"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="529"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.13" steps="238824"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="0.70" steps="94580"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.68" steps="393406"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="6.01" steps="419108"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="231936"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="239540"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="231949"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="231977"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.11" steps="231977"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="3636"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.92" steps="4693"/></proof>
    <transf name="assert" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.56.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.11" steps="229046"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.9.1" expl="VC for decreaseKey">
     <transf name="unfold" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.56.0.9.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.56.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" timelimit="15"><result status="valid" time="1.65" steps="3827"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.9.1.0.1" expl="VC for decreaseKey">
       <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1540"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.110.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="232133"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.11.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.110.0.11.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.110.0.11.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="505"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.11.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="3710"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.11.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="11.29" steps="37389"/></proof>
       <proof prover="4" timelimit="120"><result status="timeout" time="120.00" steps="13379991"/></proof>
       <proof prover="7" obsolete="true"><result status="timeout" time="15.00"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.11.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="238579"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.11.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.96" steps="5115"/></proof>
       <proof prover="4" timelimit="120"><result status="timeout" time="120.00" steps="12227059"/></proof>
       <proof prover="7" obsolete="true"><result status="timeout" time="15.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="290"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="697"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1383"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="2492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = self)">
   <goal name="decreaseKey&#39;vc.115.0" expl="true case (type invariant)" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.45" steps="5367"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.1" expl="false case (type invariant)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="50.29" steps="108423"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.115.1.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="298"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="298"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.30" steps="5188"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="298"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.03" steps="21738"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.32" steps="599"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.115.1.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="817"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="296"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="289"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="472"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="2.19" steps="4141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="480"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.121.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="484"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="488"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="4175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.125.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.125.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="843"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.126.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.126.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.72" steps="6282"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="105.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.127.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.127.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.72" steps="6297"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="512"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="516"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="520"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="671309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="324"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.133.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.133.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.22" steps="7310"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.133.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.133.0.1.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="224594"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.133.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="22.62" steps="1188657"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.133.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="2225"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.134.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.134.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.81" steps="3539"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="270860"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.63" steps="2070"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.134.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="759"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.134.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.134.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.90" steps="8568"/></proof>
       <proof prover="7"><result status="valid" time="0.49" steps="1160711"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.09" steps="271202"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.09" steps="271153"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.27" steps="732636"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="732636"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.134.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.36" steps="732636"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="10.76" steps="876169"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.37" steps="6268"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.12" steps="265478"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="4693"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="5176"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.27" steps="5551"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.02" steps="6491"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.80.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.13" steps="262163"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.80.0.9.1" expl="VC for decreaseKey">
     <proof prover="5" timelimit="15"><result status="valid" time="2.53" steps="220964"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.134.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="265673"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.134.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="5442"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.18" steps="26478"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1832"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1043"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="377"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1723"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.152.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.152.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="3829"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.152.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="6.75" steps="484751"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1354"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.153.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.153.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="1579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="1612"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.31" steps="1258"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.153.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="217379"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.153.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="861642"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="224528"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.14" steps="224479"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="0.54" steps="83560"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.79" steps="7595"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="4.06" steps="298641"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="17.83" steps="6210"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2061"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.36" steps="1576"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="2236"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2236"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.80" steps="2802"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.06" steps="3304"/></proof>
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.209.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.09" steps="219252"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.9.1" expl="VC for decreaseKey">
     <transf name="inline_goal" >
      <goal name="decreaseKey&#39;vc.209.0.9.1.0" expl="VC for decreaseKey">
      <transf name="split_vc" >
       <goal name="decreaseKey&#39;vc.209.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.90" steps="6273"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.9.1.0.1" expl="VC for decreaseKey">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1326"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.153.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="218112"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.11.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.153.0.11.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.153.0.11.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="223163"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.11.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2487"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.11.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="450524"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.11.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="222707"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.11.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.80" steps="2491"/></proof>
       <proof prover="7" obsolete="true"><result status="timeout" time="15.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="602"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="2162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="28.48" steps="71220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="3568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.164.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="419"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="423"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="427"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.72" steps="3600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.168.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.168.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="726"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="29.26" steps="17861"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="20.11" steps="17873"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="447"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="451"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="601930"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.176.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.176.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.68" steps="105917"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.176.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="263"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.176.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="12.56" steps="723692"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.64" steps="99987"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.177.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.177.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="2679"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="2717"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.34" steps="1841"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.177.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="250053"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.177.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.44" steps="1059120"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="256179"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.08" steps="256120"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="669208"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="669208"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="669208"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="6.40" steps="575331"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.95" steps="5009"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.45" steps="2674"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="3702"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.83" steps="4129"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.66" steps="4430"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.57" steps="5230"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.233.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.13" steps="251445"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.9.1" expl="VC for decreaseKey">
     <proof prover="6" timelimit="120"><result status="valid" time="1.53" steps="190558"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.177.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="250960"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="4220"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.07" steps="84"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="1041"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="3919"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="100"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.24" steps="13445"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1117"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="290"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="352"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.81" steps="40034"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1443"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1828"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="176"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="176"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="381"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="2097"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.208.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.208.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.20" steps="294342"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.208.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.208.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="7.93" steps="563863"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.208.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2" timelimit="15"><result status="valid" time="0.22"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.209.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.209.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="219040"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="225275"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.21" steps="1274"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.209.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="218509"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.209.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="834318"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="225536"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="225487"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="4.01" steps="291752"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="5.47" steps="17358"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="0.60" steps="86239"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="219040"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="226201"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.17" steps="219053"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="219081"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="219081"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="2767"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.70" steps="3624"/></proof>
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.153.0.9.0" expl="asserted formula">
     <proof prover="0" timelimit="15"><result status="valid" time="17.15" steps="5912"/></proof>
     <proof prover="7"><result status="valid" time="0.10" steps="218121"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.9.1" expl="VC for decreaseKey">
     <transf name="inline_goal" >
      <goal name="decreaseKey&#39;vc.153.0.9.1.0" expl="VC for decreaseKey">
      <transf name="introduce_premises" >
       <goal name="decreaseKey&#39;vc.153.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" memlimit="16000"><result status="valid" time="1.84" steps="5812"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.209.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.15" steps="219237"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.33" steps="6161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1208"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="34.00" steps="87201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="3551"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.220.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="425"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="433"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="31.54" steps="24300"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.224.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.224.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.31" steps="736"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="3600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="28.09" steps="64894"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.21" steps="599747"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="282"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.232.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.232.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.93" steps="5928"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.232.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="268"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.232.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="14.32" steps="876827"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="1994"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.233.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.233.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.13" steps="251598"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.19" steps="257015"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="1857"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.233.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="250925"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.233.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.43" steps="1029006"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="257317"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="257258"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="657852"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="657852"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.21" steps="657852"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="7.36" steps="645861"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.92" steps="4992"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.18" steps="251623"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="3688"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.84" steps="4113"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.58" steps="4422"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.68" steps="5213"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.177.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.18" steps="250580"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.9.1" expl="VC for decreaseKey">
     <proof prover="0" timelimit="15"><result status="valid" time="25.53" steps="30169"/></proof>
     <proof prover="5" timelimit="15"><result status="valid" time="1.75" steps="173937"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.233.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="251825"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="0.49" steps="97281"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="100"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="101"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="278"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.04" steps="15182"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1110"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1235"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="2090"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="294"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="356"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="24.29" steps="79317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1440"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1825"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1253"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="2096"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.262.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.262.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.92" steps="4236"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.262.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.262.0.1.0" expl="asserted formula" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="0.17" steps="69084"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.262.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="11.32" steps="751748"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.262.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1358"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.263.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.263.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1847"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1890"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="1260"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.263.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="219851"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.263.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.33" steps="836638"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="227024"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="226963"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="515634"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="4.75" steps="368228"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="515634"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="19.43" steps="12476"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="2694"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="1847"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2506"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2506"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="2743"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.70" steps="3602"/></proof>
    <transf name="assert" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.263.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.10" steps="221003"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.9.1" expl="VC for decreaseKey">
     <transf name="inline_goal" >
      <goal name="decreaseKey&#39;vc.263.0.9.1.0" expl="VC for decreaseKey">
      <transf name="introduce_premises" >
       <goal name="decreaseKey&#39;vc.263.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" memlimit="16000"><result status="valid" time="2.14" steps="6246"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.263.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="220963"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.11.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.263.0.11.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.263.0.11.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" memlimit="16000" obsolete="true"><result status="timeout" time="80.00"/></proof>
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.263.0.11.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.17" steps="432"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.11.1.0.0.1" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.50" steps="2796"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.11.1.0.0.2" expl="VC for decreaseKey" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.12" steps="18104"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.11.1.0.0.3" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.18" steps="432"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.11.1.0.0.4" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.17" steps="432"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="250"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="613"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1216"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="31.37" steps="82898"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="256"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.272.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.59" steps="3544"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="424"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.274.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="432"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3578"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.278.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.278.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.37" steps="740"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="3593"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="28.17" steps="62578"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="456"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="464"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="606132"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.286.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.286.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.82" steps="113680"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.286.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="270"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.286.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="15.61" steps="922724"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="1979"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.287.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.287.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2659"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="2697"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.39" steps="1842"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.287.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="252149"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.287.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.44" steps="1038509"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.20" steps="258977"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.20" steps="258928"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="662359"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="662359"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="662359"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="32.90" steps="21036"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="4956"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.42" steps="2654"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="3662"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="4086"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.60" steps="4398"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.44" steps="5188"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.287.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.09" steps="253229"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.9.1" expl="VC for decreaseKey">
     <proof prover="5" timelimit="15"><result status="valid" time="2.26" steps="213866"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.287.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="253584"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="4310"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="118"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.01" steps="18766"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1188"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1522"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="875"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="311"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="137"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="137"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="1457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.305.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.305.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="3316"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.305.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.305.0.1.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.07" steps="194945"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.305.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="5.21" steps="436900"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.305.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="1139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.306.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.306.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="1334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="1367"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="1062"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s2 pq)">
     <goal name="decreaseKey&#39;vc.306.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="207927"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.306.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="759717"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="214898"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="214851"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="470391"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.75" steps="5838"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="470391"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="17.06" steps="5938"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.50" steps="105781"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1746"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="1332"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1906"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1906"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2395"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.53" steps="2811"/></proof>
    <transf name="assert" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.306.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.14" steps="208867"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.9.1" expl="VC for decreaseKey">
     <transf name="inline_goal" >
      <goal name="decreaseKey&#39;vc.306.0.9.1.0" expl="VC for decreaseKey">
      <transf name="introduce_premises" >
       <goal name="decreaseKey&#39;vc.306.0.9.1.0.0" expl="VC for decreaseKey">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.70" steps="4927"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s2 sntl2)">
     <goal name="decreaseKey&#39;vc.306.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.14" steps="208587"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.04" steps="4903"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="527"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1053"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1883"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="18.99" steps="44103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="211"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.315.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.27" steps="3145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.317.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.13" steps="370"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="374"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="3181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.321.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.321.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="637"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="3194"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="13.66" steps="11453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.20" steps="545241"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.329.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.329.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.42" steps="5233"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.329.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.329.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="227"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.329.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="9.93" steps="563140"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.329.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.37" steps="1758"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.330.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.330.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2378"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.87" steps="130142"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="2416"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.91" steps="132117"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1643"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.330.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="239768"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.330.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.39" steps="945851"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="246377"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="246320"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="611948"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="611948"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="611948"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="5.85" steps="493064"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="4451"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15" obsolete="true"><result status="timeout" time="15.00"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.77" steps="129525"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="3292"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="3681"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.9" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.39" steps="3969"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.18" steps="4654"/></proof>
    <transf name="assert" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.330.0.9.0" expl="asserted formula">
     <proof prover="7"><result status="valid" time="0.11" steps="240482"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.9.1" expl="VC for decreaseKey">
     <proof prover="5" timelimit="15"><result status="valid" time="1.26" steps="158194"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.11" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.330.0.11.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="240597"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.11.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="3758"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="76"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="867"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.335.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="147"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="151"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="159"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="163"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.345.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.345.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.345.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.345.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="104"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.345.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1018"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="107"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.347" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.347.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.347.0.0" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.26" steps="1594"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.1" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="2.22" steps="7951"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.2" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="777"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.348" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.348.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.348.0.0" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="850"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.1" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="886"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.10" steps="717"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.3" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="9.40" steps="36817"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.4" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.65" steps="2336"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.5" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.20" steps="1319"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.6" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.15" steps="849"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.7" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.19" steps="1208"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.8" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.18" steps="1208"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.9" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.31" steps="1545"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.10" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.35" steps="1788"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.11" expl="postcondition" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.08" steps="7430"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueR" proved="true">
 <transf name="intros" proved="true" arg1="s,t,pi">
  <goal name="boundary_frames_invariant_PqueueR.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueR.0.0" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="boundary_frames_invariant_PqueueR.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.0" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="4029"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.1" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="4.52" steps="17164"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.2" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.98" steps="19465"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.3" proved="true">
     <transf name="assert" proved="true" arg1="(repOk s pq)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.06" steps="205532"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1" proved="true">
      <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.18" steps="785"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.1" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="20"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2" proved="true">
        <transf name="unfold" proved="true" arg1="repOk">
         <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.0" proved="true">
          <proof prover="5" timelimit="15" obsolete="true"><result status="unknown" time="6.15" steps="531167"/></proof>
          <proof prover="6" timelimit="120"><result status="valid" time="5.20" steps="533933"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.1" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="2.54" steps="10399"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.2" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="1.99" steps="8790"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
          <transf name="assert" proved="true" arg1="(agree_child s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.0" expl="asserted formula" proved="true">
           <proof prover="7"><result status="valid" time="0.06" steps="183190"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1" proved="true">
           <transf name="unfold" proved="true" arg1="agree_child" arg2="in" arg3="h">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0" proved="true">
            <transf name="destruct" proved="true" arg1="h">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0" proved="true">
             <transf name="instantiate" proved="true" arg1="h" arg2="n">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0" proved="true">
              <transf name="assert" proved="true" arg1="(idRef pi s.heap.child[n] t.heap.child[n])">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="8.95" steps="34756"/></proof>
               </goal>
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.1" proved="true">
               <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="13.37" steps="53075"/></proof>
               <proof prover="5" timelimit="15" obsolete="true"><result status="unknown" time="7.41" steps="727946"/></proof>
               <proof prover="6" timelimit="120"><result status="valid" time="8.48" steps="869784"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
          <proof prover="6" timelimit="120"><result status="valid" time="31.26" steps="2728500"/></proof>
          <transf name="assert" arg1="(idRef pi s.heap.sibling[n] t.heap.sibling[n])">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(agree_sibling s t pi (union (img_rep s s.pool) s.pool))">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.0" expl="asserted formula" proved="true">
            <proof prover="7"><result status="valid" time="0.06" steps="183190"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="agree_sibling" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="10.25" steps="37387"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.1">
           <proof prover="5" timelimit="15" obsolete="true"><result status="unknown" time="5.48" steps="588719"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5" proved="true">
          <transf name="assert" proved="true" arg1="(agree_prev s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.0" expl="asserted formula" proved="true">
           <proof prover="7"><result status="valid" time="0.06" steps="183190"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1" proved="true">
           <transf name="assert" proved="true" arg1="(pi.lor[n] = n)">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="15"><result status="valid" time="3.65" steps="12762"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1" proved="true">
            <transf name="unfold" proved="true" arg1="agree_prev" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0" proved="true">
             <transf name="destruct" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0" proved="true">
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="3.53" steps="12168"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.1" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="5.79" steps="22383"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.2" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="5.15" steps="18072"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.3" proved="true">
                <proof prover="5" timelimit="15"><result status="valid" time="5.04" steps="393043"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.4" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.85" steps="3605"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.5" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="6.83" steps="30540"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.6" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.82" steps="3502"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.7" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="3665"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.8" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.53" steps="6272"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.9" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.62" steps="6981"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.10" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.56" steps="19462"/></proof>
     <transf name="unfold" arg1="nodeP">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0">
      <transf name="introduce_premises" >
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0.0">
       <proof prover="0" timelimit="15"><result status="valid" time="20.78" steps="81155"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.11" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s sntl2)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.11.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="2.19" steps="8474"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.11.1" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="3.76" steps="15004"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PQUEUE_REL" proved="true">
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="137"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="636"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.64" steps="12073"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="findMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="437"/></proof>
  </goal>
  <goal name="findMin&#39;vc.1" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="118"/></proof>
  </goal>
  <goal name="findMin&#39;vc.2" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="findMin&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="342"/></proof>
  </goal>
  <goal name="findMin&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="370"/></proof>
  </goal>
  <goal name="findMin&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="985"/></proof>
  </goal>
  <goal name="findMin&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="findMin&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="findMin&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.18" steps="12025"/></proof>
   </goal>
   <goal name="findMin&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="10.47" steps="51458"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findMin&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="findMin&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="76"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="122"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="134"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="134"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="134"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="172"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="172"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.19" steps="288"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="288"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="658"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="668"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="306"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="307"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="799"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="811"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="929"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="946"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.21" steps="5578"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="400"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="457"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="459"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="1026"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="2815"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.82" steps="2803"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.23.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.23" steps="5393"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="433"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.24" steps="5406"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="433"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.78" steps="13672"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="817"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.75" steps="10288"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="465"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="465"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="1034"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.27.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.23" steps="4883"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.21" steps="4865"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.24" steps="4883"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="437"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="437"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.87" steps="13762"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.75" steps="13762"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.86" steps="13762"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.83" steps="2850"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.29.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.28" steps="4899"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="437"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.30" steps="4882"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="437"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.85" steps="14005"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="817"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.86" steps="10022"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="471"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
   <goal name="insert&#39;vc.31.0" expl="true case (assertion)" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="484"/></proof>
   </goal>
   <goal name="insert&#39;vc.31.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
    <goal name="insert&#39;vc.31.1.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.85" steps="11869"/></proof>
    </goal>
    <goal name="insert&#39;vc.31.1.1" expl="false case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s4 r_s4 pi111 l_pq r_pq)">
     <goal name="insert&#39;vc.31.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="1176"/></proof>
     </goal>
     <goal name="insert&#39;vc.31.1.1.1" expl="false case (assertion)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.20" steps="29105"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.32" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.32.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.32.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="443"/></proof>
    </goal>
    <goal name="insert&#39;vc.32.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="438"/></proof>
    </goal>
    <goal name="insert&#39;vc.32.0.2" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.32.0.2.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.32.0.2.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.65" steps="18201"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.1" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.03" steps="23547"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.2" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.64" steps="18200"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.3" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.48" steps="75009"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.4" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="445"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.5" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="445"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="456"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.3.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.96" steps="17608"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.3.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.61" steps="14135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="456"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.02" steps="17608"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.64" steps="14135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="456"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.02" steps="17608"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="9.92" steps="39841"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="456"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.6.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.6.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.05" steps="17608"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.6.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="15.40" steps="52701"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.7" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.7.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="456"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.7.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.7.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.00" steps="17608"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.7.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="9.00" steps="34450"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.33" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.57" steps="1115"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="1125"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.38" steps="481"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="535"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="1156"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.89" steps="3869"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="3113"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.89" steps="28685"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="541"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="541"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="1160"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="3869"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="3164"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.79" steps="29163"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="547"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1255"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1261"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.08" steps="3997"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="952"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="956"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="960"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.54.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.76" steps="1377"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.55" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.55.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="1381"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.56.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.77" steps="1352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.20" steps="6508"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.58.0" expl="wr ({self} union {self}`rep)`rep" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="1373"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr ({self}`rep union {})`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.59.0" expl="wr ({self}`rep union {})`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.50" steps="10338"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.60.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="1368"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1010"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr ({self}`rep union {})`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.62.0" expl="wr ({self}`rep union {})`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.48" steps="11038"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.63" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="1018"/></proof>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="582"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.91" steps="2661"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="1028"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1032"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="1036"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.69.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.54" steps="11743"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.70" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.70.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="11735"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.71" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.71.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.80" steps="1430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.72" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.40" steps="10682"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.72.0" expl="wr ({self}`rep union {})`child" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.63" steps="12005"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.73" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.84" steps="10877"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="wr ({self}`rep union {})`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.74.0" expl="wr ({self}`rep union {})`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.49" steps="11285"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.75" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.75.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.82" steps="1446"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.76" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1086"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="wr ({self}`rep union {})`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.77.0" expl="wr ({self}`rep union {})`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.45" steps="10397"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.78" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1094"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="610"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="okRefperm">
   <goal name="insert&#39;vc.80.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.80.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="10.80" steps="24362"/></proof>
    </goal>
    <goal name="insert&#39;vc.80.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="9.37" steps="21953"/></proof>
    </goal>
    <goal name="insert&#39;vc.80.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.62" steps="18108"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.81" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.81.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.81.0.0" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.81.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.81.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="28.33" steps="60848"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="31.36" steps="57026"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="10.46" steps="473128"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.79" steps="60922"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="55.08" steps="4950578"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.4" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.33" steps="579"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="0.25" steps="68434"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.5" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.34" steps="579"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="0.26" steps="68434"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.81.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="insert&#39;vc.81.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.81.0.1.0.0" expl="true case (postcondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.81.0.1.0.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.38" steps="597"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="592"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.2" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="6.88" steps="247384"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.3" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="10.00" steps="302076"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.4" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="9.78" steps="302110"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.5" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="10.32" steps="333787"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.6" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="10.30" steps="333697"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.7" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="10.26" steps="333781"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="insert&#39;vc.81.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
      <goal name="insert&#39;vc.81.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.17" steps="6711"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="insert&#39;vc.81.0.1.1.1.0" expl="false case (postcondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.81.0.1.1.1.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(l_s5.heap.size[l_pq] = r_s5.heap.size[r_pq])">
         <goal name="insert&#39;vc.81.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.81.0.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.56" steps="1470"/></proof>
          </goal>
          <goal name="insert&#39;vc.81.0.1.1.1.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.59" steps="44501"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.0.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.21" steps="11755"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.1" expl="postcondition" proved="true">
        <proof prover="6" timelimit="120"><result status="valid" time="0.66" steps="107878"/></proof>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.2" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(idRgn pi111 (rgnSubK l_s5.heap.rep[l_pq] (alloct l_s5) Node) (rgnSubK r_s5.heap.rep[r_pq] (alloct r_s5) Node))">
         <goal name="insert&#39;vc.81.0.1.1.1.0.2.0" expl="asserted formula" proved="true">
         <proof prover="6" timelimit="80"><result status="valid" time="10.16" steps="340820"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.2.1" expl="postcondition" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.0" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.98" steps="23437"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.1" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.29" steps="27800"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.2" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.60" steps="23439"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3" expl="VC for insert" proved="true">
           <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
            <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0" expl="VC for insert" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.0" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.64" steps="23738"/></proof>
             </goal>
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.1" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.21" steps="25506"/></proof>
             <proof prover="6" timelimit="80"><result status="valid" time="92.48" steps="6959947"/></proof>
             </goal>
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.2" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.33" steps="23099"/></proof>
             <proof prover="6" timelimit="80"><result status="valid" time="21.60" steps="854694"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.4" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="603"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.5" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.37" steps="603"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.3" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.3.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.21" steps="41654"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.3.1" expl="postcondition" proved="true">
         <transf name="assert" proved="true" arg1="(l_s5.heap.key[l_n] = r_s5.heap.key[r_n])">
          <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
           <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.54" steps="1523"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0.1" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.65" steps="62073"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.1" expl="postcondition" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.14" steps="21676"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.4" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.4.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.46" steps="38709"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.4.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.98" steps="61406"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.5" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.5.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.50" steps="38709"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.5.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="35.16" steps="84340"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.6" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.6.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.59" steps="38709"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.6.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="29.61" steps="82755"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.7" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.7.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.98" steps="38709"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.7.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="38.80" steps="91891"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.81.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="572"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="572"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="572"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="572"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.82" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.82.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.19" steps="28707"/></proof>
   </goal>
   <goal name="insert&#39;vc.82.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.23" steps="28394"/></proof>
   </goal>
   <goal name="insert&#39;vc.82.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem1 n (r_s.heap.rep[r_self])) -&gt; r_s5.heap.tag[n] = r_s.heap.tag[n])">
    <goal name="insert&#39;vc.82.2.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="582"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.74" steps="28613"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.82.3" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.73" steps="28613"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="614"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="614"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="614"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="614"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="616"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="879"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="889"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.50" steps="6486"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.91.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.91.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.91.0.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.91.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.91.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="592"/></proof>
       <transf name="rewrite" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.91.0.0.0.0.1.0" expl="VC for insert">
        <transf name="introduce_exists" >
         <goal name="insert&#39;vc.91.0.0.0.0.1.0.0" expl="VC for insert">
         <proof prover="0" timelimit="30" obsolete="true"><result status="valid" time="10.91" steps="29339"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="insert&#39;vc.91.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="9.43" steps="22352"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.91.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.91.1.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.91.1.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.91.1.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.91.1.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.18" steps="592"/></proof>
       <transf name="rewrite" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.91.1.0.0.0.1.0" expl="VC for insert">
        <proof prover="0" timelimit="30" obsolete="true"><result status="valid" time="7.69" steps="21915"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="insert&#39;vc.91.1.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="23.91" steps="27051"/></proof>
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.91.1.0.0.0.1.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.85" steps="21504"/></proof>
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.91.1.0.0.0.1.0.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.41" steps="21495"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="634"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="405"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="945"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.56" steps="2639"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="2563"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.97.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.21" steps="4505"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="379"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="379"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="379"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="744"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="744"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.78" steps="10570"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="411"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="411"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="955"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.101.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="4650"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.98" steps="4633"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="4650"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="383"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="383"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="5.90" steps="24309"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.17" steps="14240"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.32" steps="14240"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="2609"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.103.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.16" steps="4650"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="383"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="383"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="383"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="747"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="747"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.03" steps="10915"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="417"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.105.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.105.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="389"/></proof>
    </goal>
    <goal name="insert&#39;vc.105.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.67" steps="3243"/></proof>
    </goal>
    <goal name="insert&#39;vc.105.0.2" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.105.0.2.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.105.0.2.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.97" steps="20421"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.1" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.03" steps="23623"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.2" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.46" steps="20464"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.3" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="30.90" steps="82628"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.4" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="391"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.5" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.29" steps="391"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="402"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.3.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
     <transf name="unfold" arg1="coupling0" arg2="in" arg3="Assert5">
      <goal name="insert&#39;vc.32.0.3.1.0" expl="false case">
      <transf name="split_premise_right" >
       <goal name="insert&#39;vc.32.0.3.1.0.0" expl="false case">
       <transf name="eliminate_let" >
        <goal name="insert&#39;vc.32.0.3.1.0.0.0" expl="false case">
        <transf name="assert" arg1="(l_s4.heap.key[l_n] = r_s4.heap.key[r_n])">
         <goal name="insert&#39;vc.32.0.3.1.0.0.0.0" expl="asserted formula">
         <transf name="apply" arg1="Assert11">
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.0" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="0.19" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.1" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="0.16" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.2" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="0.20" steps="470"/></proof>
          <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="0.19" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.3" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="0.18" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.4" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="0.20" steps="470"/></proof>
          <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="0.21" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.5" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="2.03" steps="7176"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.6" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="3.34" steps="11602"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.7" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="1.54" steps="6837"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.8" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="2.46" steps="10282"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.9" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="3.33" steps="11578"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.10" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="1.60" steps="6900"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.11" expl="apply premises">
          <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="3.66" steps="16242"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.32.0.3.1.0.0.0.1" expl="false case">
         <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="8.76" steps="27856"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="Assert3">
      <goal name="insert&#39;vc.105.0.3.1.0" expl="false case" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="insert&#39;vc.105.0.3.1.0.0" expl="false case" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="insert&#39;vc.105.0.3.1.0.0.0" expl="false case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
        <proof prover="4" timelimit="120"><result status="timeout" time="120.00" steps="18409790"/></proof>
        <transf name="assert" proved="true" arg1="(l_s3.heap.key[l_n] = r_s3.heap.key[r_n])">
         <goal name="insert&#39;vc.105.0.3.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
         <transf name="apply" proved="true" arg1="Assert9">
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="410"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="410"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="410"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="410"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.15" steps="410"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.17" steps="9487"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.59" steps="16708"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.87" steps="8492"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.08" steps="9694"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.9" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.13" steps="15325"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.10" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.01" steps="9581"/></proof>
          </goal>
          <goal name="insert&#39;vc.105.0.3.1.0.0.0.0.11" expl="apply premises" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.31" steps="19094"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.105.0.3.1.0.0.0.1" expl="false case" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="10.52" steps="32034"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="402"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.79" steps="17779"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.67" steps="14910"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="402"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.75" steps="17779"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="9.40" steps="31346"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="402"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.6.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.6.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.83" steps="17779"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.6.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="14.15" steps="52848"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.7" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result -&gt; idRef pi111 l_n r_n)">
     <goal name="insert&#39;vc.105.0.7.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="4.42" steps="12327"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.7.1" expl="VC for insert" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="7.82" steps="28566"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.106" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1009"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="424"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="2832"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.20" steps="426"/></proof>
  </goal>
  <goal name="insert&#39;vc.110" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="1017"/></proof>
  </goal>
  <goal name="insert&#39;vc.111" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="428"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.52" steps="1028"/></proof>
  </goal>
  <goal name="insert&#39;vc.113" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="430"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="4270"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="1064"/></proof>
  </goal>
  <goal name="insert&#39;vc.116" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="1038"/></proof>
  </goal>
  <goal name="insert&#39;vc.117" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="436"/></proof>
  </goal>
  <goal name="insert&#39;vc.118" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.118.0" expl="precondition" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="insert&#39;vc.118.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.57" steps="11374"/></proof>
    </goal>
    <goal name="insert&#39;vc.118.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.61" steps="11379"/></proof>
    </goal>
    <goal name="insert&#39;vc.118.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.25" steps="7232"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="438"/></proof>
  </goal>
  <goal name="insert&#39;vc.120" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="4432"/></proof>
  </goal>
  <goal name="insert&#39;vc.121" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1104"/></proof>
  </goal>
  <goal name="insert&#39;vc.122" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.122.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.122.0.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.122.0.0.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.122.0.0.0.0" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.48" steps="23488"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.1" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.09" steps="26459"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.2" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.41" steps="23487"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.3" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
       <goal name="insert&#39;vc.122.0.0.0.3.0" expl="VC for insert" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.122.0.0.0.3.0.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.56" steps="24078"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.0.0.3.0.1" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.74" steps="23865"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.0.0.3.0.2" expl="VC for insert" proved="true">
        <proof prover="6" timelimit="80"><result status="valid" time="11.89" steps="515984"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.4" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="413"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.5" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="413"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.122.0.1" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.122.0.1.0" expl="precondition" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.122.0.1.0.0" expl="precondition" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.122.0.1.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.83" steps="12685"/></proof>
       </goal>
       <goal name="insert&#39;vc.122.0.1.0.0.1" expl="false case (precondition)" proved="true">
       <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self /\ idRef pi111 l_pq r_pq)">
        <goal name="insert&#39;vc.122.0.1.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="5.13" steps="17343"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.1.0.0.1.1" expl="false case (precondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="1.43" steps="5061"/></proof>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.1" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.91" steps="46332"/></proof>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.2" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRgn pi111 (rgnSubK l_s3.heap.rep[l_pq] l_s3.alloct Node) (rgnSubK r_s3.heap.rep[r_pq] r_s3.alloct Node))">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.32" steps="5036"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="102.68" steps="330849"/></proof>
          <transf name="subst_all" proved="true" >
           <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="46.76" steps="136720"/></proof>
           <transf name="inline_goal" proved="true" >
            <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0" expl="VC for insert" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.0" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.11" steps="14491"/></proof>
             </goal>
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.1" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.38" steps="13586"/></proof>
             </goal>
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.2" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.07" steps="14415"/></proof>
             </goal>
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.3" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="45.26" steps="86569"/></proof>
             </goal>
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.4" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="416"/></proof>
             </goal>
             <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1.0.0.5" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="416"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.3" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.3.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.58" steps="15442"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.3.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="8.93" steps="26969"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.4" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.4.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.57" steps="15442"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.4.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="8.89" steps="26969"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.5" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.59" steps="15442"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1" expl="VC for insert" proved="true">
          <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
           <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="1183"/></proof>
           </goal>
           <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1.1" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="14.83" steps="58697"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.6" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.6.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.64" steps="15572"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.6.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="50.60" steps="164054"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.7" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.7.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.66" steps="15572"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.7.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="15.37" steps="59756"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.122.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="406"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="406"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="406"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="406"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.123" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="444"/></proof>
  </goal>
  <goal name="insert&#39;vc.124" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="444"/></proof>
  </goal>
  <goal name="insert&#39;vc.125" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.23" steps="18016"/></proof>
  </goal>
  <goal name="insert&#39;vc.126" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="452"/></proof>
  </goal>
  <goal name="insert&#39;vc.127" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="1392"/></proof>
  </goal>
  <goal name="insert&#39;vc.128" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1402"/></proof>
  </goal>
  <goal name="insert&#39;vc.129" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="583"/></proof>
  </goal>
  <goal name="insert&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="637"/></proof>
  </goal>
  <goal name="insert&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="1552"/></proof>
  </goal>
  <goal name="insert&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="3070"/></proof>
  </goal>
  <goal name="insert&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.59" steps="6094"/></proof>
  </goal>
  <goal name="insert&#39;vc.134" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.134.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="603"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.96" steps="11843"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.86" steps="11942"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="603"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="17.43" steps="69454"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1231"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.74" steps="1560"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="643"/></proof>
  </goal>
  <goal name="insert&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="643"/></proof>
  </goal>
  <goal name="insert&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="1558"/></proof>
  </goal>
  <goal name="insert&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.96" steps="3086"/></proof>
  </goal>
  <goal name="insert&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.75" steps="6174"/></proof>
  </goal>
  <goal name="insert&#39;vc.140" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.140.0" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.46" steps="13525"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.38" steps="13623"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.3" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="43.51" steps="152638"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.5" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.6" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="649"/></proof>
  </goal>
  <goal name="insert&#39;vc.142" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="1536"/></proof>
  </goal>
  <goal name="insert&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="1542"/></proof>
  </goal>
  <goal name="insert&#39;vc.144" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.08" steps="24968"/></proof>
  </goal>
  <goal name="insert&#39;vc.145" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1231"/></proof>
  </goal>
  <goal name="insert&#39;vc.146" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="1235"/></proof>
  </goal>
  <goal name="insert&#39;vc.147" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1239"/></proof>
  </goal>
  <goal name="insert&#39;vc.148" expl="wr ({self}`rep union {})`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.31" steps="82501"/></proof>
  </goal>
  <goal name="insert&#39;vc.149" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.64" steps="79420"/></proof>
  </goal>
  <goal name="insert&#39;vc.150" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="22.76" steps="64573"/></proof>
  </goal>
  <goal name="insert&#39;vc.151" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.62" steps="74474"/></proof>
  </goal>
  <goal name="insert&#39;vc.152" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="52.66" steps="138019"/></proof>
  <proof prover="6" timelimit="80"><result status="valid" time="13.14" steps="580136"/></proof>
  </goal>
  <goal name="insert&#39;vc.153" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="28.05" steps="73172"/></proof>
  </goal>
  <goal name="insert&#39;vc.154" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.63" steps="60896"/></proof>
  </goal>
  <goal name="insert&#39;vc.155" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1289"/></proof>
  </goal>
  <goal name="insert&#39;vc.156" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.45" steps="39463"/></proof>
  </goal>
  <goal name="insert&#39;vc.157" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1297"/></proof>
  </goal>
  <goal name="insert&#39;vc.158" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="682"/></proof>
  </goal>
  <goal name="insert&#39;vc.159" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.79" steps="35369"/></proof>
  </goal>
  <goal name="insert&#39;vc.160" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1307"/></proof>
  </goal>
  <goal name="insert&#39;vc.161" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="1311"/></proof>
  </goal>
  <goal name="insert&#39;vc.162" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="1315"/></proof>
  </goal>
  <goal name="insert&#39;vc.163" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.163.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.163.0.0" expl="wr ({self}`rep union {})`sibling" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.27" steps="21550"/></proof>
    <transf name="assert" proved="true" arg1="(not (mem1 p r_s.heap.rep[r_self]))">
     <goal name="insert&#39;vc.163.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.62" steps="703"/></proof>
     </goal>
     <goal name="insert&#39;vc.163.0.0.1" expl="wr ({self}`rep union {})`sibling" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.73" steps="21866"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.164" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.164.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.164.0.0" expl="wr ({self}`rep union {})`prev" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.70" steps="18135"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.165" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="73.86" steps="140813"/></proof>
  </goal>
  <goal name="insert&#39;vc.166" expl="wr ({self}`rep union {})`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.166.0" expl="wr ({self}`rep union {})`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.166.0.0" expl="wr ({self}`rep union {})`child" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.27" steps="21195"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.167" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="6" timelimit="80"><result status="valid" time="15.54" steps="593187"/></proof>
  </goal>
  <goal name="insert&#39;vc.168" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="45.85" steps="101559"/></proof>
  </goal>
  <goal name="insert&#39;vc.169" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.90" steps="47223"/></proof>
  </goal>
  <goal name="insert&#39;vc.170" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="1365"/></proof>
  </goal>
  <goal name="insert&#39;vc.171" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="37.04" steps="85606"/></proof>
  </goal>
  <goal name="insert&#39;vc.172" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1373"/></proof>
  </goal>
  <goal name="insert&#39;vc.173" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="710"/></proof>
  </goal>
  <goal name="insert&#39;vc.174" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="9.79" steps="33246"/></proof>
  </goal>
  <goal name="insert&#39;vc.175" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.175.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.175.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="675"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="insert&#39;vc.175.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi11 l_self r_self)">
      <goal name="insert&#39;vc.175.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.74" steps="1758"/></proof>
      </goal>
      <goal name="insert&#39;vc.175.0.1.0.1" expl="true case (postcondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="insert&#39;vc.175.0.1.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.175.0.1.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.40" steps="697"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.52" steps="105689"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.1" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="698"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.58" steps="109702"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.2" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.08" steps="4605"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.70" steps="113639"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.3" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.77" steps="26386"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="15.93" steps="415527"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.4" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.83" steps="26386"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="15.59" steps="418157"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.5" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="29.92" steps="31321"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="4.96" steps="369974"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.6" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="29.72" steps="31318"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="5.12" steps="369827"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.7" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="29.83" steps="31298"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="5.17" steps="369441"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="insert&#39;vc.175.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
      <goal name="insert&#39;vc.175.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.81" steps="9262"/></proof>
      </goal>
      <goal name="insert&#39;vc.175.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi11 l_pq r_pq)">
       <goal name="insert&#39;vc.175.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.81" steps="1742"/></proof>
       </goal>
       <goal name="insert&#39;vc.175.0.1.1.1.1" expl="false case (postcondition)" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="insert&#39;vc.175.0.1.1.1.1.0" expl="false case (postcondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.0" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.86" steps="18725"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.40" steps="399745"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.80" steps="27149"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="7.77" steps="461761"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.2" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.06" steps="4281"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="0.70" steps="112265"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.3" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.20" steps="28520"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="23.43" steps="543027"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.4" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.29" steps="28520"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="23.46" steps="546475"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.5" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.58" steps="31248"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.84" steps="484989"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.6" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.45" steps="32505"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.68" steps="484909"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.7" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.62" steps="31228"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.54" steps="484552"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.175.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="668"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="668"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="668"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="668"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.176" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.176.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.tag[n] = l_s5.heap.tag[n])">
    <goal name="insert&#39;vc.176.0.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="22.44" steps="55521"/></proof>
    </goal>
    <goal name="insert&#39;vc.176.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.94" steps="17647"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.key[n] = l_s5.heap.key[n])">
    <goal name="insert&#39;vc.176.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="l_result,0">
     <goal name="insert&#39;vc.176.1.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="678"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.1.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="8.66" steps="27883"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.1.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="678"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.89" steps="17647"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.tag[n] = r_s5.heap.tag[n])">
    <goal name="insert&#39;vc.176.2.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.176.2.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="678"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.2.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="8.88" steps="27974"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.2.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="678"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.38" steps="16561"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.3" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.key[n] = r_s5.heap.key[n])">
    <goal name="insert&#39;vc.176.3.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.176.3.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="678"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.3.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="8.97" steps="27974"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.3.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="678"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.3.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.37" steps="16561"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.177" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="714"/></proof>
  </goal>
  <goal name="insert&#39;vc.178" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="714"/></proof>
  </goal>
  <goal name="insert&#39;vc.179" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="714"/></proof>
  </goal>
  <goal name="insert&#39;vc.180" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="714"/></proof>
  </goal>
  <goal name="insert&#39;vc.181" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="716"/></proof>
  </goal>
  <goal name="insert&#39;vc.182" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1069"/></proof>
  </goal>
  <goal name="insert&#39;vc.183" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1079"/></proof>
  </goal>
  <goal name="insert&#39;vc.184" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.68" steps="5755"/></proof>
  </goal>
  <goal name="insert&#39;vc.185" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.185.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.185.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.185.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.185.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.31" steps="695"/></proof>
      <transf name="rewrite" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.0.0.1.0" expl="postcondition">
       <transf name="introduce_exists" >
        <goal name="insert&#39;vc.185.0.0.0.1.0.0" expl="postcondition">
        <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="30.49" steps="59861"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.185.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.185.0.0.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="35.86" steps="90739"/></proof>
        <proof prover="6" timelimit="120"><result status="valid" time="44.13" steps="3251307"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.185.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.185.0.1.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.185.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.36" steps="695"/></proof>
      <transf name="rewrite" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.1.0.1.0" expl="postcondition">
       <transf name="introduce_exists" >
        <goal name="insert&#39;vc.185.0.1.0.1.0.0" expl="postcondition">
        <proof prover="0" timelimit="80" memlimit="16000" obsolete="true"><result status="valid" time="37.98" steps="81692"/></proof>
        <proof prover="6" timelimit="80" obsolete="true"><result status="valid" time="55.33" steps="3125137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.185.0.1.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
      <proof prover="4"><result status="timeout" time="80.00" steps="9612371"/></proof>
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.1.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.185.0.1.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="28.73" steps="72840"/></proof>
        <proof prover="6" timelimit="120"><result status="valid" time="44.97" steps="3122435"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.186" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="734"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="210"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="243"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="248"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="253"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="258"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.98" steps="11930"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="349"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="218"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="576"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1449"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2720"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.17" steps="8900"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="224"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="224"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="588"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1478"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="2649"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.42" steps="10160"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="457"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="463"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="444"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="472"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="476"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="480"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="484"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="488"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="2234"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="496"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="500"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="504"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="2275"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="512"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="516"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="520"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="264"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="524"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="550"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="554"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="558"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="562"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="566"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="3275"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="574"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="578"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="582"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="3354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="590"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="594"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="598"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="292"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.23" steps="6371"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.64.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.64.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="276"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.64.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="363788"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.64.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.64.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="4660"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="4985"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="1528"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.27" steps="7098"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.28" steps="7098"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.85" steps="9218"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.85" steps="9215"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.55" steps="9175"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="274"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="274"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.4" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.64.0.4.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.4.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.86" steps="3480"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.4.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.62" steps="22898"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.4.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="1476"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.5" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.64.0.5.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.5.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.81" steps="3822"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.5.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.60" steps="30926"/></proof>
      <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.64.0.5.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.08" steps="276"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.5.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.84" steps="7231"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.5.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="1452"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="296"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.66.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.66.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.66.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="659"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.0.0.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="651"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1524"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.66.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="deleteMin&#39;vc.66.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.66.1.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="659"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.1.0.1" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="651"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.1.0.2" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1500"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="637"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="300"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="474"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="306"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.71.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.60" steps="8431"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.71.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.71.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="7825"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="311"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="667"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="703"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.90" steps="11380"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.98" steps="5581"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.85" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.86" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.87" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.88" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.14" steps="11647"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.89" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="116"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.90" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="624"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.91" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="630"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="322"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="937"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="2311"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.05" steps="6653"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.96" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.96.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="304"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.77" steps="5411"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.97" steps="5846"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="304"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="10.19" steps="31167"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="664"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="710"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="952"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2351"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.13" steps="6820"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.102" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.102.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="308"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="5563"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.02" steps="6005"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="308"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="16.31" steps="45039"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="672"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="720"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="334"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1413"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1455"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.50" steps="2315"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.107" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="780"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.108" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="735"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.109" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="739"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.110" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="792"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.111" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="796"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.112" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.30" steps="6591"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.113" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="804"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.114" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="759"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.115" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="763"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.116" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.40" steps="6664"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.117" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="820"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.118" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="775"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.119" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="779"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="368"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.52" steps="2965"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.122" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="856"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.123" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="811"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.124" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="815"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.125" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="868"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.126" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="872"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.127" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.75" steps="7605"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.128" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="880"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.129" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="835"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.130" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="839"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.131" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.79" steps="7738"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.132" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="896"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.133" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="851"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.134" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="855"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="396"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.136" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="11255"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.137" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.137.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.137.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="372"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.137.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.26" steps="932"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.137.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.137.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.69" steps="9942"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.70" steps="11118"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.41" steps="2022"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.85" steps="13487"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.06" steps="118766"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.86" steps="13487"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.02" steps="119172"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.83" steps="16997"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.04" steps="120613"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.86" steps="16984"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.05" steps="121327"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.87" steps="16987"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.08" steps="121327"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="370"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="370"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.4" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.137.0.4.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.4.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.78" steps="6734"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.4.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn l_s1 (img_rep l_s1 l_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.137.0.4.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="372"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.4.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.75" steps="20140"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.4.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.36" steps="1984"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.5" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.137.0.5.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.5.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.71" steps="7714"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.5.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.137.0.5.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="372"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.5.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.59" steps="20626"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.5.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="1960"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="400"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.139" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.139.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.139.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.139.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="911"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.139.0.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn l_s1 (img_rep l_s1 l_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.139.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="374"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.139.0.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="906"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.139.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2032"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.139.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.139.1.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.139.1.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="911"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.139.1.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.139.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="374"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.139.1.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="906"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.139.1.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2008"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.140" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="894"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.141" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="404"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.142" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="659"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="410"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.144" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.144.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.144.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.71" steps="15518"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.144.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.144.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.41" steps="15429"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.145" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="415"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="231"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="236"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.64" steps="10426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="14005"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="268"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.81" steps="15131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.66" steps="3443"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.79" steps="5029"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.62" steps="4171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.16" steps="11000"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.93" steps="34110"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="821"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="479"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="482"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="556"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="20.68" steps="91164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1794"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="319"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="319"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="569"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.94" steps="58802"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1504"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="1910"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.32.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.32.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2571"/></proof>
    <proof prover="6"><result status="valid" time="1.30" steps="144000"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.85" steps="5811"/></proof>
    <proof prover="6"><result status="valid" time="1.05" steps="139371"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2671"/></proof>
    <proof prover="6"><result status="valid" time="0.58" steps="91181"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="47.88" steps="32864"/></proof>
    <proof prover="6"><result status="valid" time="53.06" steps="1991537"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.72" steps="11123"/></proof>
    <proof prover="6"><result status="valid" time="58.35" steps="2050926"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
    <proof prover="2" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
    <proof prover="4" timelimit="120"><result status="highfailure" time="60.68" steps="6586324"/></proof>
    <proof prover="6" timelimit="160"><result status="valid" time="146.74" steps="13309562"/></proof>
    <transf name="case" proved="true" arg1="(l_pre = null /\ r_pre = r_sntl)">
     <goal name="decreaseKey&#39;vc.32.0.5.0" expl="true case (assertion)" proved="true">
     <proof prover="0" timelimit="160" memlimit="16000"><result status="valid" time="0.08" steps="324"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.32.0.5.1" expl="false case (assertion)" proved="true">
     <proof prover="0" timelimit="160" memlimit="16000"><result status="timeout" time="160.00"/></proof>
     <proof prover="6" timelimit="160"><result status="valid" time="152.96" steps="13315599"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.6" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="74.92" steps="4267175"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.7" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="125.72" steps="9288560"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="716"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="719"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="385"/></proof>
  <proof prover="6"><result status="valid" time="0.27" steps="76089"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="691"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.64" steps="26676"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.42" steps="1854"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.39.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="371"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="371"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="371"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="371"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="574"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="574"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.39.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="771"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="391"/></proof>
  <proof prover="6"><result status="valid" time="0.51" steps="84756"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="391"/></proof>
  <proof prover="6"><result status="valid" time="0.36" steps="77325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="703"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="8.59" steps="37916"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="1926"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.45.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="582"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="582"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.45.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="785"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="397"/></proof>
  <proof prover="6"><result status="valid" time="0.60" steps="89098"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="3759"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="800"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1540"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="828"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="824"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="8442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.24" steps="10254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.63.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.63.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="401"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.63.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.63.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.93" steps="5092"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="416"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.13" steps="5642"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="6.45" steps="260655"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="5.25" steps="252169"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.33" steps="333064"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.22" steps="456640"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.32" steps="328444"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.63.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
      <goal name="decreaseKey&#39;vc.63.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="912"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.63.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.63.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1844"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2381"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1878"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.34" steps="37730"/></proof>
        <proof prover="6"><result status="valid" time="12.26" steps="690766"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.74" steps="10256"/></proof>
        <proof prover="6"><result status="valid" time="0.87" steps="133036"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="51.39" steps="229996"/></proof>
        <proof prover="6"><result status="valid" time="15.18" steps="646059"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.58" steps="14703"/></proof>
        <proof prover="6"><result status="valid" time="12.58" steps="618375"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.86" steps="38983"/></proof>
        <proof prover="6"><result status="valid" time="15.59" steps="860923"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="396"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.03" steps="5013"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1194"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="2249"/></proof>
  <proof prover="6"><result status="valid" time="1.28" steps="130651"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.85" steps="3457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="25.54" steps="86634"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="2269"/></proof>
  <proof prover="6"><result status="valid" time="1.12" steps="126161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.89" steps="3530"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.04" steps="68349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="567"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="956"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="960"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="964"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.83.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.61" steps="8383"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="8.84" steps="17570"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="34.08" steps="116130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.86.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.86.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.85" steps="22610"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="984"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="988"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="992"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="996"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.91.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.91.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.67" steps="1504"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1004"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1022"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1026"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.96.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.76" steps="8585"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.03" steps="20375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.18" steps="24640"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="timeout" time="30.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.99.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.99.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.06" steps="17388"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="1046"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="1050"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="1054"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="1058"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.104.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.104.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.67" steps="1584"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="1066"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.66" steps="16527"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.107.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.107.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="597"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.107.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="1517"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.107.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.107.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.60" steps="2850"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.52" steps="13923"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="2886"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.74" steps="14621"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.74" steps="14620"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.95" steps="22090"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.01" steps="22087"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.01" steps="22078"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="588"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="630"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.111.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.111.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.37" steps="21198"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.111.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.22" steps="20475"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="630"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="470"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="473"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="552"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="6.79" steps="36832"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1445"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="1790"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="319"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="319"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="6.54" steps="33067"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1494"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1839"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.127.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.127.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2916"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.12" steps="7120"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.47" steps="2841"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="51.51" steps="43214"/></proof>
    <proof prover="6"><result status="valid" time="64.14" steps="2101071"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.23" steps="13615"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.5" expl="assertion" proved="true">
    <proof prover="6" timelimit="200"><result status="valid" time="170.79" steps="14590506"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.6" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="89.13" steps="5207590"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.7" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="86.73" steps="4974314"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="711"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="714"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="385"/></proof>
  <proof prover="6"><result status="valid" time="0.33" steps="76169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="693"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.11" steps="56020"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="2379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2244"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="391"/></proof>
  <proof prover="6"><result status="valid" time="0.49" steps="85754"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="391"/></proof>
  <proof prover="6"><result status="valid" time="0.34" steps="77192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="704"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="timeout" time="30.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.138.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3445"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.18" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="375"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.21" steps="568"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="13.09" steps="53473"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.138.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.21" steps="572"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1926"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="2338"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="397"/></proof>
  <proof prover="6"><result status="valid" time="0.54" steps="89152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1815"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="3367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="795"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1972"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="811"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="819"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.57" steps="8885"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.08" steps="9608"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.158.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.158.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="401"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.158.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.158.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.92" steps="5323"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="416"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.12" steps="5501"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="7.23" steps="278175"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="5.89" steps="265145"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.93" steps="343674"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="10.45" steps="492374"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="7.94" steps="322532"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.158.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.158.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.0" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="3.03" steps="230140"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.1" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="2.00" steps="210552"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.2" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="0.78" steps="105771"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.3" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.28" steps="36129"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.4" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.34" steps="16805"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.5" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="52.49" steps="206435"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.6" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="955"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.6.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="34.12" steps="171961"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.7" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="93.61" steps="255129"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="396"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.06" steps="5058"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1196"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="2255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="3455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="22.16" steps="67420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1207"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.62" steps="2281"/></proof>
  <proof prover="6"><result status="valid" time="1.13" steps="128961"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.91" steps="3528"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="50.16" steps="158556"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="567"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="957"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="961"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="965"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.178.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="12.75" steps="26143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.57" steps="23537"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="16.19" steps="40669"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.27" steps="8029"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="985"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.183.0" expl="wr ({self} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="588"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="993"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="997"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.26" steps="8611"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="1005"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1019"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1023"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1027"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.191.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.73" steps="21122"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.71" steps="26387"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.24" steps="32090"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.72" steps="9688"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="1047"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="decreaseKey&#39;vc.196.0" expl="wr ({self} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="1051"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1055"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1059"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.83" steps="9722"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="1067"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.13" steps="17612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.202.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.202.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="597"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.202.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="1506"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.202.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.202.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="3222"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.51" steps="13987"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.68" steps="3271"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.15" steps="15721"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.17" steps="15721"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.89" steps="22757"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.85" steps="22753"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.69" steps="22745"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="588"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="588"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="630"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.206.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.206.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="15.05" steps="28886"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decreaseKey&#39;vc.206.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.206.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="14.99" steps="28075"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="630"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="451"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="575"/></proof>
  <proof prover="6"><result status="valid" time="0.74" steps="112702"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.45" steps="21641"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1693"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="292"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="292"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="579"/></proof>
  <proof prover="6"><result status="valid" time="0.79" steps="117561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="7.06" steps="37469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="2978"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="3009"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="306"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="306"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="977"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="2827"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="516"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="312"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="314"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="314"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="1082"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="538"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="534"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="320"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.14" steps="7006"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.89" steps="4760"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="324"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.238.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.238.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="306"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.238.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="592"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.238.0.1.1" expl="precondition" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.238.0.1.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="1285"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="1696"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="1302"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="25.00" steps="85973"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.99" steps="6011"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="69.00" steps="276352"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.6" expl="VC for decreaseKey" proved="true">
       <transf name="assert" proved="true" arg1="(idRef pi l_pos r_pos)">
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.10" steps="338"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1" expl="VC for decreaseKey" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi l_handle r_handle)">
         <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.13" steps="338"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1" expl="VC for decreaseKey" proved="true">
         <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h2">
          <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0" expl="VC for decreaseKey" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0" expl="VC for decreaseKey" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h3">
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.0" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="336"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.1" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.10" steps="338"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.2" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.10" steps="338"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.3" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.08" steps="336"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.4" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.18" steps="336"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5" expl="VC for decreaseKey" proved="true">
            <transf name="eliminate_let" proved="true" >
             <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0" expl="VC for decreaseKey" proved="true">
             <transf name="instantiate" proved="true" arg1="h3" arg2="l_n,r_n">
              <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0" expl="VC for decreaseKey" proved="true">
              <transf name="destruct_rec" proved="true" arg1="Hinst">
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.0" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.11" steps="339"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.1" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.17" steps="1147"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.2" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.07" steps="336"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.3" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.11" steps="339"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.4" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.17" steps="1147"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.5" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.08" steps="336"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.6" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.08" steps="336"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.7" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.7.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.37" steps="2131"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.7.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.7.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="0.11" steps="351"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.7.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="0.99" steps="6895"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.8" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.8.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.11" steps="340"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.8.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.8.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="0.12" steps="349"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.238.0.1.1.0.6.1.1.0.0.5.0.0.8.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="0.42" steps="2383"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.7" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.30" steps="8945"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="304"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="304"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="304"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="326"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="326"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="3903"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="332"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="456"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="1901"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.59" steps="2585"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="15.57" steps="54994"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="462"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="462"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1028"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="1924"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="2648"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="17.96" steps="64149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="468"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="822"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="826"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="830"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.24" steps="5154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="6.48" steps="12640"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.25" steps="5159"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="961"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="850"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="854"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="858"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="862"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="981"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="870"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="884"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="888"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="892"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.48" steps="6284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.83" steps="13111"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.44" steps="6298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1023"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="916"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="920"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="924"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1043"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.33" steps="12731"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.282.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.282.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="502"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.282.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1071"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.282.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.282.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2176"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.95" steps="12181"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2200"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.99" steps="12725"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.65" steps="12725"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.83" steps="18497"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.78" steps="18494"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.22" steps="18492"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="496"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="496"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="496"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="496"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="526"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="526"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="531"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.286.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.286.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.55" steps="16082"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.55" steps="15534"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="534"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="269"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.67" steps="8471"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="2297"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2742"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="2374"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.90" steps="10243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.89" steps="20995"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="726"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="386"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="388"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.24" steps="13020"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="1611"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.98" steps="25710"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1701"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_self r_self)">
   <goal name="decreaseKey&#39;vc.311.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="519"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.311.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.311.1.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="decreaseKey&#39;vc.311.1.0.0" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="271"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.1" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="556"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.2" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="271"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.3" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.70" steps="19663"/></proof>
     <proof prover="6"><result status="valid" time="4.50" steps="328394"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.4" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.57" steps="3004"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.5" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.59" steps="4385"/></proof>
     <proof prover="6"><result status="valid" time="0.71" steps="105198"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.6" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.62" steps="4382"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.311.1.0.7" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.65" steps="10130"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="604"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="607"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="610"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.26" steps="30594"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1674"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.49" steps="2049"/></proof>
  <proof prover="6"><result status="valid" time="0.54" steps="94691"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="620"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.66" steps="25604"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="1749"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="2142"/></proof>
  <proof prover="6"><result status="valid" time="0.66" steps="102047"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="335"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="340"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1290"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="3238"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="688"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="351"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="348"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="1394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="718"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="712"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.82" steps="8639"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="356"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.09" steps="8428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.342.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.342.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="339"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.342.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="799"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.342.0.1.1" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
      <goal name="decreaseKey&#39;vc.342.0.1.1.0" expl="true case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.0" expl="true case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="361"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="356"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="361"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="26.27" steps="45615"/></proof>
        <proof prover="6"><result status="valid" time="7.96" steps="285067"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.15" steps="9570"/></proof>
        <proof prover="6"><result status="valid" time="0.73" steps="114185"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.57" steps="13060"/></proof>
        <proof prover="6"><result status="valid" time="0.84" steps="117827"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.6" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="9.84" steps="484988"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.21" steps="21334"/></proof>
        <proof prover="6"><result status="valid" time="8.84" steps="340646"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="decreaseKey&#39;vc.342.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.342.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="1698"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2198"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="1732"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.69" steps="30290"/></proof>
        <proof prover="6"><result status="valid" time="9.28" steps="620266"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.59" steps="7825"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.52" steps="15138"/></proof>
        <proof prover="6"><result status="valid" time="0.98" steps="134650"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.95" steps="11398"/></proof>
        <proof prover="6"><result status="valid" time="11.47" steps="545705"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.62" steps="31031"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="334"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="4609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.347" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="493"/></proof>
  <proof prover="6"><result status="valid" time="0.38" steps="92192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.348" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1113"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.349" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2101"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.350" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.76" steps="3261"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.351" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="30.15" steps="101709"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.352" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="499"/></proof>
  <proof prover="6"><result status="valid" time="0.65" steps="103448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.353" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="499"/></proof>
  <proof prover="6"><result status="valid" time="0.39" steps="93693"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.354" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="1123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.355" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="2123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.356" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.81" steps="3337"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.357" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.357.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.28" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.23" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.83" steps="7362"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="18.91" steps="66879"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="905"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.357.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.58" steps="1227"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.358" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="505"/></proof>
  <proof prover="6"><result status="valid" time="0.78" steps="109190"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.359" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="881"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.360" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="885"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.361" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="889"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.362" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.362.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.56" steps="7853"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.363" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.13" steps="7211"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.364" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="26.45" steps="87011"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.365" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.365.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.365.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.80" steps="16270"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.366" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="909"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.367" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="913"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.368" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="917"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.369" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="921"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.370" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.370.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.370.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.52" steps="1390"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.371" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="929"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.372" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="943"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.373" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="947"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.374" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="951"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.375" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.375.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.62" steps="8055"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.376" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.69" steps="10097"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.377" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="32.10" steps="107889"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.378" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.63" steps="30954"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.379" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="971"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.380" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="975"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.381" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="979"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.382" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="983"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.383" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.383.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.383.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="1470"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.384" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="991"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.385" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.83" steps="15608"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.386" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.386.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.386.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="535"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.386.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.58" steps="1401"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.386.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.386.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.60" steps="2688"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.73" steps="13208"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="2724"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.96" steps="13983"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.95" steps="13973"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.62" steps="21818"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="3.32" steps="312724"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.03" steps="21141"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="3.05" steps="307711"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.60" steps="21461"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="3.40" steps="311660"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="526"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.387" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="560"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.388" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="560"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.389" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.390" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.390.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.390.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.28" steps="20186"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.390.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="9.78" steps="18579"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.391" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.392" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="377"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.393" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.394" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.395" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="478"/></proof>
  <proof prover="6"><result status="valid" time="0.79" steps="115965"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.396" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.23" steps="15582"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.397" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.398" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1584"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.399" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.400" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.401" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="489"/></proof>
  <proof prover="6"><result status="valid" time="0.63" steps="121187"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.402" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.07" steps="21274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.403" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="1341"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.404" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1674"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.405" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.406" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.406.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_self r_self)">
    <goal name="decreaseKey&#39;vc.406.0.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="506"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.92" steps="40501"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="decreaseKey&#39;vc.406.0.1.0" expl="assertion" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.406.0.1.0.0" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="277"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.1" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="3596"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.2" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="2886"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.3" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.69" steps="3118"/></proof>
      <proof prover="6"><result status="valid" time="2.54" steps="174034"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.4" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.64" steps="2888"/></proof>
      <proof prover="6"><result status="valid" time="3.94" steps="191497"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.5" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="3111"/></proof>
      <proof prover="6"><result status="valid" time="2.67" steps="176601"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.6" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="279"/></proof>
      <proof prover="6"><result status="valid" time="0.24" steps="67835"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.7" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="279"/></proof>
      <proof prover="6"><result status="valid" time="0.26" steps="67835"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.8" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="3.92" steps="326701"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.9" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="1.57" steps="163119"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.10" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="1.83" steps="177239"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.11" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="4.10" steps="281100"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.406.0.1.0.12" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="1.81" steps="178170"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.407" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="597"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.408" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.409" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.410" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="608"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.411" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.45" steps="22096"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.412" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1659"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.413" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="2369"/></proof>
  <proof prover="6"><result status="valid" time="0.50" steps="95965"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.414" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.415" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.416" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="619"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.417" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="13.00" steps="51416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.418" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="1731"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.419" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="2347"/></proof>
  <proof prover="6"><result status="valid" time="0.58" steps="103191"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.420" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="335"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.421" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.422" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="340"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.423" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1645"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.424" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.67" steps="3350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.425" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="681"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.426" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.427" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="351"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.428" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="348"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.429" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="1802"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.430" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="697"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.431" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="705"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.432" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.433" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.81" steps="8684"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.434" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="356"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.435" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.16" steps="10008"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.436" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.437" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.437.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.437.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="339"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.437.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.437.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.88" steps="5004"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="354"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.19" steps="5215"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="6.86" steps="267451"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.53" steps="251286"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.61" steps="289361"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="7.37" steps="424400"/></proof>
       <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
        <goal name="decreaseKey&#39;vc.437.0.1.0.0.6.0" expl="true case (precondition)" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="510"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.0.0.6.1" expl="false case (precondition)" proved="true">
        <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
         <goal name="decreaseKey&#39;vc.437.0.1.0.0.6.1.0" expl="false case (true case. precondition)" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.27" steps="14458"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.437.0.1.0.0.6.1.1" expl="false case (precondition)" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="timeout" time="120.00"/></proof>
         <proof prover="6" timelimit="120"><result status="valid" time="7.71" steps="418634"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.58" steps="290326"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.437.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.437.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.0" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.48" steps="219099"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.1" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.27" steps="186656"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.2" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="0.77" steps="106827"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.3" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="11.39" steps="42334"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.4" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.43" steps="22036"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.5" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.5.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="841"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.5.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.36" steps="14637"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.6" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(not (mem1 l_n l_s.heap.rep[l_self]) /\ not (mem1 r_n r_s.heap.rep[r_self]))">
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2601"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.6.1" expl="precondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
         <goal name="decreaseKey&#39;vc.437.0.1.1.0.6.1.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="859"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.437.0.1.1.0.6.1.1" expl="precondition" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="18.68" steps="95574"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.1.0.7" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.7.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="841"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.0.7.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.45" steps="14625"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="334"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="334"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.438" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.439" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.440" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.94" steps="4715"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.441" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.442" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.37" steps="493"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.443" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1111"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.444" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.70" steps="2103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.445" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="3242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.446" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.446.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="471"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="471"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.65" steps="6919"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="471"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="10.56" steps="39660"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="886"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.446.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.45" steps="1201"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.447" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="499"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.448" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.30" steps="499"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.449" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="1122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.450" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.73" steps="2126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.451" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="3316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.452" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="57.37" steps="165297"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.452.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.02" steps="7625"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="475"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="13.05" steps="44384"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.29" steps="893"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.45" steps="1214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.453" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="505"/></proof>
  <proof prover="6"><result status="valid" time="0.72" steps="108809"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.454" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="880"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.455" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="884"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.456" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="888"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.457" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="67.07" steps="143018"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.457.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.457.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.74" steps="17876"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.458" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.14" steps="7018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.459" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.48" steps="20064"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.460" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.460.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.460.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.55" steps="1342"/></proof>
    <proof prover="6"><result status="valid" time="1.36" steps="151611"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.461" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="908"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.462" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.463" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="916"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.464" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="920"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.465" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.19" steps="8178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.466" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="928"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.467" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="942"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.468" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="946"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.469" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="950"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.470" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.470.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.470.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.72" steps="18262"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.471" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.72" steps="9360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.472" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.472.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="1417"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.473" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.473.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.57" steps="1422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.474" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="970"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.475" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.476" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="978"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.477" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="982"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.478" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.98" steps="9899"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.479" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="990"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.480" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.33" steps="16905"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.481" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.481.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.481.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="535"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.481.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.50" steps="1388"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.481.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.481.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="4" timelimit="100"><result status="valid" time="0.13" steps="454483"/></proof>
       <proof prover="6"><result status="valid" time="0.48" steps="100401"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="16.63" steps="705924"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="4" timelimit="100"><result status="valid" time="0.14" steps="500411"/></proof>
       <proof prover="6"><result status="valid" time="0.48" steps="106620"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="11.95" steps="455500"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="11.77" steps="460413"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="2.99" steps="320759"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="2.95" steps="320361"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="3.21" steps="330642"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="526"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="526"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.482" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="560"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.483" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="560"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.484" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.485" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.485.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.485.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="12.77" steps="27314"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.485.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="12.49" steps="26284"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.486" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.487" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.488" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.489" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="226"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.490" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="472"/></proof>
  <proof prover="6"><result status="valid" time="0.66" steps="105794"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.491" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="10987"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.492" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="2365"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.493" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1679"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.494" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="232"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.495" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="232"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.496" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="474"/></proof>
  <proof prover="6"><result status="valid" time="0.69" steps="109621"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.497" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.497.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="220"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2108"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="220"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2269"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="220"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="352"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.95" steps="10139"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.498" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="2521"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.499" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="2303"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.500" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="238"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.501" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.502" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.503" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="857"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.504" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="2628"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.505" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.506" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.507" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.508" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.509" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="953"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.510" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.511" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="444"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.512" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.513" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.04" steps="6026"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.514" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="262"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.515" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="4122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.516" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.517" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.517.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.517.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="246"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.517.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="502"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.517.0.1.1" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
      <goal name="decreaseKey&#39;vc.517.0.1.1.0" expl="true case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.0" expl="true case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="268"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="266"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="268"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="12.99" steps="25902"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.35" steps="6870"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.74" steps="9760"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.28" steps="12805"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.73" steps="9736"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="decreaseKey&#39;vc.517.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.517.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1166"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1666"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1183"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.21" steps="12030"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.05" steps="5738"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.28" steps="8595"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.54" steps="9177"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.37" steps="8577"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="244"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="244"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="244"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="244"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.518" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.519" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.520" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="3682"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.521" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="272"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.522" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="396"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.523" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="944"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.524" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1780"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.525" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="2419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.526" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="16.18" steps="55801"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.527" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.528" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.529" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="953"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.530" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1801"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.531" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="2484"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.532" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="16.03" steps="54349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.533" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.534" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="753"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.535" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="757"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.536" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="761"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.537" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.38" steps="4862"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.538" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="859"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.539" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.37" steps="4868"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.540" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="867"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.541" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="781"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.542" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="785"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.543" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="789"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.544" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="793"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.545" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="887"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.546" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="801"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.547" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="815"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.548" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="819"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.549" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="823"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.550" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.63" steps="5996"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.551" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="921"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.552" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.60" steps="5998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.553" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="929"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.554" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="843"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.555" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="847"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.556" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="851"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.557" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="855"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.558" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="949"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.559" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="863"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.560" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.21" steps="12232"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.561" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.561.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.561.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="442"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.561.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="977"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.561.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.561.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="2036"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.93" steps="11684"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.53" steps="2060"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.77" steps="12370"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.77" steps="12370"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.09" steps="17857"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.07" steps="17854"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.08" steps="18703"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="436"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="436"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="436"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="436"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.562" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="466"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.563" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="466"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.564" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="471"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.565" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.565.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.565.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.23" steps="14639"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.565.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.08" steps="14129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.566" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="474"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.567" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.568" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.569" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="3103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.570" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="1546"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.571" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="1192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.572" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="146"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.573" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="146"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.574" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.575" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.575.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="134"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="134"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="134"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="1336"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="134"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="254"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="254"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="254"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.576" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="2016"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.577" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="2023"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.578" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.579" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="294"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.580" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.581" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="302"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.582" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="306"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.583" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.584" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="314"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.585" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.586" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.587" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="326"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.588" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.589" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="334"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.590" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.591" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="342"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.592" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="356"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.593" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.594" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="364"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.595" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.596" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="372"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.597" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.598" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="380"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.599" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="384"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.600" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="388"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.601" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.602" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="396"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.603" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="432"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.604" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="404"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.605" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.85" steps="4967"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.606" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.606.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.606.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="194"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="41.70" steps="182484"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="192"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="192"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="192"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="192"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.607" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.608" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.609" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.610" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.610.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.610.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.31" steps="3774"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.610.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="3261"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.611" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="222"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_coupling_PQUEUE_REL" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="boundary_frames_coupling_PQUEUE_REL.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="105.14" steps="289308"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 s s&#39; rho l_pq r_pq)">
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="626"/></proof>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1" proved="true">
     <transf name="assert" proved="true" arg1="(s.pool = t27.pool /\ s&#39;.pool = t&#39;.pool)">
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="41"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1" proved="true">
      <transf name="assert" proved="true" arg1="(img_rep s s.pool = img_rep t27 t27.pool)">
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="extensionality1">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="21.10" steps="68239"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="15.42" steps="49767"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1" proved="true">
       <transf name="assert" proved="true" arg1="(img_rep s&#39; s&#39;.pool = img_rep t&#39; t&#39;.pool)">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="extensionality1">
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="36.63" steps="116452"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="47.84" steps="159946"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.0" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.62" steps="23357"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.1" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.04" steps="97039"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2" proved="true">
          <transf name="assert" proved="true" arg1="(idRgn rho (rgnSubK s.heap.rep[l_pq] s.alloct Node) (rgnSubK s&#39;.heap.rep[r_pq] s&#39;.alloct Node))" arg2="as" arg3="G">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.89" steps="38096"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1" proved="true">
           <transf name="unfold" proved="true" arg1="idRgn" arg2="in" arg3="G">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0" proved="true">
            <transf name="destruct_rec" proved="true" arg1="G">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0" proved="true">
             <transf name="inline_goal" proved="true" >
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0" proved="true">
               <transf name="instantiate" proved="true" arg1="G2" arg2="x">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0" proved="true">
                <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="76.75" steps="241260"/></proof>
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
                  <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="50.91" steps="164122"/></proof>
                   <proof prover="6"><result status="valid" time="72.79" steps="2564405"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="60"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1" proved="true">
               <transf name="instantiate" proved="true" arg1="G2" arg2="x">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.1" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="66.50" steps="234697"/></proof>
                   <proof prover="6"><result status="valid" time="83.85" steps="2062003"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2" proved="true">
                   <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0" proved="true">
                    <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H20">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0" proved="true">
                     <transf name="instantiate" proved="true" arg1="H20" arg2="x">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0.0" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="Hinst">
                       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0.0.0" proved="true">
                       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="46.96" steps="161115"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.59" steps="138504"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.2" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="43.40" steps="139631"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3" proved="true">
               <transf name="instantiate" proved="true" arg1="G1" arg2="y">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="127.54" steps="440380"/></proof>
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0" expl="destruct premise" proved="true">
                  <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.97" steps="150816"/></proof>
                   <transf name="split_vc" proved="true" >
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.0" proved="true">
                    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="58"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.1" proved="true">
                    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.73" steps="112823"/></proof>
                    <proof prover="6"><result status="valid" time="61.51" steps="1687905"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2" proved="true">
                    <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H21">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0" proved="true">
                     <transf name="instantiate" proved="true" arg1="H21" arg2="y">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0.0" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="Hinst">
                       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0.0.0" proved="true">
                       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="28.10" steps="91940"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="59.30" steps="195977"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.4" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="58"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.5" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="58"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.key[l_n] = t27.heap.key[l_n] /\ s&#39;.heap.key[r_n] = t&#39;.heap.key[r_n])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="66.29" steps="229651"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3.1" proved="true">
           <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="132.75" steps="422983"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.4" proved="true">
          <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="130.33" steps="437432"/></proof>
          <proof prover="4" timelimit="200"><result status="highfailure" time="105.95" steps="10851810"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.prev[l_n] = t27.heap.prev[l_n] /\ s&#39;.heap.prev[r_n] = t&#39;.heap.prev[r_n])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.prev[l_n] t27.heap.prev[l_n])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="33.71" steps="109566"/></proof>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.prev[r_n] t&#39;.heap.prev[r_n])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0" expl="asserted formula" proved="true">
             <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H24">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="H24" arg2="r_n">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="70.71" steps="197205"/></proof>
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="70.52" steps="197205"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="889"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1" proved="true">
           <transf name="assert" proved="true" arg1="(s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="46.14" steps="136939"/></proof>
            <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.10" steps="7499"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="592"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1" proved="true">
            <transf name="assert" proved="true" arg1="(idRef rho s.heap.prev[l_n] s&#39;.heap.prev[r_n] /\ s.heap.prev[l_n] &lt;&gt; null /\ s&#39;.heap.prev[r_n] &lt;&gt; null \/ s.heap.prev[l_n] = null /\ s&#39;.heap.prev[r_n] = s&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="151.00" steps="460200"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1" proved="true">
             <transf name="destruct" proved="true" arg1="h">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="59.36" steps="179958"/></proof>
              <transf name="subst_all" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h1">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0" proved="true">
                <transf name="destruct" proved="true" arg1="h2">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0" proved="true">
                 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h3">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0.0" proved="true">
                  <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h2">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0.0.0" proved="true">
                   <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="129.54" steps="374228"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.1" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="76"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.sibling[l_n] = t27.heap.sibling[l_n] /\ s&#39;.heap.sibling[r_n] = t&#39;.heap.sibling[r_n] /\ s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.sibling[l_n] t27.heap.sibling[l_n] /\ idRef pi&#39; s&#39;.heap.sibling[r_n] t&#39;.heap.sibling[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="34.42" steps="117702"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="94.11" steps="323988"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.2" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.42" steps="7450"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.1" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="1295"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.sibling[l_n] s&#39;.heap.sibling[r_n] /\ s.heap.sibling[l_n] &lt;&gt; null /\ s&#39;.heap.sibling[r_n] &lt;&gt; s&#39;.heap.sntl[r_pq] \/ s.heap.sibling[l_n] = null /\ s&#39;.heap.sibling[r_n] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h5">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h5">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.31" steps="8145"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.26" steps="7287"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.4" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="timeout" time="153.00"/></proof>
              <transf name="eliminate_let" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0" expl="asserted formula" proved="true">
               <transf name="destruct_rec" proved="true" arg1="h5">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0" expl="asserted formula" proved="true">
                <transf name="instantiate" proved="true" arg1="h5" arg2="l_n,r_n">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0" expl="asserted formula" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="Hinst">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.0" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="318"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.1" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.54" steps="10499"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.2" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="51.64" steps="206222"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.3" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="977"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.4" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.30" steps="13280"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.5" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="69.17" steps="243592"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.6" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="76"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.7" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="98"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.8" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.9" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.10" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.11" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.12" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.13" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.14" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="92"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.1" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.79" steps="78591"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.1" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="78"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.child[l_n] = t27.heap.child[l_n] /\ s&#39;.heap.child[r_n] = t&#39;.heap.child[r_n] /\ s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.child[l_n] t27.heap.child[l_n] /\ idRef pi&#39; s&#39;.heap.child[r_n] t&#39;.heap.child[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="49.05" steps="167667"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="41.26" steps="130042"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.2" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="7450"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.1" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="1295"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.child[l_n] s&#39;.heap.child[r_n] /\ s.heap.child[l_n] &lt;&gt; null /\ s&#39;.heap.child[r_n] &lt;&gt; s&#39;.heap.sntl[r_pq] \/ s.heap.child[l_n] = null /\ s&#39;.heap.child[r_n] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h5">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h5">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="7247"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.42" steps="7242"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.4" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.5" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="73.68" steps="235464"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.1" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="78"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.2" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="26"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.3" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="26"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.0" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.20" steps="6238"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.1" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.94" steps="14424"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.2" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="30.65" steps="94225"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.0" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.07" steps="5782"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.1" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.58" steps="18936"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.2" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="91.49" steps="282384"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pqueueR_is_refperm_monotonic" proved="true">
 <transf name="unfold" proved="true" arg1="pqueueR">
  <goal name="pqueueR_is_refperm_monotonic.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="pqueueR_is_refperm_monotonic.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pqueueR_is_refperm_monotonic.0.0.0" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="87"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.08" steps="279123"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 s t29 pi30 l_pq r_pq)" arg2="as" arg3="Hcoupling">
     <goal name="pqueueR_is_refperm_monotonic.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="36"/></proof>
     </goal>
     <goal name="pqueueR_is_refperm_monotonic.0.0.1.1" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="Hcoupling">
      <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0" proved="true">
      <transf name="destruct_rec" proved="true" arg1="Hcoupling">
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.0" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.1" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.2" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.3" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="37"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.4" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="1203"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.0" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="42"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.1" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="170"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.2" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="214"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling4" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="3501"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling3" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="3501"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling2" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="3964"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling1" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="3964"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.55" steps="3964"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.2" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="54838"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.3" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="54838"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.4" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="54838"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.5" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.03" steps="54838"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main" proved="true">
 <goal name="main&#39;vc" expl="VC for main" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="main&#39;vc.1" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.2" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.3" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="59"/></proof>
  </goal>
  <goal name="main&#39;vc.4" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="main&#39;vc.5" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.73" steps="4134"/></proof>
  </goal>
  <goal name="main&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="104"/></proof>
  </goal>
  <goal name="main&#39;vc.7" expl="array size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="main&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="1346"/></proof>
  </goal>
  <goal name="main&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
  <goal name="main&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.16" steps="6033"/></proof>
  </goal>
  <goal name="main&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="1202"/></proof>
  </goal>
  <goal name="main&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1506"/></proof>
  </goal>
  <goal name="main&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="1851"/></proof>
  </goal>
  <goal name="main&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="207"/></proof>
  </goal>
  <goal name="main&#39;vc.15" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="530"/></proof>
  </goal>
  <goal name="main&#39;vc.16" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="206"/></proof>
  </goal>
  <goal name="main&#39;vc.17" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="206"/></proof>
  </goal>
  <goal name="main&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="241"/></proof>
  </goal>
  <goal name="main&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.97" steps="31566"/></proof>
  </goal>
  <goal name="main&#39;vc.20" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="683"/></proof>
  </goal>
  <goal name="main&#39;vc.21" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="246"/></proof>
  </goal>
  <goal name="main&#39;vc.22" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="246"/></proof>
  </goal>
  <goal name="main&#39;vc.23" expl="ins := insert(queue,initDist,source)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.23.0" expl="ins := insert(queue,initDist,source)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.23.0.0" expl="ins := insert(queue,initDist,source)" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.27" steps="5942"/></proof>
    </goal>
    <goal name="main&#39;vc.23.0.1" expl="ins := insert(queue,initDist,source)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.23.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="226"/></proof>
     </goal>
     <goal name="main&#39;vc.23.0.1.1" expl="ins := insert(queue,initDist,source)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.23.0.1.1.0" expl="ins := insert(queue,initDist,source)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.23.0.1.1.0.0" expl="ins := insert(queue,initDist,source)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.48" steps="9121"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.23.0.2" expl="ins := insert(queue,initDist,source)" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.27" steps="5453"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="305"/></proof>
  </goal>
  <goal name="main&#39;vc.25" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="902"/></proof>
  </goal>
  <goal name="main&#39;vc.26" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="302"/></proof>
  </goal>
  <goal name="main&#39;vc.27" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="302"/></proof>
  </goal>
  <goal name="main&#39;vc.28" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="303"/></proof>
  </goal>
  <goal name="main&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="308"/></proof>
  </goal>
  <goal name="main&#39;vc.30" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2095"/></proof>
  </goal>
  <goal name="main&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="67.95" steps="113255"/></proof>
  </goal>
  <goal name="main&#39;vc.32" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="21.14" steps="48185"/></proof>
  </goal>
  <goal name="main&#39;vc.33" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.33.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.33.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="74.55" steps="108636"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.34" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="90.28" steps="168471"/></proof>
  </goal>
  <goal name="main&#39;vc.35" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="53.98" steps="100390"/></proof>
  </goal>
  <goal name="main&#39;vc.36" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="37.30" steps="70631"/></proof>
  </goal>
  <goal name="main&#39;vc.37" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="52.38" steps="108109"/></proof>
  </goal>
  <goal name="main&#39;vc.38" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="25.69" steps="54263"/></proof>
  </goal>
  <goal name="main&#39;vc.39" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="66.63" steps="114674"/></proof>
  </goal>
  <goal name="main&#39;vc.40" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="45.16" steps="77661"/></proof>
  </goal>
  <goal name="main&#39;vc.41" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="59.29" steps="127705"/></proof>
  </goal>
  <goal name="main&#39;vc.42" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.98" steps="14443"/></proof>
  </goal>
  <goal name="main&#39;vc.43" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="49.27" steps="96090"/></proof>
  </goal>
  <goal name="main&#39;vc.44" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.28" steps="14739"/></proof>
  </goal>
  <goal name="main&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="341"/></proof>
  </goal>
  <goal name="main&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="71.46" steps="168431"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.46.0" expl="loop invariant init" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.46.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.87" steps="14315"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="46.32" steps="147850"/></proof>
  </goal>
  <goal name="main&#39;vc.48" expl="loop invariant init" proved="true">
  <transf name="case" proved="true" arg1="(n = ins)">
   <goal name="main&#39;vc.48.0" expl="true case (loop invariant init)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="351"/></proof>
   <proof prover="4"><result status="valid" time="0.06" steps="243118"/></proof>
   <proof prover="6" timelimit="80"><result status="valid" time="0.20" steps="55678"/></proof>
   </goal>
   <goal name="main&#39;vc.48.1" expl="false case (loop invariant init)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.57" steps="8157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.49" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="343"/></proof>
  </goal>
  <goal name="main&#39;vc.50" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.06" steps="28427"/></proof>
  </goal>
  <goal name="main&#39;vc.51" expl="loop invariant init" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem1 dist (union s.pool (img_rep s s.pool))))">
   <goal name="main&#39;vc.51.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="union_def">
    <goal name="main&#39;vc.51.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="main&#39;vc.51.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="322"/></proof>
     </goal>
     <goal name="main&#39;vc.51.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="64.31" steps="136365"/></proof>
     <proof prover="4"><result status="valid" time="0.70" steps="1273876"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.51.1" expl="loop invariant init" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.52" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.37" steps="33139"/></proof>
  </goal>
  <goal name="main&#39;vc.53" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="348"/></proof>
  </goal>
  <goal name="main&#39;vc.54" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.25" steps="1149"/></proof>
  </goal>
  <goal name="main&#39;vc.55" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.56" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.57" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.58" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="369"/></proof>
  </goal>
  <goal name="main&#39;vc.59" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="369"/></proof>
  </goal>
  <goal name="main&#39;vc.60" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.77" steps="1484129"/></proof>
  </goal>
  <goal name="main&#39;vc.61" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.62" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.63" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.64" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.65" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.66" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.67" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.68" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.77" steps="48198"/></proof>
  </goal>
  <goal name="main&#39;vc.69" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="union_def">
   <goal name="main&#39;vc.69.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.69.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="397"/></proof>
    </goal>
    <goal name="main&#39;vc.69.0.1" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures1">
     <goal name="main&#39;vc.69.0.1.0" expl="assertion" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Ensures1">
      <goal name="main&#39;vc.69.0.1.0.0" expl="assertion" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="1.51" steps="168651"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.70" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="428"/></proof>
  </goal>
  <goal name="main&#39;vc.71" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.42" steps="1353"/></proof>
  </goal>
  <goal name="main&#39;vc.72" expl="i := dist.{minTag} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.86" steps="4176"/></proof>
  </goal>
  <goal name="main&#39;vc.73" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="436"/></proof>
  </goal>
  <goal name="main&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="1370"/></proof>
  </goal>
  <goal name="main&#39;vc.75" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.87" steps="4186"/></proof>
  </goal>
  <goal name="main&#39;vc.76" expl="array size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="466"/></proof>
  </goal>
  <goal name="main&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="468"/></proof>
  </goal>
  <goal name="main&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="475"/></proof>
  </goal>
  <goal name="main&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.80" steps="22786"/></proof>
  </goal>
  <goal name="main&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.36" steps="2739"/></proof>
  </goal>
  <goal name="main&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.79" steps="4242"/></proof>
  </goal>
  <goal name="main&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.92" steps="5092"/></proof>
  </goal>
  <goal name="main&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="481"/></proof>
  </goal>
  <goal name="main&#39;vc.84" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.45" steps="1437"/></proof>
  </goal>
  <goal name="main&#39;vc.85" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="476"/></proof>
  </goal>
  <goal name="main&#39;vc.86" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="476"/></proof>
  </goal>
  <goal name="main&#39;vc.87" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.87.0" expl="isEmp := isEmpty(queue)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.87.0.0" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.07" steps="10128"/></proof>
    </goal>
    <goal name="main&#39;vc.87.0.1" expl="isEmp := isEmpty(queue)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.87.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="446"/></proof>
     </goal>
     <goal name="main&#39;vc.87.0.1.1" expl="isEmp := isEmpty(queue)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.87.0.1.1.0" expl="isEmp := isEmpty(queue)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.87.0.1.1.0.0" expl="isEmp := isEmpty(queue)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.62" steps="78410"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.87.0.2" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.79" steps="12137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.88" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.68" steps="7993"/></proof>
  </goal>
  <goal name="main&#39;vc.89" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.51" steps="15533"/></proof>
  </goal>
  <goal name="main&#39;vc.90" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.55" steps="23631"/></proof>
  </goal>
  <goal name="main&#39;vc.91" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.91.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.91.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.64" steps="23219"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.92" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.07" steps="23891"/></proof>
  </goal>
  <goal name="main&#39;vc.93" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.29" steps="25732"/></proof>
  </goal>
  <goal name="main&#39;vc.94" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.26" steps="25748"/></proof>
  </goal>
  <goal name="main&#39;vc.95" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.46" steps="23922"/></proof>
  </goal>
  <goal name="main&#39;vc.96" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.28" steps="23939"/></proof>
  </goal>
  <goal name="main&#39;vc.97" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.87" steps="32438"/></proof>
  </goal>
  <goal name="main&#39;vc.98" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.30" steps="23973"/></proof>
  </goal>
  <goal name="main&#39;vc.99" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.38" steps="23984"/></proof>
  </goal>
  <goal name="main&#39;vc.100" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.38" steps="23954"/></proof>
  </goal>
  <goal name="main&#39;vc.101" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.94" steps="24012"/></proof>
  </goal>
  <goal name="main&#39;vc.102" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.08" steps="53680"/></proof>
  </goal>
  <goal name="main&#39;vc.103" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="520"/></proof>
  </goal>
  <goal name="main&#39;vc.104" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.104.0" expl="loop invariant init" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.104.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.59" steps="33409"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.105" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.59" steps="6277"/></proof>
  </goal>
  <goal name="main&#39;vc.106" expl="loop invariant init" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem1 dist (union s.pool (img_rep s s.pool))))">
   <goal name="main&#39;vc.106.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="34.21" steps="49675"/></proof>
   <transf name="rewrite" proved="true" arg1="union_def">
    <goal name="main&#39;vc.106.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="main&#39;vc.106.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="417603"/></proof>
     </goal>
     <goal name="main&#39;vc.106.0.0.1" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.37" steps="632058"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.106.1" expl="loop invariant init" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.29" steps="533"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.107" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="36.31" steps="124417"/></proof>
  </goal>
  <goal name="main&#39;vc.108" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="524"/></proof>
  </goal>
  <goal name="main&#39;vc.109" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="24.17" steps="49954"/></proof>
  </goal>
  <goal name="main&#39;vc.110" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.66" steps="57449"/></proof>
  </goal>
  <goal name="main&#39;vc.111" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="527"/></proof>
  </goal>
  <goal name="main&#39;vc.112" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="536"/></proof>
  </goal>
  <goal name="main&#39;vc.113" expl="currEdge := get(gEdges,i) ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.114" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="563"/></proof>
  </goal>
  <goal name="main&#39;vc.115" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="554"/></proof>
  </goal>
  <goal name="main&#39;vc.116" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.63" steps="1745"/></proof>
  </goal>
  <goal name="main&#39;vc.117" expl="d := dist.{startV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="1701"/></proof>
  </goal>
  <goal name="main&#39;vc.118" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.119" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.120" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="1807"/></proof>
  </goal>
  <goal name="main&#39;vc.121" expl="d := dist.{endV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="1709"/></proof>
  </goal>
  <goal name="main&#39;vc.122" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.33" steps="2193"/></proof>
  </goal>
  <goal name="main&#39;vc.123" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.61" steps="1824"/></proof>
  </goal>
  <goal name="main&#39;vc.124" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.125" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.126" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.127" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="577"/></proof>
  </goal>
  <goal name="main&#39;vc.128" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. mem1 x (union (pool s) (img_rep s s.pool)) -&gt; x \: s.alloct -&gt; s.alloct[x] = Node \/ s.alloct[x] = Pqueue)">
   <goal name="main&#39;vc.128.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.128.0.0" expl="asserted formula" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures8">
     <goal name="main&#39;vc.128.0.0.0" expl="asserted formula" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Ensures8">
      <goal name="main&#39;vc.128.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="65.25" steps="92203"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="19.54" steps="1271612"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.128.1" expl="assertion" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.15" steps="7862"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.129" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.62" steps="2085"/></proof>
  </goal>
  <goal name="main&#39;vc.130" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.85" steps="15461"/></proof>
  </goal>
  <goal name="main&#39;vc.131" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="668"/></proof>
  </goal>
  <goal name="main&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="679"/></proof>
  </goal>
  <goal name="main&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.30" steps="58434"/></proof>
  </goal>
  <goal name="main&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="4503"/></proof>
  </goal>
  <goal name="main&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.41" steps="6216"/></proof>
  </goal>
  <goal name="main&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.46" steps="7445"/></proof>
  </goal>
  <goal name="main&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.24" steps="685"/></proof>
  </goal>
  <goal name="main&#39;vc.138" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="2151"/></proof>
  </goal>
  <goal name="main&#39;vc.139" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="676"/></proof>
  </goal>
  <goal name="main&#39;vc.140" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="676"/></proof>
  </goal>
  <goal name="main&#39;vc.141" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.141.0" expl="isEmp := isEmpty(queue)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.141.0.0" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.41" steps="15476"/></proof>
    </goal>
    <goal name="main&#39;vc.141.0.1" expl="isEmp := isEmpty(queue)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.141.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="640"/></proof>
     </goal>
     <goal name="main&#39;vc.141.0.1.1" expl="isEmp := isEmpty(queue)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.141.0.1.1.0" expl="isEmp := isEmpty(queue)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.141.0.1.1.0.0" expl="isEmp := isEmpty(queue)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="73.34" steps="132195"/></proof>
       <proof prover="4"><result status="valid" time="5.39" steps="3572773"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="10.41" steps="476331"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.141.0.2" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.15" steps="18285"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.142" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.87" steps="10295"/></proof>
  </goal>
  <goal name="main&#39;vc.143" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.12" steps="23923"/></proof>
  </goal>
  <goal name="main&#39;vc.144" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="43.05" steps="67388"/></proof>
  </goal>
  <goal name="main&#39;vc.145" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.145.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.145.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="40.01" steps="52355"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.146" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.22" steps="67200"/></proof>
  </goal>
  <goal name="main&#39;vc.147" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.47" steps="63833"/></proof>
  </goal>
  <goal name="main&#39;vc.148" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.30" steps="63871"/></proof>
  </goal>
  <goal name="main&#39;vc.149" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.41" steps="64072"/></proof>
  </goal>
  <goal name="main&#39;vc.150" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="42.37" steps="67261"/></proof>
  </goal>
  <goal name="main&#39;vc.151" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.67" steps="67316"/></proof>
  </goal>
  <goal name="main&#39;vc.152" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="40.84" steps="60153"/></proof>
  </goal>
  <goal name="main&#39;vc.153" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="41.55" steps="45673"/></proof>
  </goal>
  <goal name="main&#39;vc.154" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="42.88" steps="63967"/></proof>
  </goal>
  <goal name="main&#39;vc.155" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="48.31" steps="70204"/></proof>
  </goal>
  <goal name="main&#39;vc.156" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="51.27" steps="81398"/></proof>
  </goal>
  <goal name="main&#39;vc.157" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="716"/></proof>
  </goal>
  <goal name="main&#39;vc.158" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.158.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.158.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="106.88" steps="146922"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.159" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.74" steps="23304"/></proof>
  </goal>
  <goal name="main&#39;vc.160" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.74" steps="1324440"/></proof>
  </goal>
  <goal name="main&#39;vc.161" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.03" steps="28529"/></proof>
  </goal>
  <goal name="main&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="733"/></proof>
  </goal>
  <goal name="main&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.25" steps="43963"/></proof>
  </goal>
  <goal name="main&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.52" steps="13132"/></proof>
  </goal>
  <goal name="main&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="724"/></proof>
  </goal>
  <goal name="main&#39;vc.166" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="724"/></proof>
  </goal>
  <goal name="main&#39;vc.167" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.168" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.169" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.170" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.171" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="571"/></proof>
  </goal>
  <goal name="main&#39;vc.172" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.173" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.174" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.175" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.176" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.177" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.178" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.179" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.180" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.181" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.182" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.183" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.184" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.185" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.186" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.188.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.61" steps="1832"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.189" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="590"/></proof>
  </goal>
  <goal name="main&#39;vc.190" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.191" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="589"/></proof>
  </goal>
  <goal name="main&#39;vc.192" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.193" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="588"/></proof>
  </goal>
  <goal name="main&#39;vc.194" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.195" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.196" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.197" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.198" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.199" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.200" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.201" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="543"/></proof>
  </goal>
  <goal name="main&#39;vc.202" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.203" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.204" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.205" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.206" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.207" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.208" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.209" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.210" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.211" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.212" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.213" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.214" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.215" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.216" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.217" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.218" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.218.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.218.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.55" steps="1720"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.219" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="561"/></proof>
  </goal>
  <goal name="main&#39;vc.220" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.221" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.222" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="560"/></proof>
  </goal>
  <goal name="main&#39;vc.223" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.224" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.225" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.226" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="436"/></proof>
  </goal>
  <goal name="main&#39;vc.227" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.44" steps="1367"/></proof>
  </goal>
  <goal name="main&#39;vc.228" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="438"/></proof>
  </goal>
  <goal name="main&#39;vc.229" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="438"/></proof>
  </goal>
  <goal name="main&#39;vc.230" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="439"/></proof>
  </goal>
  <goal name="main&#39;vc.231" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.98" steps="4844"/></proof>
  </goal>
  <goal name="main&#39;vc.232" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.23" steps="9437"/></proof>
  </goal>
  <goal name="main&#39;vc.233" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="13.25" steps="42921"/></proof>
  </goal>
  <goal name="main&#39;vc.234" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.78" steps="43202"/></proof>
  </goal>
  <goal name="main&#39;vc.235" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.62" steps="39520"/></proof>
  </goal>
  <goal name="main&#39;vc.236" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.82" steps="41733"/></proof>
  </goal>
  <goal name="main&#39;vc.237" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.47" steps="41764"/></proof>
  </goal>
  <goal name="main&#39;vc.238" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.81" steps="38602"/></proof>
  </goal>
  <goal name="main&#39;vc.239" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.94" steps="38662"/></proof>
  </goal>
  <goal name="main&#39;vc.240" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.67" steps="38042"/></proof>
  </goal>
  <goal name="main&#39;vc.241" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.91" steps="39376"/></proof>
  </goal>
  <goal name="main&#39;vc.242" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.88" steps="38760"/></proof>
  </goal>
  <goal name="main&#39;vc.243" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.39" steps="45248"/></proof>
  </goal>
  <goal name="main&#39;vc.244" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.39" steps="41958"/></proof>
  </goal>
  <goal name="main&#39;vc.245" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="13.15" steps="44543"/></proof>
  </goal>
  <goal name="main&#39;vc.246" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="472"/></proof>
  </goal>
  <goal name="main&#39;vc.247" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.247.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.247.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.00" steps="46744"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.248" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.67" steps="50230"/></proof>
  </goal>
  <goal name="main&#39;vc.249" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.92" steps="3964"/></proof>
  </goal>
  <goal name="main&#39;vc.250" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="474"/></proof>
  </goal>
  <goal name="main&#39;vc.251" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="32.70" steps="90349"/></proof>
  </goal>
  <goal name="main&#39;vc.252" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="483"/></proof>
  </goal>
  <goal name="main&#39;vc.253" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.55" steps="43430"/></proof>
  </goal>
  <goal name="main&#39;vc.254" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="478"/></proof>
  </goal>
  <goal name="main&#39;vc.255" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="366"/></proof>
  </goal>
  <goal name="main&#39;vc.256" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="367"/></proof>
  </goal>
  <goal name="main&#39;vc.257" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.258" expl="wr (pool union pool`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.258.0" expl="wr (pool union pool`rep)`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.258.0.0" expl="wr (pool union pool`rep)`slots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.33" steps="23953"/></proof>
    <proof prover="4"><result status="valid" time="0.60" steps="1160455"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="12.88" steps="1027081"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.259" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.259.0" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.259.0.0" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="25.87" steps="50316"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.260" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.260.0" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.260.0.0" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.29" steps="32574"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.261" expl="wr (pool union pool`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.261.0" expl="wr (pool union pool`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.68" steps="32399"/></proof>
   <proof prover="4"><result status="valid" time="0.75" steps="1286974"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.262" expl="wr (pool union pool`rep)`prev" proved="true">
  <proof prover="4"><result status="valid" time="0.80" steps="1229257"/></proof>
  </goal>
  <goal name="main&#39;vc.263" expl="wr ({} union pool union pool`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="61.16" steps="80801"/></proof>
  <proof prover="4"><result status="valid" time="3.26" steps="2288159"/></proof>
  </goal>
  <goal name="main&#39;vc.264" expl="wr (pool union pool`rep)`child" proved="true">
  <proof prover="4"><result status="valid" time="0.86" steps="1231193"/></proof>
  </goal>
  <goal name="main&#39;vc.265" expl="wr ({} union pool union pool union pool`rep)`rep" proved="true">
  <proof prover="4"><result status="valid" time="3.97" steps="2399600"/></proof>
  </goal>
  <goal name="main&#39;vc.266" expl="wr (pool union pool`rep)`tag" proved="true">
  <proof prover="4"><result status="valid" time="0.85" steps="1276064"/></proof>
  </goal>
  <goal name="main&#39;vc.267" expl="wr ({} union pool union pool`rep)`size" proved="true">
  <proof prover="4"><result status="valid" time="3.98" steps="2399204"/></proof>
  </goal>
  <goal name="main&#39;vc.268" expl="wr (pool union pool`rep)`length" proved="true">
  <proof prover="4"><result status="valid" time="0.88" steps="1266511"/></proof>
  </goal>
  <goal name="main&#39;vc.269" expl="wr (pool union pool`rep)`key" proved="true">
  <proof prover="4"><result status="valid" time="0.90" steps="1279016"/></proof>
  </goal>
  <goal name="main&#39;vc.270" expl="wr ({} union pool union pool`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.16" steps="33482"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main_Link" proved="true">
 <goal name="pqueuePub_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="4"/></proof>
 </goal>
 <goal name="left_pqueueI_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="141"/></proof>
 </goal>
 <goal name="right_pqueueI_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="146"/></proof>
 </goal>
 <goal name="pqueueR_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.87" steps="7610"/></proof>
 </goal>
</theory>
</file>
</why3session>
