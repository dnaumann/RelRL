module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  use tiling_theory.Tiling_theory
  
  type reftype = 
    | IntArray
    | IntArray2
  
  type heap = {
    mutable tDlength : M.t int ;
    mutable tDslots : M.t (A.array reference) ;
    mutable length : M.t int ;
    mutable slots : M.t (A.array int)
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype ;
    mutable m : int ;
    mutable n : int ;
    mutable a2 : reference ;
    mutable a1 : reference
  }invariant { not (null \: alloct) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = IntArray) ->
           (((p \: heap.length) /\ (p \: heap.slots)) /\ (((heap.length[p]) >= 0) /\ ((heap.length[p]) = (A.length (heap.slots[p])))))) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = IntArray2) ->
           (((p \: heap.tDlength) /\ (p \: heap.tDslots)) /\
              (((heap.tDlength[p]) >= 0) /\
                 (((heap.tDlength[p]) = (A.length (heap.tDslots[p]))) /\
                    (let arr = heap.tDslots[p] in
                     forall i: int.
                       (0 <= i) ->
                         ((i < (A.length arr)) -> (let v = A.get arr i in
                                                   (v = null) \/ ((v \: alloct) /\ ((alloct[v]) = IntArray))))))))) }
   by { heap = (any heap) ;
  alloct = (M.create ()) ;
  m = (any int) ;
  n = (any int) ;
  a2 = (any reference) ;
  a1 = (any reference) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate hasIntArrayType (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = IntArray))
  
  predicate hasIntArray2Type (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = IntArray2))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  val mk_IntArray (s: state) : reference
    writes { s.alloct }
    writes { s.heap.length }
    writes { s.heap.slots }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result IntArray (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasIntArrayType s result }
    ensures { s.heap.length = (M.add result 0 (old s.heap.length)) }
    ensures { s.heap.slots = (M.add result (A.make 0 0) (old s.heap.slots)) }
  
  val mk_IntArray2 (s: state) : reference
    writes { s.alloct }
    writes { s.heap.tDlength }
    writes { s.heap.tDslots }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result IntArray2 (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasIntArray2Type s result }
    ensures { s.heap.tDlength = (M.add result 0 (old s.heap.tDlength)) }
    ensures { s.heap.tDslots = (M.add result (A.make 0 null) (old s.heap.tDslots)) }
  
  function img_tDslots : state -> (rgn -> rgn)
  
  axiom img_tDslots_ax : forall s: state, r: rgn, p: reference.
                           (Rgn.mem p (img_tDslots s r)) <->
                             (((p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = IntArray))) /\
                                (exists arr: reference.
                                   (arr \: s.alloct) /\
                                     (((s.alloct[arr]) = IntArray2) /\
                                        ((Rgn.mem arr r) /\
                                           (exists i: int.
                                              (0 <= i) /\
                                                ((i < (A.length (s.heap.tDslots[arr]))) /\ ((A.get (s.heap.tDslots[arr]) i) = p)))))))
  
  function img_tDlength : state -> (rgn -> rgn)
  
  axiom img_tDlength_ax : forall s: state, r: rgn. (img_tDlength s r) = emptyRgn
  
  function img_slots : state -> (rgn -> rgn)
  
  axiom img_slots_ax : forall s: state, r: rgn. (img_slots s r) = emptyRgn
  
  function img_length : state -> (rgn -> rgn)
  
  axiom img_length_ax : forall s: state, r: rgn. (img_length s r) = emptyRgn
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate wrs_to_length_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = IntArray) -> ((not (Rgn.mem p r)) -> ((pre.heap.length[p]) = (post.heap.length[p]))))
  
  predicate wrs_to_slots_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = IntArray) -> ((not (Rgn.mem p r)) -> ((pre.heap.slots[p]) = (post.heap.slots[p]))))
  
  predicate wrs_to_tDlength_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = IntArray2) -> ((not (Rgn.mem p r)) -> ((pre.heap.tDlength[p]) = (post.heap.tDlength[p]))))
  
  predicate wrs_to_tDslots_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) ->
        (((post.alloct[p]) = IntArray2) -> ((not (Rgn.mem p r)) -> ((pre.heap.tDslots[p]) = (post.heap.tDslots[p]))))
  
  predicate agree_tDslots (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArray2Type sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.tDslots[o]) = (sr.heap.tDslots[pi.lor[o]]))))))
  
  predicate agree_tDlength (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArray2Type sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.tDlength[o]) = (sr.heap.tDlength[pi.lor[o]]))))))
  
  predicate agree_slots (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArrayType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.slots[o]) = (sr.heap.slots[pi.lor[o]]))))))
  
  predicate agree_length (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArrayType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.length[o]) = (sr.heap.length[pi.lor[o]]))))))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (agree_length sl sr pi w) /\ ((agree_slots sl sr pi w) /\ ((agree_tDlength sl sr pi w) /\ (agree_tDslots sl sr pi w)))
end

module T
  
  use prelude.Prelude
  use State
  use export tiling_theory.Tiling_theory
  
  predicate okGlobals (s: state) =
    (s.a1 <> null) /\
      ((s.a2 <> null) /\
         ((s.n > 0) /\
            ((s.m > 0) /\
               (((s.heap.length[s.a1]) = (s.n * s.m)) /\
                  (((s.heap.tDlength[s.a2]) = s.n) /\
                     ((forall i: int.
                         ((0 <= i) /\ (i < s.n)) ->
                           (let row_i = A.get (s.heap.tDslots[s.a2]) i in
                            (row_i <> null) /\ ((s.heap.length[row_i]) = s.m))) /\
                        (forall i: int.
                           ((0 <= i) /\ (i < s.n)) ->
                             (forall j: int.
                                ((0 <= j) /\ (j < s.n)) ->
                                  ((i <> j) ->
                                     (let row_i = A.get (s.heap.tDslots[s.a2]) i in
                                      let row_j = A.get (s.heap.tDslots[s.a2]) j in
                                      row_i <> row_j))))))))))
  
  val prog (s: state) : unit
    requires { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
    requires { okGlobals s }
    writes { s.heap.slots }
    writes { s.alloct }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr ({a1} union {a2}`tDslots)`slots]
              wrs_to_slots_framed_by (old s) s (Rgn.union (singleton s.a1) (img_tDslots s (singleton s.a2))) }
end

module M0
  
  use prelude.Prelude
  use State
  use T
  
  let prog (s: state) : unit
    requires { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
    requires { T.okGlobals s }
    writes { s.heap.slots }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr ({a1} union {a2}`tDslots)`slots]
              wrs_to_slots_framed_by (old s) s (Rgn.union (singleton s.a1) (img_tDslots s (singleton s.a2))) }
    ensures { forall i: int. let len = s.heap.length[s.a1] in
                             ((0 <= i) /\ (i < len)) -> ((A.get (s.heap.slots[s.a1]) i) = (T.f i)) } diverges =
    label INIT in
      let result = ref () in
      (let x = ref 0 in
       (((x := ([@expl:x := 0] 0));
         (while (! x) < (s.n * s.m) do
            invariant { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
            invariant { alloc_does_not_shrink (old s) s }
            invariant { [@expl:wr {a1}`slots] wrs_to_slots_framed_by (old s) s (singleton s.a1) }
            invariant { (0 <= (! x)) /\ ((! x) <= (s.n * s.m)) }
            invariant { forall i: int. ((0 <= i) /\ (i < (! x))) -> ((A.get (s.heap.slots[s.a1]) i) = (T.f i)) }
            ((s.heap.slots <- ([@expl:a1.{x} := f(x)] M.add s.a1 (A.set (s.heap.slots[s.a1]) (! x) (T.f (! x))) s.heap.slots));
             (x := ([@expl:x := x + 1] (! x) + 1));
             (while ((! x) < (s.m * s.n))  && (not ((mod (! x) s.m) = 0)) do
                invariant { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
                invariant { alloc_does_not_shrink (old s) s }
                invariant { [@expl:wr {a1}`slots] wrs_to_slots_framed_by (old s) s (singleton s.a1) }
                invariant { (0 <= (! x)) /\ ((! x) <= (s.n * s.m)) }
                invariant { forall i: int. ((0 <= i) /\ (i < (! x))) -> ((A.get (s.heap.slots[s.a1]) i) = (T.f i)) }
                ((s.heap.slots <- ([@expl:a1.{x} := f(x)] M.add s.a1 (A.set (s.heap.slots[s.a1]) (! x) (T.f (! x))) s.heap.slots));
                 (x := ([@expl:x := x + 1] (! x) + 1)))
              done))
          done);
         (! result))))
end

module M1
  
  use prelude.Prelude
  use State
  use T
  
  let prog (s: state) : unit
    requires { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
    requires { T.okGlobals s }
    writes { s.heap.slots }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr ({a1} union {a2}`tDslots)`slots]
              wrs_to_slots_framed_by (old s) s (Rgn.union (singleton s.a1) (img_tDslots s (singleton s.a2))) }
    ensures { forall i: int.
                ((0 <= i) /\ (i < s.n)) ->
                  (let row_i = A.get (s.heap.tDslots[s.a2]) i in
                   forall j: int. ((0 <= j) /\ (j < s.m)) -> ((A.get (s.heap.slots[row_i]) j) = (T.f ((i * s.m) + j)))) } diverges =
    label INIT in
      let result = ref () in
      (let i = ref 0 in
       (let j = ref 0 in
        (let row_i = ref null in
         (((assert { hasIntArrayType s (! row_i) });
           (i := ([@expl:i := 0] 0));
           (while (! i) < s.n do
              invariant { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
              invariant { [@expl:locals type invariant] hasIntArrayType s (! row_i) }
              invariant { alloc_does_not_shrink (old s) s }
              invariant { [@expl:wr {a2}`tDslots`slots] wrs_to_slots_framed_by (old s) s (img_tDslots s (singleton s.a2)) }
              invariant { (0 <= (! i)) /\ ((! i) <= s.n) }
              invariant {
                forall p: int.
                  ((0 <= p) /\ (p < (! i))) ->
                    (let row_p = A.get (s.heap.tDslots[s.a2]) p in
                     forall j1: int. ((0 <= j1) /\ (j1 < s.m)) -> ((A.get (s.heap.slots[row_p]) j1) = (T.f ((p * s.m) + j1)))) }
              ((j := ([@expl:j := 0] 0));
               (if ((! j) < s.m)
                then (((assert {
                          ((Rgn.mem s.a2 ((singleton s.a2) at INIT)) \/
                             ((not (Rgn.mem s.a2 (s.alloct.M.domain at INIT))) \/ (s.a2 = null))) /\
                            true });
                       (row_i := ([@expl:row_i := a2.{i}] A.get (s.heap.tDslots[s.a2]) (! i)));
                       (s.heap.slots <-
                          ([@expl:row_i.{j} := f(i * m + j)]
                           M.add (! row_i) (A.set (s.heap.slots[! row_i]) (! j) (T.f (((! i) * s.m) + (! j)))) s.heap.slots));
                       (j := ([@expl:j := j + 1] (! j) + 1))))
                else ());
               (while (! j) < s.m do
                  invariant { [@expl:globals type invariant] (hasIntArrayType s s.a1) /\ (hasIntArray2Type s s.a2) }
                  invariant { [@expl:locals type invariant] hasIntArrayType s (! row_i) }
                  invariant { alloc_does_not_shrink (old s) s }
                  invariant { [@expl:wr {a2}`tDslots`slots] wrs_to_slots_framed_by (old s) s (img_tDslots s (singleton s.a2)) }
                  invariant { (0 <= (! i)) /\ ((! i) <= s.n) }
                  invariant { (0 <= (! j)) /\ ((! j) <= s.m) }
                  invariant {
                    forall p: int.
                      ((0 <= p) /\ (p < (! i))) ->
                        (let row_p = A.get (s.heap.tDslots[s.a2]) p in
                         forall j2: int. ((0 <= j2) /\ (j2 < s.m)) -> ((A.get (s.heap.slots[row_p]) j2) = (T.f ((p * s.m) + j2)))) }
                  invariant {
                    forall q: int.
                      ((0 <= q) /\ (q < (! j))) ->
                        (let row_i3 = A.get (s.heap.tDslots[s.a2]) (! i) in
                         (A.get (s.heap.slots[row_i3]) q) = (T.f (((! i) * s.m) + q))) }
                  ((assert {
                      ((Rgn.mem s.a2 ((singleton s.a2) at INIT)) \/ ((not (Rgn.mem s.a2 (s.alloct.M.domain at INIT))) \/ (s.a2 = null))) /\
                        true });
                   (row_i := ([@expl:row_i := a2.{i}] A.get (s.heap.tDslots[s.a2]) (! i)));
                   (s.heap.slots <-
                      ([@expl:row_i.{j} := f(i * m + j)]
                       M.add (! row_i) (A.set (s.heap.slots[! row_i]) (! j) (T.f (((! i) * s.m) + (! j)))) s.heap.slots));
                   (j := ([@expl:j := j + 1] (! j) + 1)))
                done);
               (i := ([@expl:i := i + 1] (! i) + 1)))
            done);
           (! result))))))
end

module BM
  
  use prelude.Prelude
  use State
  use M0
  use M1
  
  predicate tilingInv (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_x: int) (r_i: int) (r_j: int) =
    (okRefperm l_s r_s pi) ->
      (forall l_l: int, r_r: int, r_s4: int.
         ((0 <= l_l) /\ (l_l < l_x)) ->
           (((0 <= r_r) /\ ((r_r < r_i) /\ ((0 <= r_s4) /\ (r_s4 < r_j)))) ->
              ((l_l = ((r_i * r_s.m) + r_j)) ->
                 (let l_lftv = A.get (l_s.heap.slots[l_s.a1]) l_l in
                  let r_row = A.get (r_s.heap.tDslots[r_s.a2]) r_r in
                  let r_rgtv = A.get (r_s.heap.slots[r_row]) r_s4 in
                  l_lftv = r_rgtv))))
  
  let prog (l_s: state) (r_s: state) (pi: PreRefperm.t) : (unit, unit)
    requires { [@expl:globals type invariant] (hasIntArrayType l_s l_s.a1) /\ (hasIntArray2Type l_s l_s.a2) }
    requires { [@expl:globals type invariant] (hasIntArrayType r_s r_s.a1) /\ (hasIntArray2Type r_s r_s.a2) }
    requires { okRefperm l_s r_s pi }
    requires { (M0.T.okGlobals l_s) /\ (M1.T.okGlobals r_s) }
    requires { (l_s.n = r_s.n) /\ (l_s.m = r_s.m) }
    ensures { okRefperm l_s r_s pi }
    ensures { tilingInv l_s r_s pi (l_s.n * l_s.m) r_s.n r_s.m }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end } diverges =
    label INIT in
      let l_result = ref () in
      (let r_result = ref () in
       (let l_x = ref 0 in
        (let r_i = ref 0 in
         (let r_j = ref 0 in
          (let r_row_i = ref null in
           (((((l_x := ([@expl:x := 0] 0));
               (r_i := ([@expl:i := 0] 0))));
             (while (! l_x) < (l_s.n * l_s.m) do
                invariant { [@expl:globals type invariant left] (hasIntArrayType l_s l_s.a1) /\ (hasIntArray2Type l_s l_s.a2) }
                invariant { [@expl:globals type invariant right] (hasIntArrayType r_s r_s.a1) /\ (hasIntArray2Type r_s r_s.a2) }
                invariant { [@expl:locals type invariant right] hasIntArrayType r_s (! r_row_i) }
                invariant { okRefperm l_s r_s pi }
                invariant { (0 <= (! l_x)) /\ ((! l_x) <= (l_s.n * l_s.m)) }
                invariant { (0 <= (! r_i)) /\ ((! r_i) <= r_s.n) }
                invariant { (! l_x) = ((! r_i) * r_s.m) }
                invariant { tilingInv l_s r_s pi (! l_x) (! r_i) 0 }
                invariant { [@expl:lockstep] ((! l_x) < (l_s.n * l_s.m)) = ((! r_i) < r_s.n) }
                (((();
                   (r_j := ([@expl:j := 0] 0))));
                 (((((l_s.heap.slots <-
                        ([@expl:a1.{x} := f(x)] M.add l_s.a1 (A.set (l_s.heap.slots[l_s.a1]) (! l_x) (M0.T.f (! l_x))) l_s.heap.slots));
                     (l_x := ([@expl:x := x + 1] (! l_x) + 1))));
                   (if ((! r_j) < r_s.m)
                    then (((r_row_i := ([@expl:row_i := a2.{i}] A.get (r_s.heap.tDslots[r_s.a2]) (! r_i)));
                           (r_s.heap.slots <-
                              ([@expl:row_i.{j} := f(i * m + j)]
                               M.add
                                  (! r_row_i)
                                  (A.set (r_s.heap.slots[! r_row_i]) (! r_j) (M1.T.f (((! r_i) * r_s.m) + (! r_j))))
                                  r_s.heap.slots));
                           (r_j := ([@expl:j := j + 1] (! r_j) + 1))))
                    else ())));
                 (while ((! l_x) < (l_s.m * l_s.n))  && (not ((mod (! l_x) l_s.m) = 0)) do
                    invariant { [@expl:globals type invariant left] (hasIntArrayType l_s l_s.a1) /\ (hasIntArray2Type l_s l_s.a2) }
                    invariant { [@expl:globals type invariant right] (hasIntArrayType r_s r_s.a1) /\ (hasIntArray2Type r_s r_s.a2) }
                    invariant { [@expl:locals type invariant right] hasIntArrayType r_s (! r_row_i) }
                    invariant { okRefperm l_s r_s pi }
                    invariant { (0 <= (! l_x)) /\ ((! l_x) <= (l_s.n * l_s.m)) }
                    invariant { (0 <= (! r_i)) /\ (((! r_i) <= r_s.n) /\ ((0 <= (! r_j)) /\ ((! r_j) <= r_s.m))) }
                    invariant { (! l_x) = (((! r_i) * r_s.m) + (! r_j)) }
                    invariant { tilingInv l_s r_s pi (! l_x) (! r_i) (! r_j) }
                    invariant { [@expl:lockstep] (((! l_x) < (l_s.m * l_s.n)) && ((mod (! l_x) l_s.m) <> 0)) = ((! r_j) < r_s.m) }
                    ((((l_s.heap.slots <-
                          ([@expl:a1.{x} := f(x)] M.add l_s.a1 (A.set (l_s.heap.slots[l_s.a1]) (! l_x) (M0.T.f (! l_x))) l_s.heap.slots));
                       (l_x := ([@expl:x := x + 1] (! l_x) + 1))));
                     (r_row_i := ([@expl:row_i := a2.{i}] A.get (r_s.heap.tDslots[r_s.a2]) (! r_i)));
                     (r_s.heap.slots <-
                        ([@expl:row_i.{j} := f(i * m + j)]
                         M.add
                            (! r_row_i)
                            (A.set (r_s.heap.slots[! r_row_i]) (! r_j) (M1.T.f (((! r_i) * r_s.m) + (! r_j))))
                            r_s.heap.slots));
                     (r_j := ([@expl:j := j + 1] (! r_j) + 1)))
                  done);
                 ();
                 (r_i := ([@expl:i := i + 1] (! r_i) + 1)))
              done);
             (! l_result, ! r_result))))))))
end

module BM_biinterface
  
  use prelude.Prelude
  use State
  use M0
  use M1
  
  predicate tilingInv (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_x: int) (r_i: int) (r_j: int) =
    (okRefperm l_s r_s pi) ->
      (forall l_l: int, r_r: int, r_s5: int.
         ((0 <= l_l) /\ (l_l < l_x)) ->
           (((0 <= r_r) /\ ((r_r < r_i) /\ ((0 <= r_s5) /\ (r_s5 < r_j)))) ->
              ((l_l = ((r_i * r_s.m) + r_j)) ->
                 (let l_lftv = A.get (l_s.heap.slots[l_s.a1]) l_l in
                  let r_row = A.get (r_s.heap.tDslots[r_s.a2]) r_r in
                  let r_rgtv = A.get (r_s.heap.slots[r_row]) r_s5 in
                  l_lftv = r_rgtv))))
  
  val prog (l_s: state) (r_s: state) (pi: PreRefperm.t) : (unit, unit)
    requires { [@expl:globals type invariant] (hasIntArrayType l_s l_s.a1) /\ (hasIntArray2Type l_s l_s.a2) }
    requires { [@expl:globals type invariant] (hasIntArrayType r_s r_s.a1) /\ (hasIntArray2Type r_s r_s.a2) }
    requires { okRefperm l_s r_s pi }
    requires { (M0.T.okGlobals l_s) /\ (M1.T.okGlobals r_s) }
    requires { (l_s.n = r_s.n) /\ (l_s.m = r_s.m) }
    ensures { okRefperm l_s r_s pi }
    ensures { tilingInv l_s r_s pi (l_s.n * l_s.m) r_s.n r_s.m }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
end

module MAIN
  
  use prelude.Prelude
  use State
end

