module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  
  type reftype = 
    | IntArray
  
  type heap = {
    mutable length : M.t int ;
    mutable slots : M.t (A.array int)
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype
  }invariant { not (null \: alloct) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = IntArray) ->
           (((p \: heap.length) /\ (p \: heap.slots)) /\ (((heap.length[p]) >= 0) /\ ((heap.length[p]) = (A.length (heap.slots[p])))))) }
   by { heap = (any heap) ;
  alloct = (M.create ()) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate hasIntArrayType (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = IntArray))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  val mk_IntArray (s: state) : reference
    writes { s.alloct }
    writes { s.heap.length }
    writes { s.heap.slots }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result IntArray (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasIntArrayType s result }
    ensures { s.heap.length = (M.add result 0 (old s.heap.length)) }
    ensures { s.heap.slots = (M.add result (A.make 0 0) (old s.heap.slots)) }
  
  function img_slots : state -> (rgn -> rgn)
  
  axiom img_slots_ax = forall s: state, r: rgn. (img_slots s r) = emptyRgn
  
  function img_length : state -> (rgn -> rgn)
  
  axiom img_length_ax = forall s: state, r: rgn. (img_length s r) = emptyRgn
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate wrs_to_length_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = IntArray) -> ((not (Rgn.mem p r)) -> ((pre.heap.length[p]) = (post.heap.length[p]))))
  
  predicate wrs_to_slots_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = IntArray) -> ((not (Rgn.mem p r)) -> ((pre.heap.slots[p]) = (post.heap.slots[p]))))
  
  predicate agree_slots (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArrayType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.slots[o]) = (sr.heap.slots[pi.lor[o]]))))))
  
  predicate agree_length (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasIntArrayType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.length[o]) = (sr.heap.length[pi.lor[o]]))))))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) = (agree_length sl sr pi w) /\ (agree_slots sl sr pi w)
end

module I
  
  use prelude.Prelude
  use State
  
  val is_female (s: state) (person: int) : int
  
  val count_female (s: state) (people: reference) : int requires { hasIntArrayType s people } requires { people <> null }
end

module M
  
  use prelude.Prelude
  use State
  use I
  
  let is_female (s: state) (person: int) : int =
    label INIT in
      let result = ref 0 in
      (let person = ref person in
       (let gender = ref 0 in
        (((gender := ([@expl:gender := person mod 2] mod (! person) 2));
          (if ((! gender) = 0) then (result := ([@expl:result := 1] 1)) else (result := ([@expl:result := 0] 0)));
          (! result)))))
  
  let count_female (s: state) (people: reference) : int
    requires { hasIntArrayType s people }
    requires { people <> null }@ diverge =
    label INIT in
      let result = ref 0 in
      (let people = ref people in
       (let i = ref 0 in
        (let count = ref 0 in
         (let len = ref 0 in
          (((assert {
               ((Rgn.mem (! people) ((singleton (! people)) at INIT)) \/
                  ((not (Rgn.mem (! people) (s.alloct.M.domain at INIT))) \/ ((! people) = null))) /\
                 true });
            (len := ([@expl:len := people.length] s.heap.length[! people]));
            (while (! i) < (! len) do
               invariant { [@expl:locals type invariant] hasIntArrayType s (! people) }
               invariant { alloc_does_not_shrink (old s) s }
               invariant { (0 <= (! i)) /\ ((! i) <= (! len)) }
               let current = ref 0 in
               (let f = ref 0 in
                (((assert {
                     ((Rgn.mem (! people) ((singleton (! people)) at INIT)) \/
                        ((not (Rgn.mem (! people) (s.alloct.M.domain at INIT))) \/ ((! people) = null))) /\
                       true });
                  (current := ([@expl:current := people.{i}] A.get (s.heap.slots[! people]) (! i)));
                  (f := ([@expl:f := is_female(current)] is_female s (! current)));
                  (count := ([@expl:count := count + f] (! count) + (! f)));
                  (i := ([@expl:i := i + 1] (! i) + 1)))))
             done);
            (result := ([@expl:result := count] ! count));
            (! result)))))))
end

module MAIN
  
  use prelude.Prelude
  use State
end

module MREL
  use prelude.Prelude
  use State
  use M
  
  predicate same_array (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_a: reference) (r_a: reference) =
    (okRefperm l_s r_s pi) ->
      ((hasIntArrayType l_s l_a) ->
         ((hasIntArrayType r_s r_a) ->
            (((l_a <> null) /\ (r_a <> null)) ->
               (let l_len = l_s.heap.length[l_a] in
                let r_len = r_s.heap.length[r_a] in
                (l_len = r_len) /\
                  (forall l_i: int, r_i: int.
                     (((0 <= l_i) /\ (l_i < l_len)) /\ ((0 <= r_i) /\ (r_i < r_len))) ->
                       ((l_i = r_i) ->
                          (let l_v = A.get (l_s.heap.slots[l_a]) l_i in
                           let r_v = A.get (r_s.heap.slots[r_a]) r_i in
                           l_v = r_v)))))))
  
  let is_female (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_person: int) (r_person: int) : 
    (int, int)
    requires { okRefperm l_s r_s pi }
    requires { l_person = r_person }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end } =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_person = ref l_person in
        (let r_person = ref r_person in
         (let l_gender = ref 0 in
          (let r_gender = ref 0 in
           (((((l_gender := ([@expl:gender := person mod 2] mod (! l_person) 2));
               (r_gender := ([@expl:gender := person mod 2] mod (! r_person) 2))));
             ([@expl:guard agreement] assert { ((! l_gender) = 0) = ((! r_gender) = 0) });
             (if ((! l_gender) = 0) then (((l_result := ([@expl:result := 1] 1));
                                           (r_result := ([@expl:result := 1] 1))))
              else (((l_result := ([@expl:result := 0] 0));
                     (r_result := ([@expl:result := 0] 0)))));
             (! l_result, ! r_result))))))))
  
  let count_female (l_s: state) (r_s: state) (pi1: PreRefperm.t) (l_people: reference) (r_people: reference) : 
    (int, int)
    requires { hasIntArrayType l_s l_people }
    requires { l_people <> null }
    requires { hasIntArrayType r_s r_people }
    requires { r_people <> null }
    requires { okRefperm l_s r_s pi1 }
    requires { same_array l_s r_s pi1 l_people r_people }
    ensures { okRefperm l_s r_s pi1 }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }@ diverge =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_people = ref l_people in
        (let r_people = ref r_people in
         (let l_i = ref 0 in
          (let r_i = ref 0 in
           (let l_count = ref 0 in
            (let r_count = ref 0 in
             (let l_len = ref 0 in
              (let r_len = ref 0 in
               (((((l_len := ([@expl:len := people.length] l_s.heap.length[! l_people]));
                   (r_len := ([@expl:len := people.length] r_s.heap.length[! r_people]))));
                 (while (! l_i) < (! l_len) do
                    invariant { [@expl:lockstep] ((! l_i) < (! l_len)) = ((! r_i) < (! r_len)) }
                    invariant { [@expl:locals type invariant left] hasIntArrayType l_s (! l_people) }
                    invariant { [@expl:locals type invariant right] hasIntArrayType r_s (! r_people) }
                    invariant { okRefperm l_s r_s pi1 }
                    invariant { ((0 <= (! l_i)) /\ ((! l_i) <= (! l_len))) /\ ((0 <= (! r_i)) /\ ((! r_i) <= (! r_len))) }
                    invariant { (! l_count) = (! r_count) }
                    invariant { (! l_i) = (! r_i) }
                    let l_current = ref 0 in
                    (let r_current = ref 0 in
                     (let l_f = ref 0 in
                      (let r_f = ref 0 in
                       (((((l_current := ([@expl:current := people.{i}] A.get (l_s.heap.slots[! l_people]) (! l_i)));
                           (r_current := ([@expl:current := people.{i}] A.get (r_s.heap.slots[! r_people]) (! r_i)))));
                         (match is_female l_s r_s pi1 (! l_current) (! r_current)
                          with
                            | (l_is_female_res, r_is_female_res) ->
                                (((l_f := ([@expl:f := is_female(current)] l_is_female_res));
                                  (r_f := ([@expl:f := is_female(current)] r_is_female_res))))
                          end);
                         (((l_count := ([@expl:count := count + f] (! l_count) + (! l_f)));
                           (r_count := ([@expl:count := count + f] (! r_count) + (! r_f)))));
                         (l_i := ([@expl:i := i + 1] (! l_i) + 1));
                         (r_i := ([@expl:i := i + 1] (! r_i) + 1)))))))
                  done);
                 (l_result := ([@expl:result := count] ! l_count));
                 (r_result := ([@expl:result := count] ! r_count));
                 (! l_result, ! r_result))))))))))))
end

module MREL_biinterface
  
  use prelude.Prelude
  use State
  use M
  
  predicate same_array (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_a: reference) (r_a: reference) =
    (okRefperm l_s r_s pi) ->
      ((hasIntArrayType l_s l_a) ->
         ((hasIntArrayType r_s r_a) ->
            (((l_a <> null) /\ (r_a <> null)) ->
               (let l_len = l_s.heap.length[l_a] in
                let r_len = r_s.heap.length[r_a] in
                (l_len = r_len) /\
                  (forall l_i: int, r_i: int.
                     (((0 <= l_i) /\ (l_i < l_len)) /\ ((0 <= r_i) /\ (r_i < r_len))) ->
                       ((l_i = r_i) ->
                          (let l_v = A.get (l_s.heap.slots[l_a]) l_i in
                           let r_v = A.get (r_s.heap.slots[r_a]) r_i in
                           l_v = r_v)))))))
  
  val is_female (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_person: int) (r_person: int) : 
    (int, int)
    requires { okRefperm l_s r_s pi }
    requires { l_person = r_person }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
  
  val count_female (l_s: state) (r_s: state) (pi2: PreRefperm.t) (l_people: reference) (r_people: reference) : 
    (int, int)
    requires { hasIntArrayType l_s l_people }
    requires { l_people <> null }
    requires { hasIntArrayType r_s r_people }
    requires { r_people <> null }
    requires { okRefperm l_s r_s pi2 }
    requires { same_array l_s r_s pi2 l_people r_people }
    ensures { okRefperm l_s r_s pi2 }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }@ diverge
end

