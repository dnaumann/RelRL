module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  
  type reftype = {
    
  }
  
  type heap = {
    
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype
  }invariant { not (null \: alloct) }
   by { heap = (any heap) ;
  alloct = (M.create ()) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn)
end

module I
  
  use prelude.Prelude
  use State
  
  val multiply (s: state) (n: int) (m: int) : int requires { (n >= 0) /\ (m >= 0) } ensures { result = (n * m) }
end

module M1
  
  use prelude.Prelude
  use State
  use I
  
  let multiply (s: state) (n: int) (m: int) : int diverges
    requires { (n >= 0) /\ (m >= 0) }
    ensures { result = (n * m) } =
    label INIT in
      let result = ref 0 in
      (let n = ref n in
       (let m = ref m in
        (let i = ref 0 in
         (let j = ref 0 in
          (let ghost tmp = ref 0 in
           (((i := ([@expl:i := 0] 0));
             (while (! i) < (! n) do
                invariant { alloc_does_not_shrink (old s) s }
                invariant { (! result) = ((! i) * (! m)) }
                invariant { (0 <= (! i)) /\ ((! i) <= (! n)) }
                ((j := ([@expl:j := 0] 0));
                 (tmp := ([@expl:tmp := result] ! result));
                 (while (! j) < (! m) do
                    invariant { alloc_does_not_shrink (old s) s }
                    invariant { (! result) = (((! i) * (! m)) + (! j)) }
                    invariant { (0 <= (! j)) /\ ((! j) <= (! m)) }
                    ((result := ([@expl:result := result + 1] (! result) + 1));
                     (j := ([@expl:j := j + 1] (! j) + 1)))
                  done);
                 (i := ([@expl:i := i + 1] (! i) + 1)))
              done);
             (! result))))))))
end

module M2
  
  use prelude.Prelude
  use State
  use I
  
  let multiply (s: state) (n: int) (m: int) : int diverges
    requires { (n >= 0) /\ (m >= 0) }
    ensures { result = (n * m) } =
    label INIT in
      let result = ref 0 in
      (let n = ref n in
       (let m = ref m in
        (let i = ref 0 in
         (((i := ([@expl:i := 0] 0));
           (while (! i) < (! n) do
              invariant { alloc_does_not_shrink (old s) s }
              invariant { (! result) = ((! i) * (! m)) }
              invariant { (0 <= (! i)) /\ ((! i) <= (! n)) }
              ((result := ([@expl:result := result + m] (! result) + (! m)));
               (i := ([@expl:i := i + 1] (! i) + 1)))
            done);
           (! result))))))
end

module MAIN
  
  use prelude.Prelude
  use State
end

module MREL
  use prelude.Prelude
  use State
  use M1
  use M2
  
  let multiply (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_n: int) (l_m: int) (r_n: int) (r_m: int) : 
       (int, int) diverges
    requires { okRefperm l_s r_s pi }
    requires { (l_n = r_n) /\ (l_m = r_m) }
    requires { ((l_n >= 0) /\ (r_n >= 0)) /\ ((l_m >= 0) /\ (r_m >= 0)) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end } =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_n = ref l_n in
        (let l_m = ref l_m in
         (let r_n = ref r_n in
          (let r_m = ref r_m in
           (let l_i = ref 0 in
            (let r_i = ref 0 in
             (let l_j = ref 0 in
              (let r_j = ref 0 in
               (let ghost l_tmp = ref 0 in
                (let ghost r_tmp = ref 0 in
                 (((((l_i := ([@expl:i := 0] 0));
                     (r_i := ([@expl:i := 0] 0))));
                   (while (! l_i) < (! l_n) do
                      invariant { [@expl:lockstep] ((! l_i) < (! l_n)) = ((! r_i) < (! r_n)) }
                      invariant { okRefperm l_s r_s pi }
                      invariant { (! l_result) = (! r_result) }
                      invariant { (! l_i) = (! r_i) }
                      invariant { ((0 <= (! l_i)) /\ ((! l_i) <= (! l_n))) /\ ((0 <= (! r_i)) /\ ((! r_i) <= (! r_n))) }
                      ((((l_j := ([@expl:j := 0] 0));
                         ()));
                       (((((l_tmp := ([@expl:tmp := result] ! l_result));
                           (while (! l_j) < (! l_m) do
                              invariant { alloc_does_not_shrink (old l_s) l_s }
                              invariant { (! l_result) = ((! l_tmp) + (! l_j)) }
                              invariant { (0 <= (! l_j)) /\ ((! l_j) <= (! l_m)) }
                              ((l_result := ([@expl:result := result + 1] (! l_result) + 1));
                               (l_j := ([@expl:j := j + 1] (! l_j) + 1)))
                            done)));
                         (r_result := ([@expl:result := result + m] (! r_result) + (! r_m)))));
                       (assert { (! l_result) = (! r_result) });
                       (l_i := ([@expl:i := i + 1] (! l_i) + 1));
                       (r_i := ([@expl:i := i + 1] (! r_i) + 1)))
                    done);
                   (! l_result, ! r_result))))))))))))))
end

module MREL_biinterface
  
  use prelude.Prelude
  use State
  use M1
  use M2
  
  val multiply (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_n: int) (l_m: int) (r_n: int) (r_m: int) : 
       (int, int) diverges
    requires { okRefperm l_s r_s pi }
    requires { (l_n = r_n) /\ (l_m = r_m) }
    requires { ((l_n >= 0) /\ (r_n >= 0)) /\ ((l_m >= 0) /\ (r_m >= 0)) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
end

