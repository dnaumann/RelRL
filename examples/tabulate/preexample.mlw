module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  
  type reftype = 
    | List
    | Node
  
  type heap = {
    mutable value : M.t int ;
    mutable nxt : M.t reference ;
    mutable head : M.t reference ;
    mutable ghost rep : M.t rgn
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype
  }invariant { not (null \: alloct) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = List) ->
           (((p \: heap.head) /\ (p \: heap.rep)) /\
              ((((heap.head[p]) = null) \/ (((heap.head[p]) \: alloct) /\ ((alloct[heap.head[p]]) = Node))) /\
                 (forall q: reference. (Rgn.mem q (heap.rep[p])) -> ((q = null) \/ (q \: alloct)))))) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = Node) ->
           (((p \: heap.value) /\ (p \: heap.nxt)) /\
              (((heap.nxt[p]) = null) \/ (((heap.nxt[p]) \: alloct) /\ ((alloct[heap.nxt[p]]) = Node))))) }
   by { heap = (any heap) ;
  alloct = (M.create ()) }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate hasListType (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = List))
  
  predicate hasNodeType (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = Node))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  val mk_List (s: state) : reference
    writes { s.alloct }
    writes { s.heap.head }
    writes { s.heap.rep }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result List (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasListType s result }
    ensures { s.heap.head = (M.add result null (old s.heap.head)) }
    ensures { s.heap.rep = (M.add result emptyRgn (old s.heap.rep)) }
  
  val mk_Node (s: state) : reference
    writes { s.alloct }
    writes { s.heap.value }
    writes { s.heap.nxt }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result Node (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasNodeType s result }
    ensures { s.heap.value = (M.add result 0 (old s.heap.value)) }
    ensures { s.heap.nxt = (M.add result null (old s.heap.nxt)) }
  
  function img_value : state -> (rgn -> rgn)
  
  axiom img_value_ax = forall s: state, r: rgn. (img_value s r) = emptyRgn
  
  function img_rep : state -> (rgn -> rgn)
  
  axiom img_rep_ax = forall s: state, r: rgn, p: reference.
                       (Rgn.mem p (img_rep s r)) <->
                         (exists q: reference.
                            (q \: s.alloct) /\ (((s.alloct[q]) = List) /\ ((Rgn.mem q r) /\ (Rgn.mem p (s.heap.rep[q])))))
  
  function img_nxt : state -> (rgn -> rgn)
  
  axiom img_nxt_ax = forall s: state, r: rgn, p: reference.
                       (Rgn.mem p (img_nxt s r)) <->
                         (exists q: reference. (q \: s.alloct) /\ (((s.alloct[q]) = Node) /\ ((Rgn.mem q r) /\ (p = (s.heap.nxt[q])))))
  
  function img_head : state -> (rgn -> rgn)
  
  axiom img_head_ax = forall s: state, r: rgn, p: reference.
                        (Rgn.mem p (img_head s r)) <->
                          (exists q: reference.
                             (q \: s.alloct) /\ (((s.alloct[q]) = List) /\ ((Rgn.mem q r) /\ (p = (s.heap.head[q])))))
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate wrs_to_head_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = List) -> ((not (Rgn.mem p r)) -> ((pre.heap.head[p]) = (post.heap.head[p]))))
  
  predicate wrs_to_rep_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = List) -> ((not (Rgn.mem p r)) -> ((pre.heap.rep[p]) = (post.heap.rep[p]))))
  
  predicate wrs_to_value_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = Node) -> ((not (Rgn.mem p r)) -> ((pre.heap.value[p]) = (post.heap.value[p]))))
  
  predicate wrs_to_nxt_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = Node) -> ((not (Rgn.mem p r)) -> ((pre.heap.nxt[p]) = (post.heap.nxt[p]))))
  
  predicate agree_value (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasNodeType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.value[o]) = (sr.heap.value[pi.lor[o]]))))))
  
  predicate agree_rep (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasListType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] PreRefperm.idRgn pi (sl.heap.rep[o]) (sr.heap.rep[pi.lor[o]]))))))
  
  predicate agree_nxt (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasNodeType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] PreRefperm.idRef pi (sl.heap.nxt[o]) (sr.heap.nxt[pi.lor[o]]))))))
  
  predicate agree_head (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasListType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] PreRefperm.idRef pi (sl.heap.head[o]) (sr.heap.head[pi.lor[o]]))))))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (agree_head sl sr pi w) /\ ((agree_rep sl sr pi w) /\ ((agree_value sl sr pi w) /\ (agree_nxt sl sr pi w)))
end

module I
  
  use prelude.Prelude
  use State
  
  predicate rep_closed (s: state) (xs: reference) =
    (hasListType s xs) ->
      ((xs <> null) ->
         (let hd = s.heap.head[xs] in
          let rep1 = s.heap.rep[xs] in
          (typeofRgn s rep1 (L.Cons Node L.Nil)) /\ ((Rgn.subset (img_nxt s rep1) rep1) /\ ((Rgn.mem null rep1) /\ (Rgn.mem hd rep1)))))
  
  lemma rep_closed_def = forall s: state.
                           forall xs: reference.
                             (isAllocated s xs) ->
                               ((hasListType s xs) ->
                                  ((rep_closed s xs) ->
                                     (let rep1 = s.heap.rep[xs] in
                                      forall n: reference.
                                        (isAllocated s n) ->
                                          ((hasNodeType s n) -> ((Rgn.mem n rep1) -> (let nxt2 = s.heap.nxt[n] in
                                                                    Rgn.mem nxt2 rep1))))))
  
  val init_Node (s: state) (self: reference) (v: int) : unit
    requires { hasNodeType s self }
    requires { self <> null }
    requires { (s.heap.nxt[self]) = null }
    writes { s.heap.value }
    ensures { result = () }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { (s.heap.nxt[self]) = null }
    ensures { (s.heap.value[self]) = v }
  
  val init_List (s: state) (self: reference) : unit
    requires { hasListType s self }
    requires { self <> null }
    writes { s.heap.head }
    writes { s.heap.rep }
    ensures { result = () }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { (s.heap.head[self]) = null }
    ensures { (s.heap.rep[self]) = (singleton null) }
    ensures { rep_closed s self }
  
  val f (s: state) (i: int) : int requires { i >= 0 }
  
  val tabulate (s: state) (n: int) : reference
    requires { n > 0 }
    writes { s.alloct }
    ensures { result <> null }
    ensures { hasListType s result }
    ensures { alloc_does_not_shrink (old s) s }
end

module M0
  
  use prelude.Prelude
  use State
  use I
  
  let init_Node (s: state) (self: reference) (v: int) : unit
    requires { hasNodeType s self }
    requires { self <> null }
    requires { (s.heap.nxt[self]) = null }
    writes { s.heap.value }
    ensures { result = () }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { (s.heap.nxt[self]) = null }
    ensures { (s.heap.value[self]) = v } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let v = ref v in
        (((s.heap.value <- ([@expl:self.value := v] M.add (! self) (! v) s.heap.value));
          (! result)))))
  
  let init_List (s: state) (self: reference) : unit
    requires { hasListType s self }
    requires { self <> null }
    writes { s.heap.head }
    writes { s.heap.rep }
    ensures { result = () }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old s) s (singleton self) }
    ensures { (s.heap.head[self]) = null }
    ensures { (s.heap.rep[self]) = (singleton null) }
    ensures { I.rep_closed s self } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (((s.heap.head <- ([@expl:self.head := null] M.add (! self) null s.heap.head));
         (s.heap.rep <- ([@expl:self.rep := {null}] M.add (! self) (singleton null) s.heap.rep));
         (! result))))
  
  val f (s: state) (i: int) : int requires { i >= 0 }
  
  let tabulate (s: state) (n: int) : reference
    requires { n > 0 }
    writes { s.alloct }
    writes { s.heap.head }
    writes { s.heap.nxt }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { result <> null }
    ensures { hasListType s result }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {}`nxt] wrs_to_nxt_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`value] wrs_to_value_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`rep] wrs_to_rep_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`head] wrs_to_head_framed_by (old s) s emptyRgn } =
    label INIT in
      let result = ref null in
      (let n = ref n in
       (let l = ref null in
        (((assert { hasListType s (! l) });
          (let p = ref null in
           (((assert { hasNodeType s (! p) });
             (let i = ref 0 in
              (((l := ([@expl:l := new List] mk_List s));
                (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                ([@expl:List(l)] init_List s (! l));
                (i := ([@expl:i := 0] 0));
                (while (! i) < (! n) do
                   invariant {
                     [@expl:locals type invariant] (hasListType s (! l)) /\ ((hasNodeType s (! p)) /\ (hasListType s (! result))) }
                   invariant { alloc_does_not_shrink (old s) s }
                   invariant { [@expl:wr {l}`rep`nxt] wrs_to_nxt_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant { [@expl:wr {l}`rep`head] wrs_to_head_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant {
                     [@expl:wr ({l} union {l}`rep)`rep] wrs_to_rep_framed_by (old s) s (Rgn.union (singleton (! l)) (s.heap.rep[! l])) }
                   invariant { [@expl:wr {l}`rep`value] wrs_to_value_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant { let s_alloc = old s.alloct.M.domain in
                               let rep1 = s.heap.rep[! l] in
                               rep1 \# s_alloc }
                   invariant { let rep2 = s.heap.rep[! l] in
                               Rgn.mem (! p) rep2 }
                   invariant { I.rep_closed s (! l) }
                   invariant { (0 <= (! i)) /\ ((! i) <= (! n)) }
                   let k = ref 0 in
                   (((i := ([@expl:i := i + 1] (! i) + 1));
                     (k := ([@expl:k := f(i)] f s (! i)));
                     (p := ([@expl:p := new Node] mk_Node s));
                     (assert { ((not (Rgn.mem (! p) (s.alloct.M.domain at INIT))) \/ ((! p) = null)) /\ true });
                     ([@expl:Node(p,k)] init_Node s (! p) (! k));
                     (let hd = ref null in
                      (((assert { hasNodeType s (! hd) });
                        (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                        (hd := ([@expl:hd := l.head] s.heap.head[! l]));
                        (s.heap.nxt <- ([@expl:p.nxt := hd] M.add (! p) (! hd) s.heap.nxt));
                        (s.heap.head <- ([@expl:l.head := p] M.add (! l) (! p) s.heap.head));
                        (let ghost r = ref emptyRgn in
                         (((assert { isValidRgn s (! r) });
                           (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                           (r := ([@expl:r := l.rep] s.heap.rep[! l]));
                           (s.heap.rep <- ([@expl:l.rep := r union {p}] M.add (! l) (Rgn.union (! r) (singleton (! p))) s.heap.rep))))))))))
                 done);
                (result := ([@expl:result := l] ! l));
                (! result)))))))))))
end

module M1
  
  use prelude.Prelude
  use State
  use I
  
  let init_Node (s: state) (self: reference) (v: int) : unit
    requires { hasNodeType s self }
    requires { self <> null }
    requires { (s.heap.nxt[self]) = null }
    writes { s.heap.value }
    ensures { result = () }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { (s.heap.nxt[self]) = null }
    ensures { (s.heap.value[self]) = v } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let v = ref v in
        (((s.heap.value <- ([@expl:self.value := v] M.add (! self) (! v) s.heap.value));
          (! result)))))
  
  let init_List (s: state) (self: reference) : unit
    requires { hasListType s self }
    requires { self <> null }
    writes { s.heap.head }
    writes { s.heap.rep }
    ensures { result = () }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old s) s (singleton self) }
    ensures { (s.heap.head[self]) = null }
    ensures { (s.heap.rep[self]) = (singleton null) }
    ensures { I.rep_closed s self } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (((s.heap.head <- ([@expl:self.head := null] M.add (! self) null s.heap.head));
         (s.heap.rep <- ([@expl:self.rep := {null}] M.add (! self) (singleton null) s.heap.rep));
         (! result))))
  
  val f (s: state) (i: int) : int requires { i >= 0 }
  
  let tabulate (s: state) (n: int) : reference
    requires { n > 0 }
    writes { s.alloct }
    writes { s.heap.head }
    writes { s.heap.nxt }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { result <> null }
    ensures { hasListType s result }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {}`nxt] wrs_to_nxt_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`value] wrs_to_value_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`rep] wrs_to_rep_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`head] wrs_to_head_framed_by (old s) s emptyRgn } =
    label INIT in
      let result = ref null in
      (let n = ref n in
       (let l = ref null in
        (((assert { hasListType s (! l) });
          (let p = ref null in
           (((assert { hasNodeType s (! p) });
             (let i = ref 0 in
              (((l := ([@expl:l := new List] mk_List s));
                (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                ([@expl:List(l)] init_List s (! l));
                (i := ([@expl:i := 1] 1));
                (while (! i) <= (! n) do
                   invariant {
                     [@expl:locals type invariant] (hasListType s (! l)) /\ ((hasNodeType s (! p)) /\ (hasListType s (! result))) }
                   invariant { alloc_does_not_shrink (old s) s }
                   invariant { [@expl:wr {l}`rep`nxt] wrs_to_nxt_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant { [@expl:wr {l}`rep`head] wrs_to_head_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant {
                     [@expl:wr ({l} union {l}`rep)`rep] wrs_to_rep_framed_by (old s) s (Rgn.union (singleton (! l)) (s.heap.rep[! l])) }
                   invariant { [@expl:wr {l}`rep`value] wrs_to_value_framed_by (old s) s (s.heap.rep[! l]) }
                   invariant { let s_alloc = old s.alloct.M.domain in
                               let rep1 = s.heap.rep[! l] in
                               rep1 \# s_alloc }
                   invariant { let rep2 = s.heap.rep[! l] in
                               Rgn.mem (! p) rep2 }
                   invariant { I.rep_closed s (! l) }
                   invariant { (1 <= (! i)) /\ ((! i) <= ((! n) + 1)) }
                   let k = ref 0 in
                   (((k := ([@expl:k := f(i)] f s (! i)));
                     (p := ([@expl:p := new Node] mk_Node s));
                     (assert { ((not (Rgn.mem (! p) (s.alloct.M.domain at INIT))) \/ ((! p) = null)) /\ true });
                     ([@expl:Node(p,k)] init_Node s (! p) (! k));
                     (let hd = ref null in
                      (((assert { hasNodeType s (! hd) });
                        (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                        (hd := ([@expl:hd := l.head] s.heap.head[! l]));
                        (s.heap.nxt <- ([@expl:p.nxt := hd] M.add (! p) (! hd) s.heap.nxt));
                        (s.heap.head <- ([@expl:l.head := p] M.add (! l) (! p) s.heap.head));
                        (let ghost r = ref emptyRgn in
                         (((assert { isValidRgn s (! r) });
                           (assert { ((not (Rgn.mem (! l) (s.alloct.M.domain at INIT))) \/ ((! l) = null)) /\ true });
                           (r := ([@expl:r := l.rep] s.heap.rep[! l]));
                           (s.heap.rep <- ([@expl:l.rep := r union {p}] M.add (! l) (Rgn.union (! r) (singleton (! p))) s.heap.rep));
                           (i := ([@expl:i := i + 1] (! i) + 1))))))))))
                 done);
                (result := ([@expl:result := l] ! l));
                (! result)))))))))))
end

module MAIN
  
  use prelude.Prelude
  use State
end

module MREL
  use prelude.Prelude
  use State
  use M0
  use M1
  
  val init_Node (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (l_v: int) (r_self: reference) (r_v: int) : 
    (unit,
     unit)
    requires { hasNodeType l_s l_self }
    requires { l_self <> null }
    requires { hasNodeType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { ((l_s.heap.nxt[l_self]) = null) /\ ((r_s.heap.nxt[r_self]) = null) }
    requires { l_v = r_v }
    requires { PreRefperm.idRef pi l_self r_self }
    writes { l_s.heap.value }
    writes { r_s.heap.value }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { okRefperm l_s r_s pi }
    ensures { (agree_value l_s r_s pi (singleton l_self)) /\ (agree_value r_s l_s (PreRefperm.invert pi) (singleton r_self)) }
    ensures { ((l_s.heap.value[l_self]) = l_v) /\ ((r_s.heap.value[r_self]) = r_v) }
    ensures { ((l_s.heap.nxt[l_self]) = null) /\ ((r_s.heap.nxt[r_self]) = null) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val init_List (l_s: state) (r_s: state) (pi3: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (unit, unit)
    requires { hasListType l_s l_self }
    requires { l_self <> null }
    requires { hasListType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi3 }
    requires { PreRefperm.idRef pi3 l_self r_self }
    writes { l_s.heap.head }
    writes { l_s.heap.rep }
    writes { r_s.heap.head }
    writes { r_s.heap.rep }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { okRefperm l_s r_s pi3 }
    ensures { ((agree_rep l_s r_s pi3 (singleton l_self)) /\ (agree_rep r_s l_s (PreRefperm.invert pi3) (singleton r_self))) /\
                ((agree_head l_s r_s pi3 (singleton l_self)) /\ (agree_head r_s l_s (PreRefperm.invert pi3) (singleton r_self))) }
    ensures { (M0.I.rep_closed l_s l_self) /\ (M1.I.rep_closed r_s r_self) }
    ensures { ((l_s.heap.rep[l_self]) = (singleton null)) /\ ((r_s.heap.rep[r_self]) = (singleton null)) }
    ensures { ((l_s.heap.head[l_self]) = null) /\ ((r_s.heap.head[r_self]) = null) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val f (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_i: int) (r_i: int) : 
    (int, int)
    requires { okRefperm l_s r_s pi }
    requires { l_i = r_i }
    requires { (l_i >= 0) /\ (r_i >= 0) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
  
  let tabulate (l_s: state) (r_s: state) (pi4: PreRefperm.t) (l_n: int) (r_n: int) : 
    (reference, reference)
    requires { okRefperm l_s r_s pi4 }
    requires { l_n = r_n }
    requires { (l_n > 0) /\ (r_n > 0) }
    writes { pi4 }
    writes { l_s.alloct }
    writes { r_s.alloct }
    writes { l_s.heap.head }
    writes { l_s.heap.nxt }
    writes { l_s.heap.rep }
    writes { l_s.heap.value }
    writes { r_s.heap.head }
    writes { r_s.heap.nxt }
    writes { r_s.heap.rep }
    writes { r_s.heap.value }
    ensures { match result with | (l_result, _) -> (hasListType l_s l_result) end }
    ensures { match result with | (_, r_result) -> (hasListType r_s r_result) end }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {}`head] wrs_to_head_framed_by (old l_s) l_s emptyRgn }
    ensures { [@expl:wr {}`rep] wrs_to_rep_framed_by (old l_s) l_s emptyRgn }
    ensures { [@expl:wr {}`value] wrs_to_value_framed_by (old l_s) l_s emptyRgn }
    ensures { [@expl:wr {}`nxt] wrs_to_nxt_framed_by (old l_s) l_s emptyRgn }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {}`head] wrs_to_head_framed_by (old r_s) r_s emptyRgn }
    ensures { [@expl:wr {}`rep] wrs_to_rep_framed_by (old r_s) r_s emptyRgn }
    ensures { [@expl:wr {}`value] wrs_to_value_framed_by (old r_s) r_s emptyRgn }
    ensures { [@expl:wr {}`nxt] wrs_to_nxt_framed_by (old r_s) r_s emptyRgn }
    ensures { okRefperm l_s r_s pi4 }
    ensures { match result with | (l_result, r_result) -> (PreRefperm.idRef pi4 l_result r_result) end }
    ensures { let l_s_alloc = old l_s.alloct.M.domain in
              let r_s_alloc = old r_s.alloct.M.domain in
              (agree_allfields l_s r_s pi4 (Rgn.diff l_s.alloct.M.domain l_s_alloc)) /\
                (agree_allfields r_s l_s (PreRefperm.invert pi4) (Rgn.diff r_s.alloct.M.domain r_s_alloc)) }
    ensures { match result with | (l_result, r_result) -> ((not (l_result = null)) /\ (not (r_result = null))) end } =
    label INIT in
      let l_result = ref null in
      (let r_result = ref null in
       (let l_n = ref l_n in
        (let r_n = ref r_n in
         (let l_l = ref null in
          (let r_l = ref null in
           (let l_p = ref null in
            (let r_p = ref null in
             (let l_i = ref 0 in
              (let r_i = ref 0 in
               (((((l_l := ([@expl:l := new List] mk_List l_s));
                   (r_l := ([@expl:l := new List] mk_List r_s))));
                 (PreRefperm.updateRefperm pi4 (! l_l) (! r_l));
                 (match [@expl:List(l)] init_List l_s r_s pi4 (! l_l) (! r_l) with | _ -> () end);
                 (((l_i := ([@expl:i := 0] 0));
                   (r_i := ([@expl:i := 1] 1))));
                 (while (! l_i) < (! l_n) do
                    invariant { [@expl:lockstep] ((! l_i) < (! l_n)) = ((! r_i) <= (! r_n)) }
                    invariant {
                      [@expl:locals type invariant left]
                      (hasListType l_s (! l_l)) /\ ((hasNodeType l_s (! l_p)) /\ (hasListType l_s (! l_result))) }
                    invariant {
                      [@expl:locals type invariant right]
                      (hasListType r_s (! r_l)) /\ ((hasNodeType r_s (! r_p)) /\ (hasListType r_s (! r_result))) }
                    invariant { alloc_does_not_shrink (old l_s) l_s }
                    invariant { [@expl:wr {l}`rep`nxt] wrs_to_nxt_framed_by (old l_s) l_s (l_s.heap.rep[! l_l]) }
                    invariant { [@expl:wr {l}`rep`head] wrs_to_head_framed_by (old l_s) l_s (l_s.heap.rep[! l_l]) }
                    invariant {
                      [@expl:wr ({l} union {l}`rep)`rep]
                      wrs_to_rep_framed_by (old l_s) l_s (Rgn.union (singleton (! l_l)) (l_s.heap.rep[! l_l])) }
                    invariant { [@expl:wr {l}`rep`value] wrs_to_value_framed_by (old l_s) l_s (l_s.heap.rep[! l_l]) }
                    invariant { alloc_does_not_shrink (old l_s) l_s }
                    invariant { alloc_does_not_shrink (old r_s) r_s }
                    invariant { [@expl:wr {l}`rep`nxt] wrs_to_nxt_framed_by (old r_s) r_s (r_s.heap.rep[! r_l]) }
                    invariant { [@expl:wr {l}`rep`head] wrs_to_head_framed_by (old r_s) r_s (r_s.heap.rep[! r_l]) }
                    invariant {
                      [@expl:wr ({l} union {l}`rep)`rep]
                      wrs_to_rep_framed_by (old r_s) r_s (Rgn.union (singleton (! r_l)) (r_s.heap.rep[! r_l])) }
                    invariant { [@expl:wr {l}`rep`value] wrs_to_value_framed_by (old r_s) r_s (r_s.heap.rep[! r_l]) }
                    invariant { alloc_does_not_shrink (old r_s) r_s }
                    invariant { okRefperm l_s r_s pi4 }
                    invariant {
                      let l_s_alloc = old l_s.alloct.M.domain in
                      let r_s_alloc = old r_s.alloct.M.domain in
                      (Rgn.subset (Rgn.diff (Rgn.diff l_s.alloct.M.domain l_s_alloc) (singleton (! l_l))) (l_s.heap.rep[! l_l])) /\
                        (Rgn.subset (Rgn.diff (Rgn.diff r_s.alloct.M.domain r_s_alloc) (singleton (! r_l))) (r_s.heap.rep[! r_l])) }
                    invariant {
                      (agree_allfields l_s r_s pi4 (l_s.heap.rep[! l_l])) /\
                        (agree_allfields r_s l_s (PreRefperm.invert pi4) (r_s.heap.rep[! r_l])) }
                    invariant {
                      let l_s_alloc = old l_s.alloct.M.domain in
                      let r_s_alloc = old r_s.alloct.M.domain in
                      (agree_allfields l_s r_s pi4 (Rgn.diff l_s.alloct.M.domain l_s_alloc)) /\
                        (agree_allfields r_s l_s (PreRefperm.invert pi4) (Rgn.diff r_s.alloct.M.domain r_s_alloc)) }
                    invariant {
                      (PreRefperm.idRef pi4 (! l_l) (! r_l)) /\
                        (((agree_rep l_s r_s pi4 (singleton (! l_l))) /\
                            (agree_rep r_s l_s (PreRefperm.invert pi4) (singleton (! r_l)))) /\
                           ((agree_head l_s r_s pi4 (singleton (! l_l))) /\
                              (agree_head r_s l_s (PreRefperm.invert pi4) (singleton (! r_l))))) }
                    invariant { ((! l_i) + 1) = (! r_i) }
                    invariant {
                      (let s_alloc = old l_s.alloct.M.domain in
                       let rep5 = l_s.heap.rep[! l_l] in
                       rep5 \# s_alloc) /\
                        (let s_alloc = old r_s.alloct.M.domain in
                         let rep6 = r_s.heap.rep[! r_l] in
                         rep6 \# s_alloc) }
                    invariant {
                      ((M0.I.rep_closed l_s (! l_l)) /\ (M1.I.rep_closed r_s (! r_l))) /\
                        ((let rep7 = l_s.heap.rep[! l_l] in
                          Rgn.mem (! l_p) rep7) /\
                           (let rep8 = r_s.heap.rep[! r_l] in
                            Rgn.mem (! r_p) rep8)) }
                    invariant { ((0 <= (! l_i)) /\ ((! l_i) <= (! l_n))) /\ ((1 <= (! r_i)) /\ ((! r_i) <= ((! r_n) + 1))) }
                    let l_k = ref 0 in
                    (let r_k = ref 0 in
                     (((((l_i := ([@expl:i := i + 1] (! l_i) + 1));
                         ()));
                       (assert { (! l_i) = (! r_i) });
                       (match f l_s r_s pi4 (! l_i) (! r_i)
                        with | (l_f_res, r_f_res) -> (((l_k := ([@expl:k := f(i)] l_f_res));
                                                       (r_k := ([@expl:k := f(i)] r_f_res))))
                        end);
                       (assert { (! l_k) = (! r_k) });
                       (((l_p := ([@expl:p := new Node] mk_Node l_s));
                         (r_p := ([@expl:p := new Node] mk_Node r_s))));
                       (PreRefperm.updateRefperm pi4 (! l_p) (! r_p));
                       (match [@expl:Node(p,k)] init_Node l_s r_s pi4 (! l_p) (! l_k) (! r_p) (! r_k) with | _ -> () end);
                       (assert {
                          (agree_allfields l_s r_s pi4 (singleton (! l_p))) /\
                            (agree_allfields r_s l_s (PreRefperm.invert pi4) (singleton (! r_p))) });
                       (let l_hd = ref null in
                        (let r_hd = ref null in
                         (((((l_hd := ([@expl:hd := l.head] l_s.heap.head[! l_l]));
                             (r_hd := ([@expl:hd := l.head] r_s.heap.head[! r_l]))));
                           (((l_s.heap.nxt <- ([@expl:p.nxt := hd] M.add (! l_p) (! l_hd) l_s.heap.nxt));
                             (r_s.heap.nxt <- ([@expl:p.nxt := hd] M.add (! r_p) (! r_hd) r_s.heap.nxt))));
                           (((l_s.heap.head <- ([@expl:l.head := p] M.add (! l_l) (! l_p) l_s.heap.head));
                             (r_s.heap.head <- ([@expl:l.head := p] M.add (! r_l) (! r_p) r_s.heap.head))));
                           (assert {
                              (agree_head l_s r_s pi4 (singleton (! l_l))) /\
                                (agree_head r_s l_s (PreRefperm.invert pi4) (singleton (! r_l))) });
                           (assert {
                              (agree_rep l_s r_s pi4 (singleton (! l_l))) /\
                                (agree_rep r_s l_s (PreRefperm.invert pi4) (singleton (! r_l))) });
                           (assert {
                              (agree_allfields l_s r_s pi4 (l_s.heap.rep[! l_l])) /\
                                (agree_allfields r_s l_s (PreRefperm.invert pi4) (r_s.heap.rep[! r_l])) });
                           (let ghost l_r = ref emptyRgn in
                            (let ghost r_r = ref emptyRgn in
                             (((((l_r := ([@expl:r := l.rep] l_s.heap.rep[! l_l]));
                                 (r_r := ([@expl:r := l.rep] r_s.heap.rep[! r_l]))));
                               (((l_s.heap.rep <-
                                    ([@expl:l.rep := r union {p}] M.add (! l_l) (Rgn.union (! l_r) (singleton (! l_p))) l_s.heap.rep));
                                 (r_s.heap.rep <-
                                    ([@expl:l.rep := r union {p}] M.add (! r_l) (Rgn.union (! r_r) (singleton (! r_p))) r_s.heap.rep))));
                               (assert {
                                  (agree_rep l_s r_s pi4 (singleton (! l_l))) /\
                                    (agree_rep r_s l_s (PreRefperm.invert pi4) (singleton (! r_l))) });
                               (assert {
                                  (agree_allfields l_s r_s pi4 (l_s.heap.rep[! l_l])) /\
                                    (agree_allfields r_s l_s (PreRefperm.invert pi4) (r_s.heap.rep[! r_l])) });
                               ((();
                                 (r_i := ([@expl:i := i + 1] (! r_i) + 1))));
                               (assume {
                                  ((M0.I.rep_closed l_s (! l_l)) /\ (M1.I.rep_closed r_s (! r_l))) /\
                                    ((let rep9 = l_s.heap.rep[! l_l] in
                                      Rgn.mem (! l_p) rep9) /\
                                       (let rep10 = r_s.heap.rep[! r_l] in
                                        Rgn.mem (! r_p) rep10)) });
                               (assume {
                                  (let s_alloc = old l_s.alloct.M.domain in
                                   let rep11 = l_s.heap.rep[! l_l] in
                                   rep11 \# s_alloc) /\
                                    (let s_alloc = old r_s.alloct.M.domain in
                                     let rep12 = r_s.heap.rep[! r_l] in
                                     rep12 \# s_alloc) }))))))))))))
                  done);
                 (l_result := ([@expl:result := l] ! l_l));
                 (r_result := ([@expl:result := l] ! r_l));
                 (! l_result, ! r_result))))))))))))
end

module MREL_biinterface
  
  use prelude.Prelude
  use State
  use M0
  use M1
  
  val init_Node (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (l_v: int) (r_self: reference) (r_v: int) : 
    (unit,
     unit)
    requires { hasNodeType l_s l_self }
    requires { l_self <> null }
    requires { hasNodeType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { ((l_s.heap.nxt[l_self]) = null) /\ ((r_s.heap.nxt[r_self]) = null) }
    requires { l_v = r_v }
    requires { PreRefperm.idRef pi l_self r_self }
    writes { l_s.heap.value }
    writes { r_s.heap.value }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { okRefperm l_s r_s pi }
    ensures { (agree_value l_s r_s pi (singleton l_self)) /\ (agree_value r_s l_s (PreRefperm.invert pi) (singleton r_self)) }
    ensures { ((l_s.heap.value[l_self]) = l_v) /\ ((r_s.heap.value[r_self]) = r_v) }
    ensures { ((l_s.heap.nxt[l_self]) = null) /\ ((r_s.heap.nxt[r_self]) = null) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val init_List (l_s: state) (r_s: state) (pi13: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (unit, unit)
    requires { hasListType l_s l_self }
    requires { l_self <> null }
    requires { hasListType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi13 }
    requires { PreRefperm.idRef pi13 l_self r_self }
    writes { l_s.heap.head }
    writes { l_s.heap.rep }
    writes { r_s.heap.head }
    writes { r_s.heap.rep }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`head] wrs_to_head_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { okRefperm l_s r_s pi13 }
    ensures { ((agree_rep l_s r_s pi13 (singleton l_self)) /\ (agree_rep r_s l_s (PreRefperm.invert pi13) (singleton r_self))) /\
                ((agree_head l_s r_s pi13 (singleton l_self)) /\ (agree_head r_s l_s (PreRefperm.invert pi13) (singleton r_self))) }
    ensures { (M0.I.rep_closed l_s l_self) /\ (M1.I.rep_closed r_s r_self) }
    ensures { ((l_s.heap.rep[l_self]) = (singleton null)) /\ ((r_s.heap.rep[r_self]) = (singleton null)) }
    ensures { ((l_s.heap.head[l_self]) = null) /\ ((r_s.heap.head[r_self]) = null) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val f (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_i: int) (r_i: int) : 
    (int, int)
    requires { okRefperm l_s r_s pi }
    requires { l_i = r_i }
    requires { (l_i >= 0) /\ (r_i >= 0) }
    ensures { okRefperm l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
  
  val tabulate (l_s: state) (r_s: state) (pi14: PreRefperm.t) (l_n: int) (r_n: int) : 
    (reference, reference)
    requires { okRefperm l_s r_s pi14 }
    requires { l_n = r_n }
    requires { (l_n > 0) /\ (r_n > 0) }
    writes { l_s.alloct }
    writes { r_s.alloct }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi14 }
    ensures { match result with | (l_result, r_result) -> (PreRefperm.idRef pi14 l_result r_result) end }
    ensures { let l_s_alloc = old l_s.alloct.M.domain in
              let r_s_alloc = old r_s.alloct.M.domain in
              (agree_allfields l_s r_s pi14 (Rgn.diff l_s.alloct.M.domain l_s_alloc)) /\
                (agree_allfields r_s l_s (PreRefperm.invert pi14) (Rgn.diff r_s.alloct.M.domain r_s_alloc)) }
    ensures { match result with | (l_result, r_result) -> ((not (l_result = null)) /\ (not (r_result = null))) end }
end

