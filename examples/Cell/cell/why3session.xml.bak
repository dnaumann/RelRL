<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="30" steplimit="0" memlimit="12000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="cell.mlw"/>
<theory name="State" proved="true">
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="139"/></proof>
 </goal>
</theory>
<theory name="CELL" proved="true">
 <goal name="emptyPoolCellP" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="48"/></proof>
 </goal>
</theory>
<theory name="ACell" proved="true">
 <goal name="init_Cell&#39;vc" expl="VC for init_Cell" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Cell&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="918"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="94"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="82"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.5" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="98"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.6" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="102"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.08" steps="6661"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="125"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="4607"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="3341"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cset&#39;vc" expl="VC for cset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cset&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="cset&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="280"/></proof>
  </goal>
  <goal name="cset&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="cset&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="cset&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="52"/></proof>
  </goal>
  <goal name="cset&#39;vc.5" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="69"/></proof>
  </goal>
  <goal name="cset&#39;vc.6" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="64"/></proof>
  </goal>
  <goal name="cset&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1181"/></proof>
  </goal>
  <goal name="cset&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="461"/></proof>
  </goal>
  <goal name="cset&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1618"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cget&#39;vc" expl="VC for cget" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cget&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="44"/></proof>
  </goal>
  <goal name="cget&#39;vc.1" expl="result := self.value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="47"/></proof>
  </goal>
  <goal name="cget&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="cget&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="25"/></proof>
  </goal>
  <goal name="cget&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="cget&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="cget&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_ACell" proved="true">
 <proof prover="0"><result status="valid" time="0.51" steps="2549"/></proof>
 </goal>
</theory>
<theory name="BCell" proved="true">
 <goal name="init_Cell&#39;vc" expl="VC for init_Cell" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Cell&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="923"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="96"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.5" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="100"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.6" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="104"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.71" steps="6671"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="127"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="4610"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="3381"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="36"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="921"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="96"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="40"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.16" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="100"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.17" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="104"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.49" steps="6670"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="127"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="4609"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="3380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cset&#39;vc" expl="VC for cset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cset&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="cset&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="284"/></proof>
  </goal>
  <goal name="cset&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="cset&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="cset&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="cset&#39;vc.5" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="71"/></proof>
  </goal>
  <goal name="cset&#39;vc.6" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="66"/></proof>
  </goal>
  <goal name="cset&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1184"/></proof>
  </goal>
  <goal name="cset&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="464"/></proof>
  </goal>
  <goal name="cset&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1537"/></proof>
  </goal>
  <goal name="cset&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="26"/></proof>
  </goal>
  <goal name="cset&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="282"/></proof>
  </goal>
  <goal name="cset&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="cset&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="cset&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="cset&#39;vc.15" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="71"/></proof>
  </goal>
  <goal name="cset&#39;vc.16" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="cset&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1183"/></proof>
  </goal>
  <goal name="cset&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="463"/></proof>
  </goal>
  <goal name="cset&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1536"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cget&#39;vc" expl="VC for cget" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cget&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="44"/></proof>
  </goal>
  <goal name="cget&#39;vc.1" expl="value := self.value" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="47"/></proof>
  </goal>
  <goal name="cget&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="25"/></proof>
  </goal>
  <goal name="cget&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="27"/></proof>
  </goal>
  <goal name="cget&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="62"/></proof>
  </goal>
  <goal name="cget&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="cget&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_BCell" proved="true">
 <proof prover="0"><result status="valid" time="0.87" steps="4781"/></proof>
 </goal>
</theory>
<theory name="CELL_REL" proved="true">
 <goal name="init_Cell&#39;vc" expl="VC for init_Cell" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Cell&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="68"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="86"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2381"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="230"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="92"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="2583"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="245"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.7" expl="wr {self}`rep" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.11" steps="245"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.8" expl="wr {self}`value" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.07" steps="249"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.05" steps="227"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.10" expl="wr {self}`rep" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.07" steps="257"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.11" expl="wr {self}`value" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.10" steps="261"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.05" steps="239"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.20" steps="1105"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="33.77" steps="156710"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.09" steps="287"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.07" steps="117"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="4.12" steps="18354"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.06" steps="124"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init_Cell&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="6.46" steps="16055"/></proof>
   </goal>
   <goal name="init_Cell&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="6.48" steps="14497"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="init_Cell&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.05" steps="128"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="68"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="86"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="2377"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="230"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="92"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="2579"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="245"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.28" expl="wr {self}`rep" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.12" steps="245"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.29" expl="wr {self}`value" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.11" steps="249"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.06" steps="227"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.31" expl="wr {self}`rep" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.12" steps="257"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.32" expl="wr {self}`value" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.11" steps="261"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.08" steps="239"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.23" steps="1103"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.35" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="init_Cell&#39;vc.35.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Cell&#39;vc.35.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="1.27" steps="6353"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.35.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.53" steps="3113"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.35.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.69" steps="3166"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.35.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="3.89" steps="18055"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.35.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.23" steps="1467"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Cell&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.12" steps="287"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.07" steps="117"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="5.29" steps="22851"/></proof>
  </goal>
  <goal name="init_Cell&#39;vc.39" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="init_Cell&#39;vc.39.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Cell&#39;vc.39.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.04" steps="106"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.39.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.03" steps="104"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.39.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.03" steps="104"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.39.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.04" steps="106"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.39.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.08" steps="314"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Cell&#39;vc.40" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="init_Cell&#39;vc.40.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Cell&#39;vc.40.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="2.23" steps="6219"/></proof>
    </goal>
    <goal name="init_Cell&#39;vc.40.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="2.25" steps="6256"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Cell&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0" timelimit="200" memlimit="16000"><result status="valid" time="0.03" steps="128"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cset&#39;vc" expl="VC for cset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cset&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.87" steps="4630"/></proof>
  </goal>
  <goal name="cset&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="cset&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="794"/></proof>
  </goal>
  <goal name="cset&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="70"/></proof>
  </goal>
  <goal name="cset&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="cset&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="855"/></proof>
  </goal>
  <goal name="cset&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="76"/></proof>
  </goal>
  <goal name="cset&#39;vc.7" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="162"/></proof>
  </goal>
  <goal name="cset&#39;vc.8" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="187"/></proof>
  </goal>
  <goal name="cset&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="170"/></proof>
  </goal>
  <goal name="cset&#39;vc.10" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="178"/></proof>
  </goal>
  <goal name="cset&#39;vc.11" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="203"/></proof>
  </goal>
  <goal name="cset&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="186"/></proof>
  </goal>
  <goal name="cset&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="908"/></proof>
  </goal>
  <goal name="cset&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.22" steps="18243"/></proof>
  </goal>
  <goal name="cset&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
  <goal name="cset&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="2821"/></proof>
  </goal>
  <goal name="cset&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="98"/></proof>
  </goal>
  <goal name="cset&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="99"/></proof>
  </goal>
  <goal name="cset&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="16.63" steps="84961"/></proof>
  </goal>
  <goal name="cset&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="103"/></proof>
  </goal>
  <goal name="cset&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="cset&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="790"/></proof>
  </goal>
  <goal name="cset&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="cset&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="cset&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="851"/></proof>
  </goal>
  <goal name="cset&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="76"/></proof>
  </goal>
  <goal name="cset&#39;vc.27" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="162"/></proof>
  </goal>
  <goal name="cset&#39;vc.28" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="187"/></proof>
  </goal>
  <goal name="cset&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="170"/></proof>
  </goal>
  <goal name="cset&#39;vc.30" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="178"/></proof>
  </goal>
  <goal name="cset&#39;vc.31" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="203"/></proof>
  </goal>
  <goal name="cset&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="186"/></proof>
  </goal>
  <goal name="cset&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="906"/></proof>
  </goal>
  <goal name="cset&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.98" steps="10489"/></proof>
  </goal>
  <goal name="cset&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="91"/></proof>
  </goal>
  <goal name="cset&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="2819"/></proof>
  </goal>
  <goal name="cset&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="98"/></proof>
  </goal>
  <goal name="cset&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="99"/></proof>
  </goal>
  <goal name="cset&#39;vc.39" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="cset&#39;vc.39.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="cset&#39;vc.39.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="1315"/></proof>
    </goal>
    <goal name="cset&#39;vc.39.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="1315"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="cset&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cget&#39;vc" expl="VC for cget" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cget&#39;vc.0" expl="result := self.value" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="108"/></proof>
  </goal>
  <goal name="cget&#39;vc.1" expl="value := self.value" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="113"/></proof>
  </goal>
  <goal name="cget&#39;vc.2" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="cget&#39;vc.3" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="58"/></proof>
  </goal>
  <goal name="cget&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="cget&#39;vc.5" expl="wr {self}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="62"/></proof>
  </goal>
  <goal name="cget&#39;vc.6" expl="wr {self}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="cget&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="cget&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="66"/></proof>
  </goal>
  <goal name="cget&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="cget&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="cget&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="199"/></proof>
  </goal>
  <goal name="cget&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="cget&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="70"/></proof>
  </goal>
  <goal name="cget&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="cget&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_coupling_CELL_REL" proved="true">
 <proof prover="0"><result status="valid" time="1.69" steps="7410"/></proof>
 </goal>
 <goal name="cellC_is_refperm_monotonic" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="cellC_is_refperm_monotonic.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="cellC_is_refperm_monotonic.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="cellC_is_refperm_monotonic.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.06" steps="105"/></proof>
    </goal>
    <goal name="cellC_is_refperm_monotonic.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.05" steps="10"/></proof>
    </goal>
    <goal name="cellC_is_refperm_monotonic.0.0.2" proved="true">
    <proof prover="0"><result status="valid" time="0.05" steps="10"/></proof>
    </goal>
    <goal name="cellC_is_refperm_monotonic.0.0.3" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="129"/></proof>
    </goal>
    <goal name="cellC_is_refperm_monotonic.0.0.4" proved="true">
    <transf name="unfold" proved="true" arg1="cellC" arg2="in" arg3="H10">
     <goal name="cellC_is_refperm_monotonic.0.0.4.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H10">
      <goal name="cellC_is_refperm_monotonic.0.0.4.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.02" steps="20"/></proof>
      </goal>
      <goal name="cellC_is_refperm_monotonic.0.0.4.0.1" proved="true">
      <transf name="instantiate" proved="true" arg1="H10" arg2="l_c,r_c">
       <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.1" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.2" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.3" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.02" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.4" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.5" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.02" steps="28"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.6" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.10" steps="553"/></proof>
        </goal>
        <goal name="cellC_is_refperm_monotonic.0.0.4.0.1.0.7" proved="true">
        <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main" proved="true">
 <goal name="main&#39;vc" expl="VC for main" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="12"/></proof>
  </goal>
  <goal name="main&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="34"/></proof>
  </goal>
  <goal name="main&#39;vc.2" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="34"/></proof>
  </goal>
  <goal name="main&#39;vc.3" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="main&#39;vc.4" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="main&#39;vc.5" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="38"/></proof>
  </goal>
  <goal name="main&#39;vc.6" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="main&#39;vc.7" expl="Cell(c,k)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="41"/></proof>
  </goal>
  <goal name="main&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="54"/></proof>
  </goal>
  <goal name="main&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="main&#39;vc.10" expl="cset(c,x)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.11" expl="cset(c,x)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.12" expl="cset(c,x)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.13" expl="cset(c,x)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.14" expl="cset(c,x)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="59"/></proof>
  </goal>
  <goal name="main&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="72"/></proof>
  </goal>
  <goal name="main&#39;vc.16" expl="result := cget(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="74"/></proof>
  </goal>
  <goal name="main&#39;vc.17" expl="result := cget(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="74"/></proof>
  </goal>
  <goal name="main&#39;vc.18" expl="result := cget(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="74"/></proof>
  </goal>
  <goal name="main&#39;vc.19" expl="result := cget(c)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="75"/></proof>
  </goal>
  <goal name="main&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="610"/></proof>
  </goal>
  <goal name="main&#39;vc.21" expl="wr {}`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="1315"/></proof>
  </goal>
  <goal name="main&#39;vc.22" expl="wr {}`value" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1307"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main_Link" proved="true">
 <goal name="cellP_holds_in_main" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="17"/></proof>
 </goal>
 <goal name="left_cellI_holds_in_main" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="59"/></proof>
 </goal>
 <goal name="right_cellI_holds_in_main" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="68"/></proof>
 </goal>
 <goal name="cellC_holds_in_main" proved="true">
 <proof prover="0"><result status="valid" time="0.13" steps="539"/></proof>
 </goal>
</theory>
</file>
</why3session>
