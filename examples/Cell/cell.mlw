module State
  
  use prelude.Prelude
  use prelude.PreRefperm
  
  type reftype = 
    | Cell
  
  type heap = {
    mutable ghost rep : M.t rgn ;
    mutable value : M.t int
  }
  
  type state = {
    mutable heap : heap ;
    mutable ghost alloct : M.t reftype ;
    mutable ghost pool : rgn
  }invariant { not (null \: alloct) }
  invariant {
    forall p: reference.
      (p \: alloct) ->
        (((alloct[p]) = Cell) ->
           (((p \: heap.rep) /\ (p \: heap.value)) /\ (forall q: reference. (Rgn.mem q (heap.rep[p])) -> ((q = null) \/ (q \: alloct))))) }
  invariant { forall q: reference. (Rgn.mem q pool) -> ((q = null) \/ (q \: alloct)) }
   by { heap = (any heap) ;
  alloct = (M.create ()) ;
  pool = emptyRgn }
  
  predicate isAllocated (s: state) (p: reference) = p \: s.alloct
  
  predicate isValidRgn (s: state) (r: rgn) = forall q: reference. (Rgn.mem q r) -> ((q = null) \/ (q \: s.alloct))
  
  predicate typeofRgn (s: state) (r: rgn) (types: L.list reftype) =
    forall p: reference. (Rgn.mem p r) -> ((p = null) \/ ((p \: s.alloct) /\ (L.mem (s.alloct[p]) types)))
  
  predicate hasCellType (s: state) (p: reference) = (p = null) \/ ((p \: s.alloct) /\ ((s.alloct[p]) = Cell))
  
  predicate okRefperm (sl: state) (sr: state) (pi: PreRefperm.t) =
    (forall p: reference. (p \: pi.lor) -> (p \: sl.alloct)) /\
      ((forall q: reference. (q \: pi.rol) -> (q \: sr.alloct)) /\
         (forall p: reference, q: reference. (p \: pi.lor) -> (((pi.lor[p]) = q) -> ((sl.alloct[p]) = (sr.alloct[q])))))
  
  val mk_Cell (s: state) : reference
    writes { s.alloct }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { not (result \: (old s.alloct)) }
    ensures { s.alloct = (M.add result Cell (old s.alloct)) }
    ensures { forall p: reference. (p \: (old s.alloct)) -> ((p \: s.alloct) /\ (((old s.alloct)[p]) = (s.alloct[p]))) }
    ensures { result <> null }
    ensures { hasCellType s result }
    ensures { s.heap.rep = (M.add result emptyRgn (old s.heap.rep)) }
    ensures { s.heap.value = (M.add result 0 (old s.heap.value)) }
  
  function img_value : state -> (rgn -> rgn)
  
  axiom img_value_ax : forall s: state, r: rgn. (img_value s r) = emptyRgn
  
  function img_rep : state -> (rgn -> rgn)
  
  axiom img_rep_ax : forall s: state, r: rgn, p: reference.
                       (Rgn.mem p (img_rep s r)) <->
                         (exists q: reference.
                            (q \: s.alloct) /\ (((s.alloct[q]) = Cell) /\ ((Rgn.mem q r) /\ (Rgn.mem p (s.heap.rep[q])))))
  
  predicate alloc_does_not_shrink (pre: state) (post: state) =
    forall p: reference. (p \: pre.alloct) -> ((p \: post.alloct) /\ ((pre.alloct[p]) = (post.alloct[p])))
  
  predicate wrs_to_rep_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = Cell) -> ((not (Rgn.mem p r)) -> ((pre.heap.rep[p]) = (post.heap.rep[p]))))
  
  predicate wrs_to_value_framed_by (pre: state) (post: state) (r: rgn) =
    forall p: reference.
      (p \: pre.alloct) -> (((post.alloct[p]) = Cell) -> ((not (Rgn.mem p r)) -> ((pre.heap.value[p]) = (post.heap.value[p]))))
  
  predicate agree_value (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasCellType sl o) ->
              ((Rgn.mem o w) -> ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] (sl.heap.value[o]) = (sr.heap.value[pi.lor[o]]))))))
  
  predicate agree_rep (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) =
    (okRefperm sl sr pi) /\
      (forall o: reference.
         (isAllocated sl o) ->
           ((hasCellType sl o) ->
              ((Rgn.mem o w) ->
                 ((o \: pi.lor) /\ ([@expl:sl(o) ~ sr(pi(o))] PreRefperm.idRgn pi (sl.heap.rep[o]) (sr.heap.rep[pi.lor[o]]))))))
  
  predicate agree_allfields (sl: state) (sr: state) (pi: PreRefperm.t) (w: rgn) = (agree_rep sl sr pi w) /\ (agree_value sl sr pi w)
end

module CELL
  
  use prelude.Prelude
  use State
  
  predicate cellP (s: state) =
    forall c: reference, d: reference.
      (isAllocated s c) ->
        ((hasCellType s c) ->
           ((Rgn.mem c s.pool) ->
              ((isAllocated s d) ->
                 ((hasCellType s d) ->
                    ((Rgn.mem d s.pool) -> (let crep = s.heap.rep[c] in
                                            let drep = s.heap.rep[d] in
                                            (c <> d) -> (crep \# drep)))))))
  
  lemma emptyPoolCellP : forall s: state. (s.pool = emptyRgn) -> (cellP s)
  
  val init_Cell (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { not (Rgn.mem self s.pool) }
    requires { (s.heap.rep[self]) = emptyRgn }
    requires { k >= 0 }
    requires { cellP s }
    writes { s.heap.rep }
    writes { s.heap.value }
    writes { s.alloct }
    writes { s.pool }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r5 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r5 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { Rgn.mem self s.pool }
    ensures { cellP s }
  
  val cset (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { k >= 0 }
    requires { cellP s }
    writes { s.heap.rep }
    writes { s.heap.value }
    writes { s.alloct }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r5 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r5 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { cellP s }
  
  val cget (s: state) (self: reference) : int
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { cellP s }
    writes { s.alloct }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { let bsnap_r5 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r5 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { result >= 0 }
    ensures { cellP s }
end

module ACell
  
  use prelude.Prelude
  use State
  use CELL
  
  predicate cellI (s: state) =
    forall c: reference.
      (isAllocated s c) ->
        ((hasCellType s c) -> ((Rgn.mem c s.pool) -> (((s.heap.rep[c]) = (singleton c)) /\ (let v = s.heap.value[c] in
                                                                    v >= 0))))
  
  let init_Cell (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { not (Rgn.mem self s.pool) }
    requires { (s.heap.rep[self]) = emptyRgn }
    requires { k >= 0 }
    requires { CELL.cellP s }
    requires { cellI s }
    writes { s.pool }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r1 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r1 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { Rgn.mem self s.pool }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let k = ref k in
        (((s.heap.value <- ([@expl:self.value := k] M.add (! self) (! k) s.heap.value));
          (s.heap.rep <- ([@expl:self.rep := {self}] M.add (! self) (singleton (! self)) s.heap.rep));
          (s.pool <- ([@expl:pool := pool union {self}] Rgn.union s.pool (singleton (! self))));
          (! result)))))
  
  let cset (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { k >= 0 }
    requires { CELL.cellP s }
    requires { cellI s }
    writes { s.heap.value }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r1 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r1 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let k = ref k in
        (((s.heap.value <- ([@expl:self.value := k] M.add (! self) (! k) s.heap.value));
          (! result)))))
  
  let cget (s: state) (self: reference) : int
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { CELL.cellP s }
    requires { cellI s }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { let bsnap_r1 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r1 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { result >= 0 }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref 0 in
      (let self = ref self in
       (((assert {
            ((Rgn.mem (! self) ((singleton (! self)) at INIT)) \/
               ((not (Rgn.mem (! self) (s.alloct.M.domain at INIT))) \/ ((! self) = null))) /\
              true });
         (result := ([@expl:result := self.value] s.heap.value[! self]));
         (! result))))
  
  lemma boundary_frames_invariant_ACell : forall s: state, t: state, pi: 
                                            PreRefperm.t.
                                            (okRefperm s t pi) ->
                                              ((PreRefperm.identity pi s.alloct.M.domain t.alloct.M.domain) ->
                                                 ((PreRefperm.idRgn pi s.pool t.pool) ->
                                                    ((agree_allfields s t pi (Rgn.union s.pool (img_rep s s.pool))) ->
                                                       ((cellI s) -> (cellI t)))))
end

module BCell
  
  use prelude.Prelude
  use State
  use CELL
  
  predicate cellI (s: state) =
    forall c: reference.
      (isAllocated s c) ->
        ((hasCellType s c) -> ((Rgn.mem c s.pool) -> (let v = s.heap.value[c] in
                                                      (v <= 0) /\ ((s.heap.rep[c]) = (singleton c)))))
  
  let init_Cell (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { not (Rgn.mem self s.pool) }
    requires { (s.heap.rep[self]) = emptyRgn }
    requires { k >= 0 }
    requires { CELL.cellP s }
    requires { cellI s }
    writes { s.pool }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r3 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r3 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { Rgn.mem self s.pool }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let k = ref k in
        (((if ((! k) <= 0) then (s.heap.value <- ([@expl:self.value := k] M.add (! self) (! k) s.heap.value))
           else (s.heap.value <- ([@expl:self.value := - k] M.add (! self) (0 - (! k)) s.heap.value)));
          (s.heap.rep <- ([@expl:self.rep := {self}] M.add (! self) (singleton (! self)) s.heap.rep));
          (s.pool <- ([@expl:pool := pool union {self}] Rgn.union s.pool (singleton (! self))));
          (! result)))))
  
  let cset (s: state) (self: reference) (k: int) : unit
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { k >= 0 }
    requires { CELL.cellP s }
    requires { cellI s }
    writes { s.heap.value }
    ensures { result = () }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old s) s (singleton self) }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old s) s (singleton self) }
    ensures { let bsnap_r3 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r3 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref () in
      (let self = ref self in
       (let k = ref k in
        (((if ((! k) <= 0) then (s.heap.value <- ([@expl:self.value := k] M.add (! self) (! k) s.heap.value))
           else (s.heap.value <- ([@expl:self.value := - k] M.add (! self) (0 - (! k)) s.heap.value)));
          (! result)))))
  
  let cget (s: state) (self: reference) : int
    requires { hasCellType s self }
    requires { self <> null }
    requires { Rgn.mem self s.pool }
    requires { CELL.cellP s }
    requires { cellI s }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { let bsnap_r3 = old (Rgn.union s.pool (img_rep s s.pool)) in
              Rgn.subset bsnap_r3 (Rgn.union s.pool (img_rep s s.pool)) }
    ensures { result >= 0 }
    ensures { CELL.cellP s }
    ensures { cellI s } =
    label INIT in
      let result = ref 0 in
      (let self = ref self in
       (let value1 = ref 0 in
        (((assert {
             ((Rgn.mem (! self) ((singleton (! self)) at INIT)) \/
                ((not (Rgn.mem (! self) (s.alloct.M.domain at INIT))) \/ ((! self) = null))) /\
               true });
          (value1 := ([@expl:value := self.value] s.heap.value[! self]));
          (result := ([@expl:result := - value] 0 - (! value1)));
          (! result)))))
  
  lemma boundary_frames_invariant_BCell : forall s: state, t: state, pi: 
                                            PreRefperm.t.
                                            (okRefperm s t pi) ->
                                              ((PreRefperm.identity pi s.alloct.M.domain t.alloct.M.domain) ->
                                                 ((PreRefperm.idRgn pi s.pool t.pool) ->
                                                    ((agree_allfields s t pi (Rgn.union s.pool (img_rep s s.pool))) ->
                                                       ((cellI s) -> (cellI t)))))
end

module CELL_REL
  
  use prelude.Prelude
  use State
  use ACell
  use BCell
  
  predicate cellC (l_s: state) (r_s: state) (pi: PreRefperm.t) =
    (okRefperm l_s r_s pi) ->
      ((PreRefperm.idRgn pi l_s.pool r_s.pool) /\
         (((ACell.cellI l_s) /\ (BCell.cellI r_s)) /\
            ((PreRefperm.idRgn pi (rgnSubK l_s.pool l_s.alloct Cell) (rgnSubK r_s.pool r_s.alloct Cell)) /\
               (forall l_c: reference, r_c: reference.
                  (isAllocated l_s l_c) ->
                    ((hasCellType l_s l_c) ->
                       ((Rgn.mem l_c l_s.pool) ->
                          ((isAllocated r_s r_c) ->
                             ((hasCellType r_s r_c) ->
                                ((Rgn.mem r_c r_s.pool) ->
                                   ((PreRefperm.idRef pi l_c r_c) ->
                                      (let l_v = l_s.heap.value[l_c] in
                                       let r_v = r_s.heap.value[r_c] in
                                       l_v = (0 - r_v))))))))))))
  
  let init_Cell (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (l_k: int) (r_self: reference) (r_k: int) : 
    (unit,
     unit)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { cellC l_s r_s pi }
    requires { (l_k >= 0) /\ (r_k >= 0) }
    requires { PreRefperm.idRef pi l_self r_self }
    requires { l_k = r_k }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rp = l_s.heap.rep[l_self] in
               let r_rp = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi l_rp r_rp }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { ((l_s.heap.rep[l_self]) = emptyRgn) /\ ((r_s.heap.rep[r_self]) = emptyRgn) }
    requires { (not (Rgn.mem l_self l_s.pool)) /\ (not (Rgn.mem r_self r_s.pool)) }
    requires { cellC l_s r_s pi }
    writes { l_s.pool }
    writes { r_s.pool }
    writes { l_s.heap.rep }
    writes { l_s.heap.value }
    writes { r_s.heap.rep }
    writes { r_s.heap.value }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi }
    ensures { cellC l_s r_s pi }
    ensures { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { cellC l_s r_s pi }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end } =
    label INIT in
      let l_result = ref () in
      (let r_result = ref () in
       (let l_self = ref l_self in
        (let l_k = ref l_k in
         (let r_self = ref r_self in
          (let r_k = ref r_k in
           (((((l_s.heap.value <- ([@expl:self.value := k] M.add (! l_self) (! l_k) l_s.heap.value));
               (if ((! r_k) <= 0) then (r_s.heap.value <- ([@expl:self.value := k] M.add (! r_self) (! r_k) r_s.heap.value))
                else (r_s.heap.value <- ([@expl:self.value := - k] M.add (! r_self) (0 - (! r_k)) r_s.heap.value)))));
             (assert {
                (((! l_k) >= 0) /\ ((! r_k) >= 0)) ->
                  (let l_v = l_s.heap.value[! l_self] in
                   let r_v = r_s.heap.value[! r_self] in
                   l_v = (0 - r_v)) });
             (((l_s.heap.rep <- ([@expl:self.rep := {self}] M.add (! l_self) (singleton (! l_self)) l_s.heap.rep));
               (r_s.heap.rep <- ([@expl:self.rep := {self}] M.add (! r_self) (singleton (! r_self)) r_s.heap.rep))));
             (l_s.pool <- ([@expl:pool := pool union {self}] Rgn.union l_s.pool (singleton (! l_self))));
             (r_s.pool <- ([@expl:pool := pool union {self}] Rgn.union r_s.pool (singleton (! r_self))));
             (! l_result, ! r_result))))))))
  
  let cset (l_s: state) (r_s: state) (pi2: PreRefperm.t) (l_self: reference) (l_k: int) (r_self: reference) (r_k: int) : 
    (unit, unit)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi2 }
    requires { cellC l_s r_s pi2 }
    requires { (l_k >= 0) /\ (r_k >= 0) }
    requires { l_k = r_k }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rep = l_s.heap.rep[l_self] in
               let r_rep = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi2 l_rep r_rep }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    requires { cellC l_s r_s pi2 }
    writes { l_s.heap.value }
    writes { r_s.heap.value }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi2 }
    ensures { cellC l_s r_s pi2 }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { let l_rep = l_s.heap.rep[l_self] in
              let r_rep = r_s.heap.rep[r_self] in
              PreRefperm.idRgn pi2 l_rep r_rep }
    ensures { cellC l_s r_s pi2 }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end } =
    label INIT in
      let l_result = ref () in
      (let r_result = ref () in
       (let l_self = ref l_self in
        (let l_k = ref l_k in
         (let r_self = ref r_self in
          (let r_k = ref r_k in
           (((assert { PreRefperm.idRef pi2 (! l_self) (! r_self) });
             (l_s.heap.value <- ([@expl:self.value := k] M.add (! l_self) (! l_k) l_s.heap.value));
             (if ((! r_k) <= 0) then (r_s.heap.value <- ([@expl:self.value := k] M.add (! r_self) (! r_k) r_s.heap.value))
              else (r_s.heap.value <- ([@expl:self.value := - k] M.add (! r_self) (0 - (! r_k)) r_s.heap.value)));
             (! l_result, ! r_result))))))))
  
  let cget (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (int, int)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { cellC l_s r_s pi }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rep = l_s.heap.rep[l_self] in
               let r_rep = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi l_rep r_rep }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    requires { cellC l_s r_s pi }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi }
    ensures { cellC l_s r_s pi }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
    ensures { match result with | (l_result, r_result) -> ((l_result >= 0) /\ (r_result >= 0)) end }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { cellC l_s r_s pi }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) } =
    label INIT in
      let l_result = ref 0 in
      (let r_result = ref 0 in
       (let l_self = ref l_self in
        (let r_self = ref r_self in
         (((l_result := ([@expl:result := self.value] l_s.heap.value[! l_self]));
           (let value3 = ref 0 in
            (((value3 := ([@expl:value := self.value] r_s.heap.value[! r_self]));
              (r_result := ([@expl:result := - value] 0 - (! value3)));
              (! l_result, ! r_result)))))))))
  
  lemma boundary_frames_coupling_CELL_REL : forall s: state, t: state, s': state, t': state, pi4: 
                                              PreRefperm.t, pi': PreRefperm.t, rho: 
                                              PreRefperm.t.
                                              (okRefperm s t pi4) ->
                                                ((okRefperm s' t' pi') ->
                                                   ((PreRefperm.identity pi4 s.alloct.M.domain t.alloct.M.domain) ->
                                                      ((PreRefperm.identity pi' s'.alloct.M.domain t'.alloct.M.domain) ->
                                                         ((okRefperm s s' rho) ->
                                                            ((okRefperm t t' rho) ->
                                                               ((PreRefperm.idRgn pi4 s.pool t.pool) ->
                                                                  ((agree_allfields s t pi4 (Rgn.union s.pool (img_rep s s.pool))) ->
                                                                    ((PreRefperm.idRgn pi' s'.pool t'.pool) ->
                                                                    ((agree_allfields
                                                                    s'
                                                                    t'
                                                                    pi'
                                                                    (Rgn.union s'.pool (img_rep s' s'.pool))) ->
                                                                    ((cellC s s' rho) -> (cellC t t' rho)))))))))))
  
  lemma cellC_is_refperm_monotonic : forall s: state, t: state, pi5: 
                                       PreRefperm.t.
                                       (okRefperm s t pi5) ->
                                         ((cellC s t pi5) ->
                                            (forall rho: PreRefperm.t.
                                               (okRefperm s t rho) -> ((PreRefperm.extends pi5 rho) -> (cellC s t rho))))
end

module CELL_REL_biinterface
  
  use prelude.Prelude
  use State
  use ACell
  use BCell
  
  val init_Cell (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (l_k: int) (r_self: reference) (r_k: int) : 
    (unit,
     unit)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { true /\ true }
    requires { (l_k >= 0) /\ (r_k >= 0) }
    requires { PreRefperm.idRef pi l_self r_self }
    requires { l_k = r_k }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rp = l_s.heap.rep[l_self] in
               let r_rp = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi l_rp r_rp }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { ((l_s.heap.rep[l_self]) = emptyRgn) /\ ((r_s.heap.rep[r_self]) = emptyRgn) }
    requires { (not (Rgn.mem l_self l_s.pool)) /\ (not (Rgn.mem r_self r_s.pool)) }
    requires { true /\ true }
    writes { l_s.heap.rep }
    writes { l_s.heap.value }
    writes { l_s.alloct }
    writes { l_s.pool }
    writes { r_s.heap.rep }
    writes { r_s.heap.value }
    writes { r_s.alloct }
    writes { r_s.pool }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi }
    ensures { true /\ true }
    ensures { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { true /\ true }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val cset (l_s: state) (r_s: state) (pi6: PreRefperm.t) (l_self: reference) (l_k: int) (r_self: reference) (r_k: int) : 
    (unit, unit)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi6 }
    requires { true /\ true }
    requires { (l_k >= 0) /\ (r_k >= 0) }
    requires { l_k = r_k }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rep = l_s.heap.rep[l_self] in
               let r_rep = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi6 l_rep r_rep }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    requires { true /\ true }
    writes { l_s.heap.rep }
    writes { l_s.heap.value }
    writes { l_s.alloct }
    writes { l_s.pool }
    writes { r_s.heap.rep }
    writes { r_s.heap.value }
    writes { r_s.alloct }
    writes { r_s.pool }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi6 }
    ensures { true /\ true }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { let l_rep = l_s.heap.rep[l_self] in
              let r_rep = r_s.heap.rep[r_self] in
              PreRefperm.idRgn pi6 l_rep r_rep }
    ensures { true /\ true }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) }
    ensures { match result with | (l_result, r_result) -> ((l_result = ()) /\ (r_result = ())) end }
  
  val cget (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_self: reference) (r_self: reference) : 
    (int, int)
    requires { hasCellType l_s l_self }
    requires { l_self <> null }
    requires { hasCellType r_s r_self }
    requires { r_self <> null }
    requires { okRefperm l_s r_s pi }
    requires { true /\ true }
    requires { let l_vl = l_s.heap.value[l_self] in
               let r_vl = r_s.heap.value[r_self] in
               l_vl = (0 - r_vl) }
    requires { let l_rep = l_s.heap.rep[l_self] in
               let r_rep = r_s.heap.rep[r_self] in
               PreRefperm.idRgn pi l_rep r_rep }
    requires { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    requires { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    requires { (Rgn.mem l_self l_s.pool) /\ (Rgn.mem r_self r_s.pool) }
    requires { true /\ true }
    writes { l_s.heap.rep }
    writes { l_s.heap.value }
    writes { l_s.alloct }
    writes { l_s.pool }
    writes { r_s.heap.rep }
    writes { r_s.heap.value }
    writes { r_s.alloct }
    writes { r_s.pool }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old l_s) l_s (singleton l_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old l_s) l_s (singleton l_self) }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { [@expl:wr {self}`rep] wrs_to_rep_framed_by (old r_s) r_s (singleton r_self) }
    ensures { [@expl:wr {self}`value] wrs_to_value_framed_by (old r_s) r_s (singleton r_self) }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi }
    ensures { true /\ true }
    ensures { match result with | (l_result, r_result) -> (l_result = r_result) end }
    ensures { match result with | (l_result, r_result) -> ((l_result >= 0) /\ (r_result >= 0)) end }
    ensures { (ACell.cellI l_s) /\ (BCell.cellI r_s) }
    ensures { (ACell.CELL.cellP l_s) /\ (BCell.CELL.cellP r_s) }
    ensures { true /\ true }
    ensures { (let bsnap_r7 = old (Rgn.union l_s.pool (img_rep l_s l_s.pool)) in
               Rgn.subset bsnap_r7 (Rgn.union l_s.pool (img_rep l_s l_s.pool))) /\
                (let bsnap_r7 = old (Rgn.union r_s.pool (img_rep r_s r_s.pool)) in
                 Rgn.subset bsnap_r7 (Rgn.union r_s.pool (img_rep r_s r_s.pool))) }
end

module MAIN
  
  use prelude.Prelude
  use State
end

module Main
  use prelude.Prelude
  use State
  use MAIN
  use CELL
  
  let main (s: state) (x: int) : int
    requires { s.pool = emptyRgn }
    requires { x >= 0 }
    writes { s.alloct }
    writes { s.pool }
    writes { s.heap.rep }
    writes { s.heap.value }
    ensures { alloc_does_not_shrink (old s) s }
    ensures { [@expl:wr {}`rep] wrs_to_rep_framed_by (old s) s emptyRgn }
    ensures { [@expl:wr {}`value] wrs_to_value_framed_by (old s) s emptyRgn } =
    label INIT in
      let result = ref 0 in
      (let x = ref x in
       (let c = ref null in
        (((assert { hasCellType s (! c) });
          (c := ([@expl:c := new Cell] mk_Cell s));
          (let k = ref 0 in
           (((k := ([@expl:k := 0] 0));
             (assert { ((not (Rgn.mem (! c) (s.alloct.M.domain at INIT))) \/ ((! c) = null)) /\ true });
             ([@expl:Cell(c,k)] CELL.init_Cell s (! c) (! k));
             (assert { (! c) \: s.alloct });
             (x := ([@expl:x := x + 1] (! x) + 1));
             (assert { ((not (Rgn.mem (! c) (s.alloct.M.domain at INIT))) \/ ((! c) = null)) /\ true });
             ([@expl:cset(c,x)] CELL.cset s (! c) (! x));
             (assert { ((not (Rgn.mem (! c) (s.alloct.M.domain at INIT))) \/ ((! c) = null)) /\ true });
             (result := ([@expl:result := cget(c)] CELL.cget s (! c)));
             (! result))))))))
end

module Main_Link
  
  use prelude.Prelude
  use State
  use Main
  use CELL_REL
  
  lemma cellP_holds_in_main : forall l_s: state, r_s: state, pi: PreRefperm.t.
                                (okRefperm l_s r_s pi) ->
                                  (forall l_x: int, r_x: int.
                                     ((l_s.pool = emptyRgn) -> ((l_x >= 0) -> (Main.CELL.cellP l_s))) /\
                                       ((r_s.pool = emptyRgn) -> ((r_x >= 0) -> (Main.CELL.cellP r_s))))
  
  lemma left_cellI_holds_in_main : forall l_s: state, r_s: state, pi: 
                                     PreRefperm.t.
                                     (okRefperm l_s r_s pi) ->
                                       (forall l_x: int, r_x: int. (l_s.pool = emptyRgn) -> ((l_x >= 0) -> (CELL_REL.ACell.cellI l_s)))
  
  lemma right_cellI_holds_in_main : forall l_s: state, r_s: state, pi: 
                                      PreRefperm.t.
                                      (okRefperm l_s r_s pi) ->
                                        (forall l_x: int, r_x: int. (r_s.pool = emptyRgn) -> ((r_x >= 0) -> (CELL_REL.BCell.cellI r_s)))
  
  lemma cellC_holds_in_main : forall l_s: state, r_s: state, pi: PreRefperm.t.
                                (okRefperm l_s r_s pi) ->
                                  (forall l_x: int, r_x: int.
                                     ((l_s.pool = emptyRgn) /\ (r_s.pool = emptyRgn)) ->
                                       (((l_x >= 0) /\ (r_x >= 0)) -> ((l_x = r_x) -> (cellC l_s r_s pi))))
  
  val main (l_s: state) (r_s: state) (pi: PreRefperm.t) (l_x: int) (r_x: int) : 
    (int, int)
    requires { okRefperm l_s r_s pi }
    requires { l_x = r_x }
    requires { (l_x >= 0) /\ (r_x >= 0) }
    requires { (l_s.pool = emptyRgn) /\ (r_s.pool = emptyRgn) }
    writes { l_s.alloct }
    writes { l_s.pool }
    writes { r_s.alloct }
    writes { r_s.pool }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old l_s) l_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { alloc_does_not_shrink (old r_s) r_s }
    ensures { okRefperm l_s r_s pi }
    ensures { let l_s_alloc0 = old l_s.alloct.M.domain in
              let r_s_alloc0 = old r_s.alloct.M.domain in
              (l_x = r_x) /\
                ((agree_allfields l_s r_s pi (Rgn.diff l_s.alloct.M.domain l_s_alloc0)) /\
                   (agree_allfields r_s l_s (PreRefperm.invert pi) (Rgn.diff r_s.alloct.M.domain r_s_alloc0))) }
end

