<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="1" name="CVC4" version="1.7" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="2" name="CVC3" version="2.4.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="3" name="Z3" version="4.8.6" timelimit="15" steplimit="0" memlimit="10000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="pqueue.mlw"/>
<theory name="State" proved="true">
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="448"/></proof>
 </goal>
</theory>
<theory name="PqueueL" proved="true">
 <goal name="repClosed_DEF" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="repClosed_DEF.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repClosed_DEF.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="4"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="4"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.2" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="635"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.3" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="635"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.4" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="635"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.5" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="781"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="1.46" steps="4657"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Node&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="150"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="893"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="308"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="516"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="76"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="74"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="94"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.8" expl="wr {self}`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="113"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.9" expl="wr {self}`key" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="117"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1262"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="86"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="87"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="59"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="59"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="173"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="574"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="401"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2503"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="127"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="62"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="128"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="136"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="140"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="144"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="148"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="364"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="156"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="160"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="164"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="168"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.28" steps="11171"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="212"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.23.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.23.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1203"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.23.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.46" steps="10734"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.23.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="3279"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="215"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.25.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.25.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="13.08" steps="47583"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1194"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.93" steps="2749"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.3" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="1346"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="1349"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.5" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="7.11" steps="20711"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="184"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="256"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="45870"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="49496"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="rep := self.rep" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="51548"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="fkey := first.key" proved="true">
  <proof prover="1"><result status="valid" time="0.30" steps="51946"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="skey := second.key" proved="true">
  <proof prover="1"><result status="valid" time="0.30" steps="52698"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="tmp := first.prev" proved="true">
  <proof prover="1"><result status="valid" time="0.31" steps="52801"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.55" steps="75382"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.33" steps="55272"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="tmp := second.child" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="55836"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="tmp := first.sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.33" steps="56410"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1700"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.33" steps="58432"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.29" steps="55864"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="360"/></proof>
  <proof prover="1"><result status="valid" time="0.53" steps="81827"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.31" steps="40652"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1399"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1273"/></proof>
  <proof prover="1"><result status="valid" time="0.38" steps="68019"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.45" steps="60643"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.18.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.18.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.91" steps="4320"/></proof>
    </goal>
    <goal name="link&#39;vc.18.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1056"/></proof>
    </goal>
    <goal name="link&#39;vc.18.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.36" steps="7224"/></proof>
    </goal>
    <goal name="link&#39;vc.18.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="23.42" steps="63390"/></proof>
    </goal>
    <goal name="link&#39;vc.18.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.92" steps="6293"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.31" steps="57794"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.56" steps="87649"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.03" steps="13755"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1265"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.45" steps="69418"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.44" steps="63070"/></proof>
  </goal>
  <goal name="link&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="3.50" steps="11074"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="45722"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="58553"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1426"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="16.85" steps="36706"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1639"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="4.82" steps="435813"/></proof>
  </goal>
  <goal name="link&#39;vc.32" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.32.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.32.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.72" steps="1758"/></proof>
    </goal>
    <goal name="link&#39;vc.32.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.22" steps="8932"/></proof>
    </goal>
    <goal name="link&#39;vc.32.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="999"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.33" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.33.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.33.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="15.47" steps="40494"/></proof>
    </goal>
    <goal name="link&#39;vc.33.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="1551"/></proof>
    </goal>
    <goal name="link&#39;vc.33.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="930"/></proof>
    </goal>
    <goal name="link&#39;vc.33.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="2038"/></proof>
    </goal>
    <goal name="link&#39;vc.33.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="2042"/></proof>
    </goal>
    <goal name="link&#39;vc.33.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.36" steps="9773"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="49531"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="45872"/></proof>
  </goal>
  <goal name="link&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="52501"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="56559"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.54" steps="78074"/></proof>
  </goal>
  <goal name="link&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.53" steps="16607"/></proof>
  </goal>
  <goal name="link&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1301"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.44" steps="66659"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.43" steps="61724"/></proof>
  </goal>
  <goal name="link&#39;vc.43" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.43.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.43.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.46" steps="3871"/></proof>
    </goal>
    <goal name="link&#39;vc.43.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.30" steps="966"/></proof>
    </goal>
    <goal name="link&#39;vc.43.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.97" steps="5677"/></proof>
    </goal>
    <goal name="link&#39;vc.43.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.20" steps="7741"/></proof>
    </goal>
    <goal name="link&#39;vc.43.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.00" steps="5871"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="45226"/></proof>
  </goal>
  <goal name="link&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="57313"/></proof>
  </goal>
  <goal name="link&#39;vc.46" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1173"/></proof>
  </goal>
  <goal name="link&#39;vc.47" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.51" steps="7454"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1197"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.85" steps="211854"/></proof>
  </goal>
  <goal name="link&#39;vc.50" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.50.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.50.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="1334"/></proof>
    </goal>
    <goal name="link&#39;vc.50.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.61" steps="6548"/></proof>
    </goal>
    <goal name="link&#39;vc.50.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="762"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.51" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.51.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.51.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.33" steps="17314"/></proof>
    </goal>
    <goal name="link&#39;vc.51.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1177"/></proof>
    </goal>
    <goal name="link&#39;vc.51.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="711"/></proof>
    </goal>
    <goal name="link&#39;vc.51.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="1557"/></proof>
    </goal>
    <goal name="link&#39;vc.51.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="1557"/></proof>
    </goal>
    <goal name="link&#39;vc.51.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.21" steps="8152"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.52" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="50058"/></proof>
  </goal>
  <goal name="link&#39;vc.53" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="45425"/></proof>
  </goal>
  <goal name="link&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.28" steps="53018"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="tmp := second.sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.31" steps="53549"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.54" steps="77376"/></proof>
  </goal>
  <goal name="link&#39;vc.57" expl="tmp := first.sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.31" steps="54505"/></proof>
  </goal>
  <goal name="link&#39;vc.58" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="114"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="tmp := first.child" proved="true">
  <proof prover="1"><result status="valid" time="0.36" steps="56513"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="tmp := second.sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.33" steps="57273"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1772"/></proof>
  </goal>
  <goal name="link&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="57122"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.58" steps="84492"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="24.67" steps="69791"/></proof>
  </goal>
  <goal name="link&#39;vc.65" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="1418"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.42" steps="67711"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.41" steps="62176"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.68.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.68.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.44" steps="6028"/></proof>
    </goal>
    <goal name="link&#39;vc.68.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="1130"/></proof>
    </goal>
    <goal name="link&#39;vc.68.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.10" steps="10382"/></proof>
    </goal>
    <goal name="link&#39;vc.68.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="12.30" steps="57614"/></proof>
    </goal>
    <goal name="link&#39;vc.68.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.31" steps="6051"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="45916"/></proof>
  </goal>
  <goal name="link&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="383"/></proof>
  <proof prover="1"><result status="valid" time="0.32" steps="57817"/></proof>
  </goal>
  <goal name="link&#39;vc.71" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="3.23" steps="8156"/></proof>
  </goal>
  <goal name="link&#39;vc.72" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="13.27" steps="27849"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1375"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.17" steps="7011"/></proof>
  <proof prover="1"><result status="valid" time="4.85" steps="336227"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.75.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.75.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="1701"/></proof>
    </goal>
    <goal name="link&#39;vc.75.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.86" steps="7884"/></proof>
    </goal>
    <goal name="link&#39;vc.75.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="875"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.76" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.76.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.76.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="11.99" steps="29130"/></proof>
    </goal>
    <goal name="link&#39;vc.76.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="1503"/></proof>
    </goal>
    <goal name="link&#39;vc.76.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.32" steps="824"/></proof>
    </goal>
    <goal name="link&#39;vc.76.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.50" steps="1908"/></proof>
    </goal>
    <goal name="link&#39;vc.76.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="1911"/></proof>
    </goal>
    <goal name="link&#39;vc.76.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.07" steps="9339"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="260"/></proof>
  <proof prover="1"><result status="valid" time="0.25" steps="49757"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="46080"/></proof>
  </goal>
  <goal name="link&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="257"/></proof>
  <proof prover="1"><result status="valid" time="0.25" steps="52741"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.30" steps="57444"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.61" steps="81345"/></proof>
  </goal>
  <goal name="link&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.63" steps="27537"/></proof>
  </goal>
  <goal name="link&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1010"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="2091"/></proof>
  <proof prover="1"><result status="valid" time="0.44" steps="67132"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.40" steps="62622"/></proof>
  </goal>
  <goal name="link&#39;vc.86" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.86.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.86.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.89" steps="4515"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1029"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.52" steps="8269"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.90" steps="8538"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.27" steps="5295"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="45575"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="58231"/></proof>
  </goal>
  <goal name="link&#39;vc.89" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.59" steps="7052"/></proof>
  </goal>
  <goal name="link&#39;vc.90" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.89" steps="7651"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1140"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.87" steps="268631"/></proof>
  </goal>
  <goal name="link&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="35.60" steps="89035"/></proof>
  </goal>
  <goal name="link&#39;vc.94" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.94.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.94.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.05" steps="19534"/></proof>
    </goal>
    <goal name="link&#39;vc.94.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="925"/></proof>
    </goal>
    <goal name="link&#39;vc.94.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="764"/></proof>
    </goal>
    <goal name="link&#39;vc.94.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1642"/></proof>
    </goal>
    <goal name="link&#39;vc.94.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1497"/></proof>
    </goal>
    <goal name="link&#39;vc.94.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.86" steps="9660"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27" steps="50575"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="45770"/></proof>
  </goal>
  <goal name="link&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="53549"/></proof>
  </goal>
  <goal name="link&#39;vc.98" expl="tmp := first.child" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="55967"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="tmp := second.sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.33" steps="57009"/></proof>
  </goal>
  <goal name="link&#39;vc.100" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1453"/></proof>
  </goal>
  <goal name="link&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="204"/></proof>
  <proof prover="1"><result status="valid" time="0.33" steps="57240"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.53" steps="80848"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.90" steps="23504"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1079"/></proof>
  </goal>
  <goal name="link&#39;vc.105" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.43" steps="67164"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="210"/></proof>
  <proof prover="1"><result status="valid" time="0.42" steps="62244"/></proof>
  </goal>
  <goal name="link&#39;vc.107" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.107.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.107.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.47" steps="3870"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="200"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.80" steps="6127"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.07" steps="7932"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.57" steps="5037"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="210"/></proof>
  <proof prover="1"><result status="valid" time="0.16" steps="45564"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="58031"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.58" steps="7427"/></proof>
  </goal>
  <goal name="link&#39;vc.111" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.87" steps="8438"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1256"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="4.17" steps="248915"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="20.57" steps="44162"/></proof>
  </goal>
  <goal name="link&#39;vc.115" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.115.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.115.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.64" steps="18182"/></proof>
    </goal>
    <goal name="link&#39;vc.115.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="907"/></proof>
    </goal>
    <goal name="link&#39;vc.115.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="750"/></proof>
    </goal>
    <goal name="link&#39;vc.115.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="1770"/></proof>
    </goal>
    <goal name="link&#39;vc.115.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="1645"/></proof>
    </goal>
    <goal name="link&#39;vc.115.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.47" steps="8268"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.116" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.23" steps="50417"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="225"/></proof>
  <proof prover="1"><result status="valid" time="0.15" steps="45759"/></proof>
  </goal>
  <goal name="link&#39;vc.118" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="53387"/></proof>
  </goal>
  <goal name="link&#39;vc.119" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="55986"/></proof>
  </goal>
  <goal name="link&#39;vc.120" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.55" steps="76239"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.31" steps="18283"/></proof>
  </goal>
  <goal name="link&#39;vc.122" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="837"/></proof>
  </goal>
  <goal name="link&#39;vc.123" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.45" steps="64629"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="178"/></proof>
  <proof prover="1"><result status="valid" time="0.42" steps="60654"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.125.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.125.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.52" steps="3366"/></proof>
    </goal>
    <goal name="link&#39;vc.125.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="168"/></proof>
    </goal>
    <goal name="link&#39;vc.125.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.73" steps="6396"/></proof>
    </goal>
    <goal name="link&#39;vc.125.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.87" steps="5713"/></proof>
    </goal>
    <goal name="link&#39;vc.125.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.70" steps="4540"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.126" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="178"/></proof>
  <proof prover="1"><result status="valid" time="0.17" steps="45223"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="284"/></proof>
  <proof prover="1"><result status="valid" time="0.30" steps="56687"/></proof>
  </goal>
  <goal name="link&#39;vc.128" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.02" steps="6174"/></proof>
  </goal>
  <goal name="link&#39;vc.129" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="305"/></proof>
  </goal>
  <goal name="link&#39;vc.130" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1027"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.96" steps="4559"/></proof>
  <proof prover="1"><result status="valid" time="2.95" steps="205313"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.132.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.132.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.32" steps="1285"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="5627"/></proof>
    </goal>
    <goal name="link&#39;vc.132.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="736"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.133" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.133.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.133.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.94" steps="14335"/></proof>
    </goal>
    <goal name="link&#39;vc.133.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1144"/></proof>
    </goal>
    <goal name="link&#39;vc.133.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.26" steps="685"/></proof>
    </goal>
    <goal name="link&#39;vc.133.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1509"/></proof>
    </goal>
    <goal name="link&#39;vc.133.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1506"/></proof>
    </goal>
    <goal name="link&#39;vc.133.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="5504"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.134" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="196"/></proof>
  <proof prover="1"><result status="valid" time="0.24" steps="50008"/></proof>
  </goal>
  <goal name="link&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="193"/></proof>
  <proof prover="1"><result status="valid" time="0.16" steps="45449"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="193"/></proof>
  <proof prover="1"><result status="valid" time="0.25" steps="52978"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.14" steps="1216"/></proof>
 </goal>
 <goal name="img_rep_lem" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="0"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="8.87" steps="30529"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="62"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="66"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="68"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="19.76" steps="39479"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="876"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="14.22" steps="36095"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="497"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="238"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="150"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="429"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="1782"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1671"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.89" steps="15696"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="156"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="2151"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="2235"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2458"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.22.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.22.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.50" steps="1265"/></proof>
    </goal>
    <goal name="insert&#39;vc.22.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="10.36" steps="23147"/></proof>
    </goal>
    <goal name="insert&#39;vc.22.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="6.03" steps="13971"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.23" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="17.16" steps="31086"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.24.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.24.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.24.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.24.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="7.60" steps="16139"/></proof>
      </goal>
      <goal name="insert&#39;vc.24.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.34" steps="3635"/></proof>
      </goal>
      <goal name="insert&#39;vc.24.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="8.44" steps="17769"/></proof>
      </goal>
      <goal name="insert&#39;vc.24.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="8.09" steps="17769"/></proof>
      </goal>
      <goal name="insert&#39;vc.24.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="8.25" steps="17769"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.24.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1212"/></proof>
    </goal>
    <goal name="insert&#39;vc.24.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.91" steps="3375"/></proof>
    </goal>
    <goal name="insert&#39;vc.24.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="2394"/></proof>
    </goal>
    <goal name="insert&#39;vc.24.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="2336"/></proof>
    </goal>
    <goal name="insert&#39;vc.24.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="24.64" steps="61889"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="162"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="340"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="170"/></proof>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="198"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="1796"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="200"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="403"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="235"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="692"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="2755"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1663"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.60" steps="15789"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="241"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="239"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="451"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="1724"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="423"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="427"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="431"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="wr ({self}`rep union {})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.84" steps="2591"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="2415"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.77" steps="3407"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="2668"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="2178"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0"><result status="valid" time="1.60" steps="2991"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="2198"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="481"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="2788"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="489"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.54.0" expl="VC for insert" proved="true">
   <transf name="rewrite" proved="true" arg1="union_def">
    <goal name="insert&#39;vc.54.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def">
     <goal name="insert&#39;vc.54.0.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.54.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.54.0.0.0.0.0" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.54.0.0.0.0.0.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.54.0.0.0.0.0.0.0" expl="VC for insert" proved="true">
         <transf name="split_premise_right" proved="true" >
          <goal name="insert&#39;vc.54.0.0.0.0.0.0.0.0" expl="VC for insert" proved="true">
          <proof prover="0"><result status="valid" time="3.77" steps="9694"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="insert&#39;vc.54.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.13" steps="271"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.55" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.55.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.55.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.69" steps="3136"/></proof>
    </goal>
    <goal name="insert&#39;vc.55.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Assert9">
     <goal name="insert&#39;vc.55.0.1.0" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="52.05" steps="20976"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.55.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="1333"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="273"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="276"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="278"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="278"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="279"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="17.65" steps="14012"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.62.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.62.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.62.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.62.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node (Nil : list reftype)))">
       <goal name="insert&#39;vc.62.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.47" steps="1332"/></proof>
       </goal>
       <goal name="insert&#39;vc.62.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.35" steps="631"/></proof>
       </goal>
      </transf>
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Assert7">
       <goal name="insert&#39;vc.62.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="28.75" steps="17481"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.62.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.91" steps="4206"/></proof>
      </goal>
      <goal name="insert&#39;vc.62.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="17.87" steps="15118"/></proof>
      </goal>
      <goal name="insert&#39;vc.62.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="17.71" steps="15118"/></proof>
      </goal>
      <goal name="insert&#39;vc.62.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="17.75" steps="15118"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.62.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="6.41" steps="8080"/></proof>
    </goal>
    <goal name="insert&#39;vc.62.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="4.81" steps="7507"/></proof>
    </goal>
    <goal name="insert&#39;vc.62.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.26" steps="11491"/></proof>
    </goal>
    <goal name="insert&#39;vc.62.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.29" steps="11459"/></proof>
    </goal>
    <goal name="insert&#39;vc.62.0.5" expl="VC for insert" proved="true">
    <proof prover="2"><result status="valid" time="34.55"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="170"/></proof>
  </goal>
  <goal name="insert&#39;vc.64" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="348"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="172"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="724"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="174"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="360"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="176"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="176"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2159"/></proof>
  </goal>
  <goal name="insert&#39;vc.72" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="181"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="181"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="244"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="487"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="276"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="703"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="1362"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.80" steps="1901"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="22.88" steps="44116"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="282"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="278"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="535"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.04" steps="10749"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="503"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="507"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="511"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="wr ({self}`rep union {})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="51.16" steps="17159"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0"><result status="valid" time="51.05" steps="16908"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="50.40" steps="18477"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="wr ({self}`rep union {})`child" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="insert&#39;vc.91.0" expl="VC for insert" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.91.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.31" steps="4601"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.92" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="1"><result status="valid" time="2.65" steps="196257"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="wr ({self}`rep union {})`tag" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_tag_framed_by">
   <goal name="insert&#39;vc.93.0" expl="VC for insert" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.93.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.32" steps="4627"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.94" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="43.47" steps="22711"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="561"/></proof>
  <proof prover="1"><result status="valid" time="0.43" steps="70969"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="wr ({self}`rep union {})`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_key_framed_by">
   <goal name="insert&#39;vc.96.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.96.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.58" steps="4248"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.97" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="569"/></proof>
  <proof prover="1"><result status="valid" time="0.43" steps="71141"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.98.0" expl="VC for insert" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="insert&#39;vc.98.0.0" expl="VC for insert" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.98.0.0.0" expl="VC for insert" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.98.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.98.0.0.0.0.0" expl="VC for insert" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.98.0.0.0.0.0.0" expl="VC for insert" proved="true">
        <proof prover="0"><result status="valid" time="15.34" steps="24219"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.98.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="0.15" steps="310"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.99" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.99.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.99.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.57" steps="5470"/></proof>
    </goal>
    <goal name="insert&#39;vc.99.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures26">
     <goal name="insert&#39;vc.99.0.1.0" expl="VC for insert" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="insert&#39;vc.99.0.1.0.0" expl="VC for insert" proved="true">
      <proof prover="1"><result status="valid" time="8.62" steps="572117"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.99.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="1912"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.100" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.97" steps="4355"/></proof>
  <proof prover="1"><result status="valid" time="16.96" steps="610107"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="318"/></proof>
  <proof prover="1"><result status="valid" time="0.25" steps="53626"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="320"/></proof>
  <proof prover="1"><result status="valid" time="0.46" steps="72619"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="318"/></proof>
  <proof prover="1"><result status="valid" time="0.25" steps="53308"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="319"/></proof>
  <proof prover="1"><result status="valid" time="0.28" steps="53334"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.29" steps="235050"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.106.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.106.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.106.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.106.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="insert&#39;vc.106.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.39" steps="1935"/></proof>
       </goal>
       <goal name="insert&#39;vc.106.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.52" steps="1942"/></proof>
       </goal>
      </transf>
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures33">
       <goal name="insert&#39;vc.106.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="2"><result status="valid" time="32.19"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.106.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="1"><result status="valid" time="2.18" steps="158386"/></proof>
      </goal>
      <goal name="insert&#39;vc.106.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.93"/></proof>
      </goal>
      <goal name="insert&#39;vc.106.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.91"/></proof>
      </goal>
      <goal name="insert&#39;vc.106.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.65"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.106.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="27.07" steps="18024"/></proof>
    <proof prover="1"><result status="valid" time="43.92" steps="3039638"/></proof>
    </goal>
    <goal name="insert&#39;vc.106.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="24.54" steps="23290"/></proof>
    <proof prover="1"><result status="valid" time="2.59" steps="161390"/></proof>
    </goal>
    <goal name="insert&#39;vc.106.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="37.02" steps="24777"/></proof>
    </goal>
    <goal name="insert&#39;vc.106.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="34.57" steps="24394"/></proof>
    </goal>
    <goal name="insert&#39;vc.106.0.5" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="nodeP">
     <goal name="insert&#39;vc.106.0.5.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.106.0.5.0.0" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(p = self)">
       <goal name="insert&#39;vc.106.0.5.0.0.0" expl="true case" proved="true">
       <proof prover="2"><result status="valid" time="26.25"/></proof>
       </goal>
       <goal name="insert&#39;vc.106.0.5.0.0.1" expl="false case" proved="true">
       <proof prover="2"><result status="valid" time="35.36"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="array size" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="128"/></proof>
  <proof prover="1"><result status="valid" time="0.45" steps="61200"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="158"/></proof>
  <proof prover="1"><result status="valid" time="0.46" steps="64092"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.11" steps="12265"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.22" steps="6358"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="current := handle.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.65" steps="2157"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.20" steps="310"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="314"/></proof>
  <proof prover="1"><result status="valid" time="0.31" steps="58813"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="318"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.23.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.23.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.23.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.23.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
       <goal name="combineAux&#39;vc.23.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.46" steps="4988"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.23.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.38" steps="1493"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.23.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.47" steps="6063"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.23.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.01" steps="5708"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.23.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.00" steps="5708"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.23.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="1051"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.23.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1286"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.23.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1434"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.23.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1421"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.23.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.48" steps="4146"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.24.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.24.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="1247"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.24.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="76.54" steps="3989941"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.24.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1351"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="loop invariant init" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.25.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.25.0.0" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.25.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="388"/></proof>
     <proof prover="1"><result status="valid" time="0.87" steps="92515"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.25.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1184"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.2" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.52"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.3" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.69"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.4" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.54"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="204"/></proof>
  <proof prover="1"><result status="valid" time="0.74" steps="69344"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.92" steps="3531"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="4.81"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl="tmp := current.prev" proved="true">
  <proof prover="2"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="1793"/></proof>
  <proof prover="1"><result status="valid" time="11.03" steps="857930"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="26.93" steps="47827"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.38.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.23" steps="1966"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="304"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.68" steps="1963"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="304"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.38.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="9.07" steps="19539"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.38.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="11.45" steps="19208"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="4.78"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.57"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.48" steps="2625"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.13" steps="4427"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="544"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="548"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.47.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.47.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.47.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.47.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s2 s2.heap.rep[p] (Cons Node Nil))">
       <goal name="combineAux&#39;vc.47.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.14" steps="556291"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.49" steps="693"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.47.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.46" steps="3156"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.47.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="101.49" steps="47729"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.47.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="7.99" steps="10339"/></proof>
      <proof prover="2"><result status="valid" time="2.37"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.47.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="8.95" steps="10339"/></proof>
      <proof prover="2"><result status="valid" time="1.90"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.47.0.1" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="1.66" steps="119839"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="1.19" steps="114816"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.3" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="1.67" steps="121736"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.4" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="1.74" steps="122515"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="42.90" steps="14142"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.48.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.48.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.52" steps="2322"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.48.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.48.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.35" steps="326"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.48.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="31.81" steps="13453"/></proof>
     <proof prover="1" timelimit="20" memlimit="12000"><result status="timeout" time="28.00" steps="2397114"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.48.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="1567"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.49.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.49.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="661"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.49.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="328"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.49.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.16" steps="5311"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.49.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.63" steps="1337"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.49.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="1337"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.05" steps="1368"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="12.04" steps="14701"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="3.60" steps="6603"/></proof>
  <proof prover="1"><result status="valid" time="10.18" steps="672540"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="10.13" steps="14574"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="current := current.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.59.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.88" steps="1915"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.59.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="278"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.59.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.99" steps="1919"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.59.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="278"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.59.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.59.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="6.85" steps="14776"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.59.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="7.22" steps="13893"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="5.81"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.29" steps="2125"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.51" steps="573"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="510"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="514"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.68.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.68.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.68.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.68.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 s1.heap.rep[p] (Cons Node Nil))">
       <goal name="combineAux&#39;vc.68.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.72" steps="1330"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.68.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.54" steps="658"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.68.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.43" steps="2892"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.68.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="7.23" steps="9441"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.68.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="8.66" steps="9466"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.68.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="7.10" steps="9466"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.68.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2084"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.68.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1288"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.68.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.91" steps="3971"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.68.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.82" steps="3356"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.68.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="33.16" steps="13890"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.69.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.69.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.18" steps="2375"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.69.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.69.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="299"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.69.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="30.84" steps="12484"/></proof>
     <proof prover="1" timelimit="20" memlimit="12000"><result status="timeout" time="20.00" steps="1342451"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.69.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.80" steps="1461"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="5.58"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="6.59" steps="8477"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.92" steps="5659"/></proof>
  <proof prover="1"><result status="valid" time="8.04" steps="512355"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.71" steps="11937"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.77" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="20.81" steps="38029"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.75"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.16" steps="2074"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.52" steps="549"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="490"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="494"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.93.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.93.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.93.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.93.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="19.23" steps="30933"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.93.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.04" steps="2569"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.93.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.60" steps="5603"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.93.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="3.15" steps="5584"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.93.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.71" steps="5584"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.93.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.63" steps="1818"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.93.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="1161"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.93.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.98" steps="3147"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.93.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.90" steps="2688"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.93.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.27" steps="6894"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.94.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.94.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="2067"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.94.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="LoopInvariant7">
     <goal name="combineAux&#39;vc.94.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="16.89" steps="26203"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.94.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.58" steps="1334"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.83" steps="3851"/></proof>
  <proof prover="2"><result status="timeout" time="60.00"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.91" steps="4030"/></proof>
  <proof prover="2"><result status="timeout" time="60.00"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.97" steps="4267"/></proof>
  <proof prover="1"><result status="valid" time="5.08" steps="307789"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.98" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="667"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.74" steps="674"/></proof>
  <proof prover="2"><result status="timeout" time="95.00"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.113" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.117.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="19.97" steps="25001"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.117.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="9.90" steps="16289"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="12.44"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="wr {trees}`slots" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.122.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.43" steps="4678"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.93" steps="873"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.50"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.125" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.56"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
   <goal name="combineAux&#39;vc.128.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="combineAux&#39;vc.128.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.128.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="rewrite" proved="true" arg1="repClosed_DEF">
      <goal name="combineAux&#39;vc.128.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.128.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="41.29" steps="31154"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.128.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.34" steps="3046"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.128.0.0.0.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.69" steps="5758"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.128.0.0.0.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="4.25" steps="5758"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.128.0.0.0.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="4.21" steps="5758"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.128.0.0.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.40" steps="3257"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.128.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.03" steps="2448"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.128.0.0.3" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.40" steps="3261"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.128.0.0.4" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.30" steps="3265"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.128.0.0.5" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="56.98" steps="4389792"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
   <goal name="combineAux&#39;vc.129.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="combineAux&#39;vc.129.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.129.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="0.54" steps="78355"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.129.0.0.1" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.129.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.23" steps="443"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.129.0.0.1.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.129.0.0.1.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="17.21" steps="21955"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.129.0.0.1.1.0.0" expl="VC for combineAux" proved="true">
        <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
         <goal name="combineAux&#39;vc.129.0.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.27" steps="4273"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.129.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="0.68" steps="78549"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="10.62" steps="13981"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="8.73" steps="12056"/></proof>
  <proof prover="1"><result status="valid" time="20.73" steps="1557856"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="17.35" steps="24698"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.136" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="674"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="105.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.153.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="18.17" steps="24982"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.153.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="11.00" steps="16296"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.27" steps="3771"/></proof>
  <proof prover="1"><result status="valid" time="0.69" steps="84223"/></proof>
  <proof prover="2"><result status="valid" time="11.53"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="timeout" time="25.00"/></proof>
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.158.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.38" steps="4685"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.159" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.37" steps="878"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="886"/></proof>
  <proof prover="1"><result status="valid" time="1.26" steps="124487"/></proof>
  <proof prover="2"><result status="valid" time="1.61"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.162.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.162.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.162.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.162.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures10">
       <goal name="combineAux&#39;vc.162.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="45.14" steps="31162"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.162.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="3.82" steps="5277"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.162.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="27.55" steps="21889"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.162.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="28.06" steps="21889"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.162.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="27.88" steps="21889"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.162.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.31" steps="3727"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.162.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.99" steps="2461"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.162.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.65" steps="8134"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.162.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.15" steps="7898"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.162.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.162.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.92" steps="3052"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.162.0.5.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="combineAux&#39;vc.162.0.5.1.0" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.08" steps="9919"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.163.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.163.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.01" steps="3901"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.163.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures11">
     <goal name="combineAux&#39;vc.163.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.163.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.25" steps="445"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.163.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.163.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="17.13" steps="21966"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.163.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="18.49" steps="21966"/></proof>
        <proof prover="3" timelimit="30" memlimit="12000"><result status="timeout" time="30.00" steps="20571289"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.163.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.40" steps="2699"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="11.49" steps="14547"/></proof>
  <proof prover="1"><result status="valid" time="18.76" steps="1082284"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="7.15" steps="12064"/></proof>
  <proof prover="1"><result status="valid" time="18.00" steps="1488173"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="18.22" steps="24706"/></proof>
  <proof prover="1"><result status="valid" time="19.41" steps="1333680"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.67"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.174" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="983"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="990"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.183" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.187.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="8.53" steps="5605"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.187.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.90" steps="562"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.187.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="11.27" steps="5601"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.187.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.91" steps="562"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.187.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.187.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="1"><result status="valid" time="59.96" steps="5621793"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="20.49" steps="16868"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="28.83"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="3.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="1.42"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="timeout" time="25.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.192.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.37" steps="8707"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.60" steps="1189"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="2.70"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="2.84"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.196.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.196.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.196.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.196.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.196.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="3.00" steps="4584"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.196.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.59" steps="3677"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.196.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="1"><result status="valid" time="3.66" steps="221691"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.196.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.61"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.196.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="2.06"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.196.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.74"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.196.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.78" steps="6469"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.196.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.34" steps="3623"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.196.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="10.13" steps="18137"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.196.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="6.82" steps="10456"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.196.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.196.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="3.61" steps="4532"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.196.0.5.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="4.59" steps="265507"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.197.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.197.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="7.84" steps="6750"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.197.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.197.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="0" timelimit="25" memlimit="12000"><result status="timeout" time="25.00"/></proof>
     <proof prover="1"><result status="timeout" time="120.00" steps="11553122"/></proof>
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.197.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.48" steps="589"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.197.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.197.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.197.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
        <proof prover="1" timelimit="30" memlimit="12000"><result status="valid" time="3.94" steps="297657"/></proof>
        <proof prover="3" timelimit="30" memlimit="12000"><result status="timeout" time="30.00" steps="22108500"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.197.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.43" steps="3904"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.52" steps="607"/></proof>
  <proof prover="1"><result status="valid" time="0.41" steps="58778"/></proof>
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="54.09" steps="38396"/></proof>
  <proof prover="1"><result status="valid" time="49.83" steps="2462052"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="40.16" steps="3196673"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="40.65" steps="2909505"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57" steps="969"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="wr {}`slots" proved="true">
  <proof prover="2"><result status="valid" time="24.73"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="wr {}`length" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="timeout" time="25.00"/></proof>
  <proof prover="2"><result status="timeout" time="60.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.211.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.51" steps="5553"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.212.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.212.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.212.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.212.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.04" steps="1013"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.212.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.60" steps="501"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.38" steps="336"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.41" steps="336"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="336"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="345"/></proof>
  <proof prover="1"><result status="valid" time="0.52" steps="72431"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="345"/></proof>
  <proof prover="1"><result status="valid" time="0.47" steps="68919"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.42" steps="345"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.12" steps="774"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="781"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.47"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.247.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="35.05" steps="32330"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.247.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="16.97" steps="20642"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="14.67"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.09"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.82"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="timeout" time="25.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.252.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.66" steps="6046"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.38" steps="981"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.254" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.80"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.255" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.256" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.256.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.256.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.256.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.256.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.256.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.86" steps="3542"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.256.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.38" steps="2850"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.256.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="1"><result status="valid" time="2.43" steps="165768"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.256.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="45.23" steps="24112"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.256.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="45.79" steps="26040"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.256.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="40.21" steps="24114"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.256.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.33" steps="4265"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.256.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.64" steps="2799"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.256.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.60" steps="10767"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.256.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="7.54" steps="11288"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.256.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.256.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.85" steps="3494"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.256.0.5.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="3.05" steps="188420"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.257" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.257.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.257.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.66" steps="4589"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.257.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.257.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.257.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.31" steps="501"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.257.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.257.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.257.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="1" timelimit="30" memlimit="12000"><result status="valid" time="2.43" steps="209436"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.257.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.22" steps="3065"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.258" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.259" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="24.43" steps="21977"/></proof>
  <proof prover="1"><result status="valid" time="25.05" steps="1396911"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.260" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="20.71" steps="24325"/></proof>
  <proof prover="1"><result status="valid" time="25.68" steps="1886989"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.261" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="24.77" steps="27151"/></proof>
  <proof prover="1"><result status="valid" time="23.25" steps="1687368"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.262" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="709"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.263" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="400"/></proof>
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.264" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="404"/></proof>
  <proof prover="1"><result status="valid" time="0.39" steps="71943"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.265" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="755"/></proof>
  <proof prover="2"><result status="valid" time="29.49"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.266" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="405"/></proof>
  <proof prover="1"><result status="valid" time="0.18" steps="49671"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.267" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.11" steps="2668"/></proof>
  <proof prover="1"><result status="valid" time="1.94" steps="122763"/></proof>
  <proof prover="2"><result status="valid" time="9.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.268" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="407"/></proof>
  <proof prover="1"><result status="valid" time="0.21" steps="50574"/></proof>
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.269" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="407"/></proof>
  <proof prover="1"><result status="valid" time="0.21" steps="50577"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.270" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="407"/></proof>
  <proof prover="1"><result status="valid" time="0.21" steps="50580"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.271" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="3.01" steps="4807"/></proof>
  <proof prover="1"><result status="timeout" time="60.00" steps="8616370"/></proof>
  <proof prover="2"><result status="timeout" time="60.00"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.272" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.272.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.272.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="797"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.273" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="411"/></proof>
  <proof prover="1"><result status="valid" time="0.17" steps="49809"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.274" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="411"/></proof>
  <proof prover="1"><result status="valid" time="0.17" steps="49812"/></proof>
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.275" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="414"/></proof>
  <proof prover="1"><result status="valid" time="0.43" steps="76179"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="26"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="57"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="40"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="48"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="53"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="80"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="61"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="100"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="256"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="632"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="616"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="3804"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="158"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="162"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="wr ({self}`rep union {self} union {})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="190"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="194"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="198"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="202"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="206"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="854"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="214"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="218"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="222"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="893"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self}`rep union {self} union {})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="234"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.08" steps="5038"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="267"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.34.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.34.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="965"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.34.0.1" expl="VC for deleteMin" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures29">
     <goal name="deleteMin&#39;vc.34.0.1.0" expl="VC for deleteMin" proved="true">
     <proof prover="0"><result status="valid" time="7.86" steps="8533"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.34.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="700"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="143"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="143"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="150"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.38.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.38.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.38.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.38.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.38.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.20" steps="677"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.38.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0"><result status="valid" time="0.15" steps="329"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.38.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="0.52" steps="1049"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.38.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="3.05" steps="3155"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.38.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="3.02" steps="3155"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.38.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="3.03" steps="3155"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.38.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.40" steps="2458"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.38.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.45" steps="2947"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.38.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.54" steps="3228"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.38.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.51" steps="3246"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.38.0.5" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.38.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.11" steps="653"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.38.0.5.1" expl="VC for deleteMin" proved="true">
     <proof prover="0"><result status="valid" time="0.65" steps="2602"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="42"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="205"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="44"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="622"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="206"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="341"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="889"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="857"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.79" steps="6957"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="153"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="151"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="489"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="995"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="wr ({self}`rep union {self} union {})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="293"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="279"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="283"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="305"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="309"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="1984"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="317"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="303"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="307"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="2051"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self}`rep union {self} union {})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="333"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="319"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="323"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="4.91" steps="249614"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.73.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.73.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.94" steps="1871"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.73.0.1" expl="VC for deleteMin" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures26">
     <goal name="deleteMin&#39;vc.73.0.1.0" expl="VC for deleteMin" proved="true">
     <proof prover="1"><result status="valid" time="4.92" steps="484591"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.73.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="1128"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="190"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="190"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="197"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.77.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.77.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.77.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.77.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.77.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.38" steps="1312"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.77.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0"><result status="valid" time="0.20" steps="415"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.77.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="1.39" steps="2117"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.77.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="11.88" steps="8515"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.77.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="11.99" steps="8515"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.77.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="12.09" steps="8515"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.77.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="2.12" steps="2705"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.77.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="3.88" steps="5155"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.77.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="4.42" steps="7089"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.77.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="4.49" steps="7304"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.77.0.5" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.77.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.33" steps="1281"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.77.0.5.1" expl="VC for deleteMin" proved="true">
     <proof prover="0"><result status="valid" time="2.67" steps="5567"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.05" steps="310448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.03" steps="19034"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.06" steps="308878"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="tmp := self.head" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.09" steps="345164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := handle.sibling" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.10" steps="356723"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="pos := handle.prev" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.10" steps="358949"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="tmp := handle.prev" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.15" steps="462033"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="2590"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="pos := tmp.child" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="2.56" steps="2841452"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="pos := handle.sibling" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.11" steps="370384"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.11" steps="348275"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="283"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="55.66" steps="34612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="680"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1629"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.12" steps="381836"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.06" steps="162428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="pos := self.head" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.12" steps="383693"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="assertion" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.15" steps="418144"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.11" steps="356044"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.30" steps="17208"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="911"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="2567"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.15" steps="394424"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.14" steps="377952"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.04" steps="20431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.25" steps="505787"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.03" steps="20445"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.16" steps="416718"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.04" steps="20459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.07" steps="173086"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.13" steps="398266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.33.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.33.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="1640"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.33.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.33.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="3.03" steps="387911"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.33.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="760"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.34.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.34.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.34.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="11.59" steps="1311667"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.34.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="1"><result status="valid" time="39.52" steps="4517788"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.34.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.54" steps="2021"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.34.0.0.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="1"><result status="valid" time="1.52" steps="131490"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.34.0.0.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="1"><result status="valid" time="4.20" steps="305535"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.34.0.0.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="1"><result status="valid" time="1.90" steps="154112"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.34.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.64" steps="86933"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.34.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.62" steps="87777"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.34.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.67" steps="90713"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.34.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.63" steps="89198"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.34.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.34.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.23" steps="693"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.34.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.34.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.34.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <transf name="unfold" proved="true" arg1="nodeP" arg2="in" arg3="h">
        <goal name="decreaseKey&#39;vc.34.0.5.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="n">
         <goal name="decreaseKey&#39;vc.34.0.5.1.0.0.0.0" expl="VC for decreaseKey" proved="true">
         <proof prover="0"><result status="valid" time="0.56" steps="2599"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.34.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.37" steps="2164"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.10" steps="371860"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="541"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="15.54" steps="31458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.14" steps="422608"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.03" steps="21008"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.11" steps="377402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.11" steps="377777"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.12" steps="378149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="2208"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="33.36" steps="14803"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="2217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="2231"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.13" steps="379724"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.14" steps="422825"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.15" steps="423777"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="3" timelimit="60"><result status="valid" time="0.14" steps="424337"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="495"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.55.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.55.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.55.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.55.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.24" steps="514"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.55.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.14" steps="297"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.56.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.56.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.89" steps="3074"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.56.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="287"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="8.44" steps="690922"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="1260"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="303"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.58.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.58.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.58.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="8.44" steps="618934"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.58.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.76" steps="2892"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.58.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.96" steps="3855"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.58.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.14" steps="5055"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.58.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.37" steps="6094"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.58.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.58.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.27" steps="1158"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.58.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.58.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.58.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.23" steps="4944"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.58.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.62" steps="4945"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="2053"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="294"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.00" steps="24457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="725"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="1900"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="282"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="193"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="12.21" steps="24276"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="971"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.80" steps="2638"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="582"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="304"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.85.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.85.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1958"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.85.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.85.0.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.15" steps="54685"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.85.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="4.13" steps="522981"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.85.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="796"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.86.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.86.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.86.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="6.41" steps="682665"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.86.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2034"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.86.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="732"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.86.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="2436"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.86.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="2459"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.86.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.86.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="729"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.86.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.86.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.86.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="0.91" steps="162576"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.86.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.70" steps="2542"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="271"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1134"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="20.98" steps="31513"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="273"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.97.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="0.62" steps="4127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.58" steps="3050"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.58" steps="3048"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="489"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="433"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="437"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="441"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="445"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="509"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.107.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.107.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="525"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.108.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.108.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.43" steps="82928"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.108.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.108.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.14" steps="291"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.108.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="13.94" steps="747062"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.108.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.57" steps="120676"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.110.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.110.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.110.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="13.77" steps="1244435"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="3423"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="4467"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.79" steps="5749"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.00" steps="6874"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.110.0.5.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.76" steps="128766"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="0.84" steps="137233"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="652"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="146"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="8148"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="648"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1580"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="221"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.127.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.127.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.28" steps="65908"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.127.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.06" steps="154"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="3.06" steps="406228"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.127.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.44" steps="85013"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.128.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.128.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.128.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="4.55" steps="495640"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.128.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.30" steps="78007"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.128.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.33" steps="82146"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.128.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.34" steps="80726"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.128.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.31" steps="78461"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.128.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.128.0.5.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.53" steps="79742"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.128.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.128.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.128.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="1.12" steps="139042"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.128.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.35" steps="1379"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="224"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="840"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1088"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.74" steps="26084"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="230"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="226"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="334"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="338"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="342"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="2060"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="8.22" steps="7788"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="2070"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="362"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="374"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="382"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.149.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="2.48" steps="8736"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.150.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.150.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.38" steps="76721"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.150.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.150.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="10.73" steps="1181684"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.150.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.67" steps="108472"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.152.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.152.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.152.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="11.44" steps="1015425"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.75" steps="99878"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="1.87" steps="157321"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.77" steps="105342"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="3611"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="2"><result status="valid" time="14.09"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="112"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="490"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="134"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="121"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.84" steps="6773"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="886"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="225"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="953"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="414"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.42" steps="13659"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="946"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="2624"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="166"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="270"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.180.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.180.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="1528"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.180.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.180.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="4.35" steps="322685"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.180.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2"><result status="valid" time="0.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.181.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.181.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.181.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="5.45" steps="548225"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.181.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="1607"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.181.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="645"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.181.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1959"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.181.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1982"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.181.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.181.0.5.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.52" steps="84921"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.181.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.181.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.181.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="1.42" steps="148263"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.181.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.49" steps="2057"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="236"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="504"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="941"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1256"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="19.63" steps="52458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="238"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="362"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="2139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="2148"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="2162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="386"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="390"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="450"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.202.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="5.27" steps="11650"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.203.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.203.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.87" steps="2956"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.203.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.203.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="5.95" steps="477331"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.203.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="1205"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="272"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.205.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.205.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.205.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="13.13" steps="1074645"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.205.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="2782"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.205.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.96" steps="3723"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.205.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.16" steps="4905"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.205.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.46" steps="5932"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.205.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.205.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.26" steps="1103"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.205.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.205.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.205.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="2.02" steps="185498"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.205.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="2.02" steps="186077"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.97" steps="7489"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="626"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="915"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="888"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="235"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="966"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.31" steps="11649"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="858"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1874"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="504"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.232.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.232.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="1541"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.232.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="4.02" steps="423543"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="712"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.233.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.233.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.233.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="6.74" steps="608283"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1619"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="656"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1830"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1992"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.233.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="653"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.233.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.233.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="1.54" steps="158677"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.55" steps="2071"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="240"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="512"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="962"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="14.18" steps="31603"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="374"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.244.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="0.80" steps="3123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="2209"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="444"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="464"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="414"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.254.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="9.56" steps="12854"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.255.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.255.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="2975"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.255.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.255.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="7.40" steps="631954"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.255.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1206"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="276"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.257.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.257.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.257.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="12.39" steps="1135398"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.257.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="2800"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.257.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.92" steps="3454"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.257.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="4918"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.257.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.30" steps="5951"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.257.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.257.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.37" steps="1108"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.257.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.257.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.257.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="2.20" steps="197250"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.257.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="2.23" steps="197967"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="116"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="233"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="3732"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="578"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="353"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="182"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.274.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.274.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.17" steps="944"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.274.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.274.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.05" steps="124"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.274.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0"><result status="valid" time="12.35" steps="6484"/></proof>
     <proof prover="1"><result status="valid" time="2.46" steps="295494"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.274.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1"><result status="valid" time="0.51" steps="80871"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.275.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.275.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.275.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="3.42" steps="352610"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.275.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="973"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.275.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="484"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.275.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="1267"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.275.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="1264"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.275.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.275.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.08" steps="481"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.275.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.275.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.275.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="0.69" steps="141861"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.275.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="1"><result status="valid" time="0.57" steps="124423"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="194"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="788"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="1030"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.11" steps="17337"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="196"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="300"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="304"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="308"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="1780"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="1790"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="332"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="336"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="340"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="348"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.296.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="2.17" steps="7860"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.297.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.297.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.82" steps="2265"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.297.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="9.97" steps="1173525"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1011"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="230"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.299.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.299.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.299.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="15.59" steps="788465"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.299.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.58" steps="2095"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.299.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.74" steps="2631"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.299.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="3427"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.299.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.89" steps="3506"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.299.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.299.0.5.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.95" steps="104853"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.299.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="1.04" steps="108473"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="481"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1121"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="71"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="118"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="134"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="142"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="146"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="150"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="154"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="166"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.26" steps="3976"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="25.46" steps="38020"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.323.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.323.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.323.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1"><result status="valid" time="3.68" steps="324271"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.323.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="576"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.323.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="489"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.323.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="863"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.323.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.12" steps="864"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.323.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.323.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.14" steps="484"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.323.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0"><result status="valid" time="0.34" steps="1957"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueL" proved="true">
 <transf name="unfold" proved="true" arg1="pqueueI">
  <goal name="boundary_frames_invariant_PqueueL.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueL.0.0" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="boundary_frames_invariant_PqueueL.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="repClosed_DEF">
      <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="20.82" steps="24328"/></proof>
       <proof prover="1"><result status="valid" time="29.39" steps="2011826"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.35" steps="4259"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="31.28" steps="71053"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="32.59" steps="62676"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="45.58" steps="90480"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.1" proved="true">
     <proof prover="1"><result status="valid" time="1.90" steps="194276"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.2" proved="true">
     <proof prover="1"><result status="valid" time="2.51" steps="189003"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.3" proved="true">
     <proof prover="1"><result status="valid" time="2.55" steps="255049"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.4" proved="true">
     <proof prover="1"><result status="valid" time="2.05" steps="200631"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.5" proved="true">
     <proof prover="1"><result status="valid" time="17.10" steps="2720687"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PqueueR" proved="true">
 <goal name="repOk_EMPTY" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="269"/></proof>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="1.15" steps="3578"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <proof prover="0"><result status="valid" time="5.11" steps="15240"/></proof>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="59"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="59"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="66"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="68"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="72"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="247"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="278"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="722"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.13" steps="40142"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="1772"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.41" steps="29248"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="1933"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="282"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="995"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="472"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="476"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="1845"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self} union {self}`rep union {})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="1997"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({self} union {self}`rep union {})`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.12" steps="2008"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="2029"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="wr ({self} union {self}`rep union {})`child" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="1854"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="2171"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="wr ({self} union {self}`rep union {})`tag" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="3801"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="518"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="522"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.26" expl="wr ({self} union {self}`rep union {})`key" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="3822"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.27" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="530"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.28" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="init_Pqueue&#39;vc.28.0" expl="VC for init_Pqueue" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="init_Pqueue&#39;vc.28.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="init_Pqueue&#39;vc.28.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="init_Pqueue&#39;vc.28.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="3.95" steps="7104"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.28.0.0.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="0.49" steps="651"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="1945"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.30" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.30.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.30.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="18.78" steps="21382"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.1" expl="VC for init_Pqueue" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires2">
     <goal name="init_Pqueue&#39;vc.30.0.1.0" expl="VC for init_Pqueue" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="init_Pqueue&#39;vc.30.0.1.0.0" expl="VC for init_Pqueue" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="Requires3">
       <goal name="init_Pqueue&#39;vc.30.0.1.0.0.0" expl="VC for init_Pqueue" proved="true">
       <transf name="unfold" proved="true" arg1="typeofRgn">
        <goal name="init_Pqueue&#39;vc.30.0.1.0.0.0.0" expl="VC for init_Pqueue" proved="true">
        <transf name="introduce_premises" proved="true" >
         <goal name="init_Pqueue&#39;vc.30.0.1.0.0.0.0.0" expl="VC for init_Pqueue" proved="true">
         <transf name="instantiate" proved="true" arg1="Requires3" arg2="p">
          <goal name="init_Pqueue&#39;vc.30.0.1.0.0.0.0.0.0" expl="VC for init_Pqueue" proved="true">
          <proof prover="0"><result status="valid" time="29.78" steps="36040"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="22.02" steps="41054"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="678"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.32" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.32.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.32.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="7.57" steps="13403"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="9.02" steps="13747"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.2" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="init_Pqueue&#39;vc.32.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="8.29" steps="13439"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.32.0.2.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="0"><result status="valid" time="7.72" steps="18798"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.3" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="init_Pqueue&#39;vc.32.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.55" steps="3893"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.32.0.3.1" expl="VC for init_Pqueue" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="init_Pqueue&#39;vc.32.0.3.1.0" expl="VC for init_Pqueue" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.0" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="3.66" steps="7554"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.1" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="1.92" steps="4758"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.2" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="1.92" steps="4855"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.3" expl="VC for init_Pqueue" proved="true">
       <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
        <goal name="init_Pqueue&#39;vc.32.0.3.1.0.3.0" expl="VC for init_Pqueue" proved="true">
        <transf name="assert" proved="true" arg1="(mem1 s3.heap.child[n] s3.heap.rep[pq] \/ s3.heap.child[n] = s3.heap.sntl[pq])">
         <goal name="init_Pqueue&#39;vc.32.0.3.1.0.3.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="6.91" steps="19593"/></proof>
         </goal>
         <goal name="init_Pqueue&#39;vc.32.0.3.1.0.3.0.1" expl="VC for init_Pqueue" proved="true">
         <proof prover="0"><result status="valid" time="7.42" steps="20289"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.4" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="17.94" steps="29201"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.32.0.3.1.0.5" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="24.78" steps="44599"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="36.15" steps="31515"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.5" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="9.16" steps="15800"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.6" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="4.21" steps="8602"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.7" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="4.33" steps="8712"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.8" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="4.11" steps="8446"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.9" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="init_Pqueue&#39;vc.32.0.9.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="36.59" steps="3369232"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.32.0.9.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="1"><result status="valid" time="4.55" steps="283897"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.32.0.10" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="10.08" steps="16733"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="194"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="271"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="260"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="73"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="229"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="82"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="fkey := first.key" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="87"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="skey := second.key" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="92"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="116"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="tmp := first.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="99"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="641"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="113"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="tmp := second.child" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="183"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="230"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.80" steps="8183"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="155"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="292"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.45" steps="16236"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="715"/></proof>
  </goal>
  <goal name="link&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1048"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="161"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="3551"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="20.82" steps="52979"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="186"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="191"/></proof>
  </goal>
  <goal name="link&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="193"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="370"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.42" steps="14502"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="933"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1552"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="199"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(repOk s2 self)">
   <goal name="link&#39;vc.31.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="317"/></proof>
   </goal>
   <goal name="link&#39;vc.31.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="repOk">
    <goal name="link&#39;vc.31.1.0" expl="VC for link" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="link&#39;vc.31.1.0.0" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.64" steps="1580"/></proof>
     </goal>
     <goal name="link&#39;vc.31.1.0.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="203"/></proof>
     </goal>
     <goal name="link&#39;vc.31.1.0.2" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="203"/></proof>
     </goal>
     <goal name="link&#39;vc.31.1.0.3" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="8.63" steps="24870"/></proof>
     <proof prover="3" timelimit="60"><result status="valid" time="0.15" steps="471393"/></proof>
     </goal>
     <goal name="link&#39;vc.31.1.0.4" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="2.17" steps="7025"/></proof>
     </goal>
     <goal name="link&#39;vc.31.1.0.5" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="10.75" steps="31455"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="229"/></proof>
  </goal>
  <goal name="link&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="438"/></proof>
  </goal>
  <goal name="link&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.35" steps="28794"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1129"/></proof>
  </goal>
  <goal name="link&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="1865"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="54.45" steps="115551"/></proof>
  </goal>
  <goal name="link&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="233"/></proof>
  </goal>
  <goal name="link&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="370"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="1670"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="wr {self}`rep`prev" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_prev_framed_by">
   <goal name="link&#39;vc.42.0" expl="VC for link" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.42.0.0" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(p &lt;&gt; tmp)">
     <goal name="link&#39;vc.42.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.11" steps="244"/></proof>
     </goal>
     <goal name="link&#39;vc.42.0.0.1" expl="VC for link" proved="true">
     <transf name="assert" proved="true" arg1="(p &lt;&gt; result)">
      <goal name="link&#39;vc.42.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.20" steps="246"/></proof>
      </goal>
      <goal name="link&#39;vc.42.0.0.1.1" expl="VC for link" proved="true">
      <transf name="subst_all" proved="true" >
       <goal name="link&#39;vc.42.0.0.1.1.0" expl="VC for link" proved="true">
       <proof prover="0"><result status="valid" time="52.76" steps="208602"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.43" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1691"/></proof>
  </goal>
  <goal name="link&#39;vc.44" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="link&#39;vc.44.0" expl="VC for link" proved="true">
   <proof prover="0"><result status="valid" time="3.96" steps="14896"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.45" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.45.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.45.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.77" steps="2243"/></proof>
    </goal>
    <goal name="link&#39;vc.45.0.1" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="link&#39;vc.45.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.18" steps="236"/></proof>
     </goal>
     <goal name="link&#39;vc.45.0.1.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="4.55" steps="13980"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.45.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.46" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.46.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.46.0.0" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.14" steps="511279"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.1" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.16" steps="507024"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.2" expl="VC for link" proved="true">
    <proof prover="1"><result status="valid" time="47.40" steps="4484802"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.3" expl="VC for link" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="link&#39;vc.46.0.3.0" expl="VC for link" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="link&#39;vc.46.0.3.0.0" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="8.02" steps="17613"/></proof>
      </goal>
      <goal name="link&#39;vc.46.0.3.0.1" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.46" steps="1359"/></proof>
      </goal>
      <goal name="link&#39;vc.46.0.3.0.2" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.64" steps="2128"/></proof>
      </goal>
      <goal name="link&#39;vc.46.0.3.0.3" expl="VC for link" proved="true">
      <proof prover="1"><result status="valid" time="1.61" steps="159162"/></proof>
      </goal>
      <goal name="link&#39;vc.46.0.3.0.4" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="4.01" steps="11419"/></proof>
      </goal>
      <goal name="link&#39;vc.46.0.3.0.5" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="3.55" steps="10065"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.46.0.4" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.18" steps="511269"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.5" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.18" steps="510667"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.6" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.18" steps="501294"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.7" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.20" steps="509046"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.8" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.19" steps="503970"/></proof>
    </goal>
    <goal name="link&#39;vc.46.0.9" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="link&#39;vc.46.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.61" steps="2919"/></proof>
     </goal>
     <goal name="link&#39;vc.46.0.9.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.98" steps="5459"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.46.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.67" steps="4115"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="253"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="248"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="248"/></proof>
  </goal>
  <goal name="link&#39;vc.50" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="177"/></proof>
  </goal>
  <goal name="link&#39;vc.51" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="321"/></proof>
  </goal>
  <goal name="link&#39;vc.52" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.68" steps="23370"/></proof>
  </goal>
  <goal name="link&#39;vc.53" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="830"/></proof>
  </goal>
  <goal name="link&#39;vc.54" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1091"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="183"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="46.50" steps="132842"/></proof>
  </goal>
  <goal name="link&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="182"/></proof>
  </goal>
  <goal name="link&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="284"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1224"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.11" steps="7682"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1247"/></proof>
  </goal>
  <goal name="link&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.23" steps="6914"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="43.92" steps="85430"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.64.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.64.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1389"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1437"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="5.61" steps="24991"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.53" steps="44327"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="1948"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="1759"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1388"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="1990"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="1990"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.61" steps="12791"/></proof>
    </goal>
    <goal name="link&#39;vc.64.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="2447"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="201"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="197"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="197"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="135"/></proof>
  </goal>
  <goal name="link&#39;vc.69" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1143"/></proof>
  </goal>
  <goal name="link&#39;vc.70" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="180"/></proof>
  </goal>
  <goal name="link&#39;vc.71" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="228"/></proof>
  </goal>
  <goal name="link&#39;vc.72" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="3979"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="279"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="188"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="244"/></proof>
  </goal>
  <goal name="link&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="493"/></proof>
  </goal>
  <goal name="link&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="49.31" steps="117492"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1207"/></proof>
  </goal>
  <goal name="link&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="1639"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="250"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="repOk">
   <goal name="link&#39;vc.81.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.81.0.0" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.32" steps="897563"/></proof>
    </goal>
    <goal name="link&#39;vc.81.0.1" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.13" steps="413467"/></proof>
    </goal>
    <goal name="link&#39;vc.81.0.2" expl="VC for link" proved="true">
    <proof prover="3" timelimit="60"><result status="valid" time="0.13" steps="411660"/></proof>
    </goal>
    <goal name="link&#39;vc.81.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.54" steps="17210"/></proof>
    </goal>
    <goal name="link&#39;vc.81.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="15.31" steps="34753"/></proof>
    </goal>
    <goal name="link&#39;vc.81.0.5" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 self)">
     <goal name="link&#39;vc.81.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.17" steps="390"/></proof>
     </goal>
     <goal name="link&#39;vc.81.0.5.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="21.05" steps="88989"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="250"/></proof>
  </goal>
  <goal name="link&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="382"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="3.65" steps="7548"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="44.10" steps="84426"/></proof>
  </goal>
  <goal name="link&#39;vc.86" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1392"/></proof>
  </goal>
  <goal name="link&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.41" steps="11081"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.88.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.88.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="1890"/></proof>
    </goal>
    <goal name="link&#39;vc.88.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.26" steps="15343"/></proof>
    </goal>
    <goal name="link&#39;vc.88.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="868"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.89" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.89.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.89.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="994"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="1744"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.20" steps="39911"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="10.31" steps="40401"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.79" steps="2297"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="2098"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="1688"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="2328"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="2328"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="7.58" steps="17681"/></proof>
    </goal>
    <goal name="link&#39;vc.89.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.84" steps="2362"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.90" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="268"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="265"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="265"/></proof>
  </goal>
  <goal name="link&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="210"/></proof>
  </goal>
  <goal name="link&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="418"/></proof>
  </goal>
  <goal name="link&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.61" steps="41136"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1045"/></proof>
  </goal>
  <goal name="link&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1387"/></proof>
  </goal>
  <goal name="link&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="216"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="43.38" steps="108892"/></proof>
  </goal>
  <goal name="link&#39;vc.100" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="216"/></proof>
  </goal>
  <goal name="link&#39;vc.101" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="334"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.54" steps="5857"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.14" steps="7704"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1146"/></proof>
  </goal>
  <goal name="link&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.34" steps="6825"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.106.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.106.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="1596"/></proof>
    </goal>
    <goal name="link&#39;vc.106.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.32" steps="10896"/></proof>
    </goal>
    <goal name="link&#39;vc.106.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="807"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.107" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.107.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.107.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1424"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="1472"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="5.14" steps="22704"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="7.05" steps="28802"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="1664"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="1792"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="925"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1140"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1140"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.15" steps="10164"/></proof>
    </goal>
    <goal name="link&#39;vc.107.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.74" steps="2680"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="234"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="231"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="231"/></proof>
  </goal>
  <goal name="link&#39;vc.111" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="182"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="3152"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="232"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="156"/></proof>
  </goal>
  <goal name="link&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="212"/></proof>
  </goal>
  <goal name="link&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="426"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.37" steps="35848"/></proof>
  </goal>
  <goal name="link&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1655"/></proof>
  </goal>
  <goal name="link&#39;vc.119" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1433"/></proof>
  </goal>
  <goal name="link&#39;vc.120" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="218"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="38.41" steps="95098"/></proof>
  </goal>
  <goal name="link&#39;vc.122" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="218"/></proof>
  </goal>
  <goal name="link&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="334"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.78" steps="6419"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.89" steps="9074"/></proof>
  </goal>
  <goal name="link&#39;vc.126" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1317"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.87" steps="11006"/></proof>
  </goal>
  <goal name="link&#39;vc.128" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.128.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.128.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="1776"/></proof>
    </goal>
    <goal name="link&#39;vc.128.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.23" steps="22995"/></proof>
    </goal>
    <goal name="link&#39;vc.128.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="812"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.129" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.129.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.129.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="934"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="961"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="7.18" steps="25477"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="12.73" steps="61170"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.71" steps="2192"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="2011"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="1612"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.56" steps="2227"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="2227"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.54" steps="16205"/></proof>
    </goal>
    <goal name="link&#39;vc.129.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="2909"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.130" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="236"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="233"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="233"/></proof>
  </goal>
  <goal name="link&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="178"/></proof>
  </goal>
  <goal name="link&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="362"/></proof>
  </goal>
  <goal name="link&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="15.98" steps="49407"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="885"/></proof>
  </goal>
  <goal name="link&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1250"/></proof>
  </goal>
  <goal name="link&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="184"/></proof>
  </goal>
  <goal name="link&#39;vc.139" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="31.72" steps="78598"/></proof>
  </goal>
  <goal name="link&#39;vc.140" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="184"/></proof>
  </goal>
  <goal name="link&#39;vc.141" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="283"/></proof>
  </goal>
  <goal name="link&#39;vc.142" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.82" steps="4486"/></proof>
  </goal>
  <goal name="link&#39;vc.143" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="318"/></proof>
  </goal>
  <goal name="link&#39;vc.144" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1070"/></proof>
  </goal>
  <goal name="link&#39;vc.145" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.47" steps="4694"/></proof>
  </goal>
  <goal name="link&#39;vc.146" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.146.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.146.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1492"/></proof>
    </goal>
    <goal name="link&#39;vc.146.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="1.84" steps="8537"/></proof>
    </goal>
    <goal name="link&#39;vc.146.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="746"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.147" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.147.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.147.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1352"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1397"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.94" steps="16374"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.28" steps="26415"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="1881"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1503"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1346"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="1921"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="1921"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.52" steps="7783"/></proof>
    </goal>
    <goal name="link&#39;vc.147.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="2568"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.148" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="202"/></proof>
  </goal>
  <goal name="link&#39;vc.149" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
  <goal name="link&#39;vc.150" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.13" steps="1137"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="44"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="66"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="68"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="72"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.7.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.7.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="659"/></proof>
    </goal>
    <goal name="insert&#39;vc.7.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.71" steps="6029"/></proof>
    </goal>
    <goal name="insert&#39;vc.7.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="947"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="925"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="194"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="522"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="32.97" steps="77536"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="1358"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="2403"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="200"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1031"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="375"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="26.23" steps="75029"/></proof>
   <transf name="unfold" proved="true" arg1="repOk">
    <goal name="insert&#39;vc.17.0.0" expl="VC for insert" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="insert&#39;vc.17.0.0.0" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="1.33" steps="3091"/></proof>
     </goal>
     <goal name="insert&#39;vc.17.0.0.1" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="0.28" steps="677"/></proof>
     </goal>
     <goal name="insert&#39;vc.17.0.0.2" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="0.27" steps="689"/></proof>
     </goal>
     <goal name="insert&#39;vc.17.0.0.3" expl="VC for insert" proved="true">
     <proof prover="1"><result status="valid" time="4.96" steps="265319"/></proof>
     </goal>
     <goal name="insert&#39;vc.17.0.0.4" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="30.52" steps="84223"/></proof>
     <proof prover="1"><result status="valid" time="4.98" steps="264275"/></proof>
     </goal>
     <goal name="insert&#39;vc.17.0.0.5" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="10.06" steps="30033"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.17.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="4.19" steps="12159"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="240"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="636"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="2206"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="1627"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="14.31" steps="31968"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="246"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="10.18" steps="21632"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="497"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="975"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="insert&#39;vc.27.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.27.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if_term" proved="true" >
     <goal name="insert&#39;vc.27.0.0.0" expl="VC for insert" proved="true">
     <transf name="eliminate_if_fmla" proved="true" >
      <goal name="insert&#39;vc.27.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="5.49" steps="17154"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.27.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="0.10" steps="238"/></proof>
       </goal>
       <goal name="insert&#39;vc.27.0.0.0.0.1" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="4.61" steps="13559"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.28.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.28.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.80" steps="2408"/></proof>
    </goal>
    <goal name="insert&#39;vc.28.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="9.41" steps="33147"/></proof>
    </goal>
    <goal name="insert&#39;vc.28.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.39" steps="9890"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.96" steps="5905"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="35.43" steps="54890"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="252"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="474"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="288"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="763"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="4052"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="1940"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.55" steps="28290"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="294"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="5.24" steps="11808"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="541"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="326"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="849"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.78" steps="5427"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="2145"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.67" steps="13722"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="332"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="330"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="589"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="1126"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="517"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="521"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="525"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr ({self}`rep union {})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.53" steps="5830"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.05" steps="4330"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="11.40" steps="13424"/></proof>
  </goal>
  <goal name="insert&#39;vc.56" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0"><result status="valid" time="2.29" steps="4694"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.52" steps="5101"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0"><result status="valid" time="2.25" steps="4734"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="2.85" steps="5103"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="575"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0"><result status="valid" time="2.23" steps="4762"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="583"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.63.0" expl="VC for insert" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="insert&#39;vc.63.0.0" expl="VC for insert" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.63.0.0.0" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="7.21" steps="20310"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.64.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.64.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.83" steps="5258"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="28.79" steps="45194"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.65" steps="1518"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.22" steps="4897"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="368"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="370"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="370"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="371"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="35.04" steps="32588"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.71.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.71.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.79" steps="5776"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.69" steps="5414"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.2" expl="VC for insert" proved="true">
    <proof prover="2"><result status="valid" time="59.24"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s6 pq)">
     <goal name="insert&#39;vc.71.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="738"/></proof>
     </goal>
     <goal name="insert&#39;vc.71.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.71.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.71.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="15.95" steps="30258"/></proof>
       </goal>
       <goal name="insert&#39;vc.71.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="2.14" steps="180057"/></proof>
       </goal>
       <goal name="insert&#39;vc.71.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="1.95" steps="169754"/></proof>
       </goal>
       <goal name="insert&#39;vc.71.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="21.35" steps="937965"/></proof>
       </goal>
       <goal name="insert&#39;vc.71.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="21.32" steps="938739"/></proof>
       </goal>
       <goal name="insert&#39;vc.71.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="21.42" steps="937272"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.71.0.4" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(not (s6.heap.head[pq] = null))">
     <goal name="insert&#39;vc.71.0.4.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="19.48" steps="15314"/></proof>
     </goal>
     <goal name="insert&#39;vc.71.0.4.1" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="1.73" steps="5789"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.71.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.41" steps="7045"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.6" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="11.69" steps="21583"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.33" steps="7710"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.46" steps="8269"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.9" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.42" steps="11238"/></proof>
    </goal>
    <goal name="insert&#39;vc.71.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.04" steps="7658"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.72" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="260"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="482"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="262"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="949"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="546"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="509"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="268"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="268"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="4815"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="273"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="tmp := link(self,hd,result)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.82.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.82.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.70" steps="2602"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="1967"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.2" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="insert&#39;vc.82.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.35" steps="1942"/></proof>
     </goal>
     <goal name="insert&#39;vc.82.0.2.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="insert&#39;vc.82.0.2.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.82.0.2.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.26" steps="6352"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.2.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.24" steps="6337"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.2.1.0.2" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="6.42" steps="7770"/></proof>
       <proof prover="1"><result status="valid" time="3.85" steps="246846"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.2.1.0.3" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.69" steps="5529"/></proof>
       <proof prover="1"><result status="valid" time="3.83" steps="248235"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.2.1.0.4" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.71" steps="5538"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.82.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="insert&#39;vc.82.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.22" steps="540"/></proof>
     </goal>
     <goal name="insert&#39;vc.82.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.82.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.82.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="4.49" steps="7707"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.61" steps="2071"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.59" steps="2151"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="18.49" steps="766016"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="18.28" steps="763292"/></proof>
       </goal>
       <goal name="insert&#39;vc.82.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="18.71" steps="768717"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.82.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="34.33" steps="8113"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="2760"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.6" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.62" steps="1937"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="3137"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.82" steps="3135"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.9" expl="VC for insert" proved="true">
    <proof prover="1"><result status="valid" time="0.26" steps="53101"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="3192"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.83" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="436"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="628"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="368"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="822"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="3055"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="1973"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="29.36" steps="56900"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="374"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="370"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="676"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="1384"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="602"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="606"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="610"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="insert&#39;vc.97.0" expl="VC for insert" proved="true">
   <proof prover="0"><result status="valid" time="2.33" steps="8147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.98" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.10" steps="4579"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="46.64" steps="14542"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0"><result status="valid" time="3.46" steps="4858"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="1"><result status="valid" time="4.40" steps="288301"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0"><result status="valid" time="3.17" steps="4885"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="wr ({self}`rep union {self})`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_size_framed_by">
   <goal name="insert&#39;vc.103.0" expl="VC for insert" proved="true">
   <proof prover="0"><result status="valid" time="0.44" steps="779"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.104" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="660"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0"><result status="valid" time="3.43" steps="5558"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="668"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.107.0" expl="VC for insert" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="insert&#39;vc.107.0.0" expl="VC for insert" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.107.0.0.0" expl="VC for insert" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.107.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.107.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="3.72" steps="7648"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.107.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="0.50" steps="402"/></proof>
      <proof prover="1"><result status="valid" time="0.28" steps="60025"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.108" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.108.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.108.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.86" steps="6308"/></proof>
    </goal>
    <goal name="insert&#39;vc.108.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.108.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.23" steps="386"/></proof>
     </goal>
     <goal name="insert&#39;vc.108.0.1.1" expl="VC for insert" proved="true">
     <proof prover="1"><result status="valid" time="41.33" steps="1556175"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.108.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.77" steps="1884"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.43" steps="5819"/></proof>
  </goal>
  <goal name="insert&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="410"/></proof>
  </goal>
  <goal name="insert&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="412"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="410"/></proof>
  </goal>
  <goal name="insert&#39;vc.113" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="411"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="6.12" steps="383885"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.115.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.115.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.54" steps="7553"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.37" steps="6729"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.2" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="insert&#39;vc.115.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.47" steps="7122"/></proof>
     </goal>
     <goal name="insert&#39;vc.115.0.2.1" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="1.95" steps="9740"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.115.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="insert&#39;vc.115.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.34" steps="826"/></proof>
     </goal>
     <goal name="insert&#39;vc.115.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.115.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.115.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="4.78" steps="254295"/></proof>
       </goal>
       <goal name="insert&#39;vc.115.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="0.64" steps="88253"/></proof>
       </goal>
       <goal name="insert&#39;vc.115.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="0.59" steps="85216"/></proof>
       </goal>
       <goal name="insert&#39;vc.115.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="3.05" steps="232117"/></proof>
       </goal>
       <goal name="insert&#39;vc.115.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="3.04" steps="232142"/></proof>
       </goal>
       <goal name="insert&#39;vc.115.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="1"><result status="valid" time="3.04" steps="232293"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.115.0.4" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(pqueueI s1)">
     <goal name="insert&#39;vc.115.0.4.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="398"/></proof>
     </goal>
     <goal name="insert&#39;vc.115.0.4.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="h">
      <goal name="insert&#39;vc.115.0.4.1.0" expl="VC for insert" proved="true">
      <transf name="instantiate" proved="true" arg1="h" arg2="pq">
       <goal name="insert&#39;vc.115.0.4.1.0.0" expl="VC for insert" proved="true">
       <transf name="assert" proved="true" arg1="(not (s1.heap.head[pq] = null))">
        <goal name="insert&#39;vc.115.0.4.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.26" steps="877"/></proof>
        </goal>
        <goal name="insert&#39;vc.115.0.4.1.0.0.1" expl="VC for insert" proved="true">
        <proof prover="0"><result status="valid" time="0.83" steps="4821"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.115.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.59" steps="9576"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.6" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(pqueueI s1)">
     <goal name="insert&#39;vc.115.0.6.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="398"/></proof>
     </goal>
     <goal name="insert&#39;vc.115.0.6.1" expl="VC for insert" proved="true">
     <transf name="case" proved="true" arg1="(pq = self)">
      <goal name="insert&#39;vc.115.0.6.1.0" expl="true case" proved="true">
      <proof prover="0"><result status="valid" time="0.69" steps="864"/></proof>
      </goal>
      <goal name="insert&#39;vc.115.0.6.1.1" expl="false case" proved="true">
      <proof prover="0"><result status="valid" time="6.67" steps="9164"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.115.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.13" steps="9042"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.10" steps="9265"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.9" expl="VC for insert" proved="true">
    <proof prover="1"><result status="valid" time="54.45" steps="2051122"/></proof>
    </goal>
    <goal name="insert&#39;vc.115.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.33" steps="9740"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="63"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="102"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="216"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="134"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="164"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="166"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="371"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="788"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.04" steps="13041"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1233"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="172"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.67" steps="6336"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="current := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="302"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1839"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="715"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.21.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.20" steps="822"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="wr {self}`rep`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.22.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.09" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="323"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="327"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.25.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.25.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1273"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1498"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.16" steps="7512"/></proof>
    <proof prover="1"><result status="valid" time="90.03" steps="6344635"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.3" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="combineAux&#39;vc.25.0.3.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.25.0.3.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.31" steps="5768"/></proof>
      <proof prover="1"><result status="valid" time="17.00" steps="1583589"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.25.0.3.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.41" steps="1427"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.25.0.3.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.53" steps="4782"/></proof>
      <proof prover="1"><result status="valid" time="5.59" steps="528145"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.25.0.3.0.3" expl="VC for combineAux" proved="true">
      <proof prover="1"><result status="valid" time="7.43" steps="395651"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.25.0.3.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.43" steps="7268"/></proof>
      <proof prover="1"><result status="valid" time="7.77" steps="402032"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.25.0.3.0.5" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.47" steps="7274"/></proof>
      <proof prover="1"><result status="valid" time="7.98" steps="395682"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.25.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.64" steps="3531"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1699"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1454"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1915"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1723"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="combineAux&#39;vc.25.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.29" steps="3969"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.25.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.07" steps="4573"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.25.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.84" steps="3204"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.26.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.26.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.71" steps="1604"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.1" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="69.31" steps="4202307"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1406"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="3798"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="848"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="206"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="431"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="248"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl="tmp := current.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="956"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.78" steps="4360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="314"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1154"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.33" steps="26277"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.38.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.33" steps="2230"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.34" steps="306"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.41" steps="2230"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.33" steps="306"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.38.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.38.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="9.22" steps="26013"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.38.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="8.99" steps="24120"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.81" steps="5714"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="320"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="5346"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="1159"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.55" steps="3615"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.51" steps="7961"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="523"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="527"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.47.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.47.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.39" steps="2659"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.36" steps="2646"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.47.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.84" steps="2373"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.47.0.2.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="combineAux&#39;vc.47.0.2.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.47.0.2.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.48" steps="611"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.2.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.49" steps="611"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.2.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="30.69" steps="45873"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.2.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.66" steps="611"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.2.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.45" steps="611"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.47.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.47.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.44" steps="615"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.47.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.47.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.47.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="2.63" steps="159644"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="0.57" steps="75640"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="0.51" steps="75337"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="1.90" steps="161374"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="4.97" steps="266160"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.47.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="1.68" steps="161476"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.47.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="29.77" steps="25140"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5170611"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.60" steps="4350"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.34" steps="2590"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.56" steps="4524"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.22" steps="2597"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.47.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.47.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
     <proof prover="1"><result status="timeout" time="60.00" steps="4075814"/></proof>
     <proof prover="3" timelimit="30" memlimit="12000"><result status="valid" time="0.22" steps="542344"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.47.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="12.60" steps="20328"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.47.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="38.10" steps="81163"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.48.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.48.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.88" steps="3758"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.48.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.48.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="330"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.48.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="33.35" steps="1942679"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.48.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="1392"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="13.83" steps="29575"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <proof prover="1" timelimit="30" memlimit="12000"><result status="timeout" time="30.00" steps="3250060"/></proof>
  <transf name="instantiate" proved="true" arg1="Ensures8" arg2="k7">
   <goal name="combineAux&#39;vc.50.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.29" steps="671"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="1194"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="346"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="427"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="244"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="493"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="tmp := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="278"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="282"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1301"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="2875"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.60.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="3.33" steps="7776"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.60.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="10.10" steps="22950"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.20" steps="5271"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="288"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="3391"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="1131"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.69" steps="2669"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.56" steps="570"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="498"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="502"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="309"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.70.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.70.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2178"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.84" steps="2226"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="8.69" steps="14808"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.70.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.38" steps="588"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.70.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.70.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.70.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.60" steps="2789"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.70.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.41" steps="599"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.70.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.42" steps="598"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.70.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="1.74" steps="139623"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.70.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.11" steps="5409"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.70.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.61" steps="5407"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.70.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.89" steps="11629"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.97" steps="2710"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="2179"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.24" steps="3322"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.20" steps="3316"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.70.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.70.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="6.54" steps="9201"/></proof>
     <proof prover="1"><result status="timeout" time="60.00" steps="5950732"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.70.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="1.29" steps="132058"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.70.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.33" steps="6749"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.71.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.71.0.0" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="2.00" steps="123095"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.71.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.71.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.20" steps="299"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.71.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="5.07" steps="7297"/></proof>
     <proof prover="1"><result status="valid" time="13.60" steps="1059049"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.71.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="1.75" steps="134104"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.37" steps="5292"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="2762"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1249"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="626"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.77" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="649"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="353"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="355"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="355"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="693"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="1463"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="701"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="1548"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="363"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="482"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="368"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="368"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="760"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="404"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="436"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="980"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="1870"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.94.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="44.47" steps="51965"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.94.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="20.93" steps="35102"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.89" steps="3993"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="442"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.81" steps="8472"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.98" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="11.73" steps="16627"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.99.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.70" steps="5576"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.25" steps="890"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="894"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="898"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="465"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.104.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.104.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.70" steps="4954"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5121353"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.1" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="43.32" steps="3629333"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.104.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.28" steps="3990"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.104.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="0.54" steps="83092"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.104.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.104.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.73" steps="907"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.104.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.104.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.104.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="4.49" steps="5421"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.104.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.99" steps="2193"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.104.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.05" steps="2166"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.104.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="5.06" steps="252256"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.104.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="9.07" steps="17184"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.104.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="10.10" steps="17118"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.104.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5123354"/></proof>
    <proof prover="3" timelimit="30" memlimit="12000"><result status="valid" time="0.16" steps="589275"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.5" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="43.76" steps="3771717"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.08" steps="4427"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5680187"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.49" steps="8326"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5374594"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.51" steps="8318"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5573790"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.104.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.104.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3" timelimit="60"><result status="valid" time="0.24" steps="652011"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.104.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="3.09" steps="247944"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.104.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="7.24" steps="15459"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5271008"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.105.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.105.0.0" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="3.06" steps="218749"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.105.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.105.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="453"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.105.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="99.52" steps="6899162"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.105.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="3.07" steps="249342"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="471"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="21.33" steps="24516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.81" steps="2408"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="351"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="633"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="356"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.80" steps="656"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.113" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="362"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="362"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="700"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.79" steps="1471"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.86" steps="708"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.80" steps="1556"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="370"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="490"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="375"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="375"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="767"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.125" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="411"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="441"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="985"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="1875"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.129.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="35.38" steps="35166"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.129.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="16.62" steps="19784"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.48" steps="4025"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="447"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.19" steps="6643"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="12.99" steps="17937"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.134.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.90" steps="5583"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.37" steps="895"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.136" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="899"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="903"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.138.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.138.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.45" steps="4959"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.57" steps="4487"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.138.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="2.15" steps="3995"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.138.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="3.80" steps="8412"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.138.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.138.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="910"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.138.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.138.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.138.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="4.92" steps="5426"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.138.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.54" steps="2198"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.138.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.10" steps="2171"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.138.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="3.62" steps="251948"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.138.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="11.64" steps="18378"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.138.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="11.86" steps="17194"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.138.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
    <proof prover="1" timelimit="30" memlimit="12000"><result status="timeout" time="30.00" steps="4014034"/></proof>
    <proof prover="2" timelimit="30" memlimit="12000"><result status="valid" time="0.62"/></proof>
    <proof prover="3" timelimit="30" memlimit="12000"><result status="valid" time="0.15" steps="589203"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.05" steps="5381"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.44" steps="4432"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.27" steps="8331"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.68" steps="8324"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.138.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.138.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.30" steps="651929"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.138.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="4.46" steps="246947"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.138.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="10.16" steps="15479"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.139.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.139.0.0" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="3.63" steps="217029"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.139.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.139.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.42" steps="456"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.139.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="99.85" steps="6569544"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.139.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="3.81" steps="247313"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.71" steps="474"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="476"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="26.14" steps="27729"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.76" steps="2417"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="948"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="508"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="971"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="1023"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="2409"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="1031"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="2529"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="520"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.06" steps="701"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="64.40" steps="40688"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.159" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="1104"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="565"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.88" steps="597"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.33" steps="1386"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.42" steps="5948"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.164.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.99" steps="7272"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.164.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.63" steps="581"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.164.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="10.93" steps="7267"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.164.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.88" steps="581"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.164.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.164.4.0" expl="true case (type invariant)" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.164.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.44" steps="14119"/></proof>
     <proof prover="1" timelimit="30" memlimit="12000"><result status="valid" time="3.04" steps="287071"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.164.4.1" expl="false case (type invariant)" proved="true">
    <transf name="subst_all" proved="true" >
     <goal name="combineAux&#39;vc.164.4.1.0" expl="false case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="25.99" steps="23173"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.54" steps="6107"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.75" steps="603"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="11.71" steps="18832"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="51.09" steps="45697"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.169.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.92" steps="11425"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.75" steps="1238"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.59" steps="1242"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="2.71" steps="1246"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.173.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.173.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.84" steps="8704"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.61" steps="7988"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.173.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="5.97" steps="7989"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.173.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="11.56" steps="21046"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.173.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.173.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.59" steps="1252"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.173.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.173.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.173.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="10.51" steps="9546"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.173.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.34" steps="3362"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.173.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="2.24" steps="3335"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.173.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="7.42" steps="393830"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.173.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="66.79" steps="42335"/></proof>
       <proof prover="1"><result status="valid" time="7.41" steps="393828"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.173.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="58.15" steps="42341"/></proof>
       <proof prover="1"><result status="valid" time="7.40" steps="393819"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.173.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="4519005"/></proof>
    <proof prover="3" timelimit="30" memlimit="12000"><result status="valid" time="0.17" steps="683551"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="6.59" steps="9480"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.98" steps="7916"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="12.19" steps="20998"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="14.22" steps="22865"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.173.0.9.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.173.0.9.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="2.74" steps="3780"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.173.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="7.36" steps="431578"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.173.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="64.30" steps="55882"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.174" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.174.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.174.0.0" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="7.96" steps="393104"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.174.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.174.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.98" steps="608"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.174.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
      <goal name="combineAux&#39;vc.174.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.174.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.174.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.174.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="8.20" steps="8920"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.174.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="6.98" steps="439381"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="628"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.90" steps="630"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <transf name="instantiate" proved="true" arg1="Ensures3" arg2="k15">
   <goal name="combineAux&#39;vc.177.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.00" steps="1118"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="2.38" steps="223910"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="948"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="508"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.36" steps="2389"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57" steps="1011"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.183" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.84" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="wr {}`slots" proved="true">
  <proof prover="1"><result status="valid" time="4.57" steps="270922"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="52453"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="wr {self}`rep`prev" proved="true">
  <proof prover="1"><result status="valid" time="0.23" steps="52456"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="wr {self}`rep`child" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="52459"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="wr {}`length" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="timeout" time="30.00"/></proof>
  <proof prover="1"><result status="timeout" time="60.00" steps="5503367"/></proof>
  <proof prover="3" timelimit="30" memlimit="12000"><result status="timeout" time="30.00" steps="16736985"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.188.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.95" steps="6796"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.189.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.189.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.189.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="1.80" steps="1054"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.08" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.40" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.40" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="356"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="356"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.83" steps="743"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="418"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="766"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="422"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="422"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="422"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="816"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="1845"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="824"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="1948"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="430"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="575"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="435"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="435"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="14.47" steps="12596"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="899"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="475"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="507"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.12" steps="1166"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.00" steps="2216"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.225.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="6.74" steps="6215"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.225.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.86" steps="493"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.225.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="7.45" steps="6212"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.225.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.60" steps="493"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.225.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.225.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="1"><result status="valid" time="94.62" steps="9633140"/></proof>
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.225.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0"><result status="valid" time="6.34" steps="11722"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.225.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="26.25" steps="24137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.34" steps="4917"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="513"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.39" steps="10110"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="39.57" steps="41116"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.230.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.96" steps="6974"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.65" steps="1032"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.36" steps="1036"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.23" steps="1040"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.234.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.234.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.84" steps="6472"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="4946276"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.50" steps="5587"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.234.0.2.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.234.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="2.81" steps="4340"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.234.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="0.98" steps="90472"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.234.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.234.0.3.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="2.24" steps="196819"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.234.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.234.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.234.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="6.61" steps="6820"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.234.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.59" steps="2685"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.234.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.58" steps="2658"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.234.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="1"><result status="valid" time="5.50" steps="301759"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.234.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="26.14" steps="24425"/></proof>
       <proof prover="1"><result status="valid" time="5.48" steps="301729"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.234.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="26.81" steps="24430"/></proof>
       <proof prover="1"><result status="valid" time="5.54" steps="301720"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.234.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><undone/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5035565"/></proof>
    <proof prover="3" timelimit="30" memlimit="12000"><result status="valid" time="0.19" steps="626114"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.56" steps="6755"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.48" steps="6197"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5140860"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.33" steps="11244"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5046399"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.64" steps="11201"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="5271430"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.234.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.234.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.34" steps="713170"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.234.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="1"><result status="valid" time="5.88" steps="333711"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.234.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="23.09" steps="27176"/></proof>
    <proof prover="1"><result status="timeout" time="60.00" steps="6072435"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.235.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.235.0.0" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="6.21" steps="301605"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.235.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.235.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.77" steps="520"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.235.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn">
      <goal name="combineAux&#39;vc.235.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
       <goal name="combineAux&#39;vc.235.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.235.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.235.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="6.34" steps="6431"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.235.0.2" expl="VC for combineAux" proved="true">
    <proof prover="1"><result status="valid" time="5.34" steps="336921"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="538"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="540"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="36.49" steps="4012695"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.38" steps="2942"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="738"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="417"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="1821"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="799"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="422"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="3.49" steps="3902"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="4.85" steps="7855"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.250.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.250.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.250.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.250.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.05" steps="842"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.250.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.45" steps="428"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="431"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="26"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="57"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="62"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="40"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="41"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="44"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="57"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="496"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="41"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="41"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="61"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="66"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="118"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="229"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="675"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="610"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="3213"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="108"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="164"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="165"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="wr ({self}`rep union {self} union {})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="193"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="197"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="205"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="209"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="1075"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="217"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="221"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="225"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1144"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self}`rep union {self} union {})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="233"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="237"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="241"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.57" steps="10120"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="924"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.36.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.36.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1189"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.36.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.36.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="137"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.36.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="2.07" steps="226504"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.36.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="0.53" steps="95781"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="154"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.40.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.40.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="1038"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="1063"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.2" expl="VC for deleteMin" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures34">
     <goal name="deleteMin&#39;vc.40.0.2.0" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
      <goal name="deleteMin&#39;vc.40.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="663"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.40.0.2.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="1604"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.40.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="301"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.40.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.40.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.40.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="1389"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.40.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="305"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.40.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="304"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.40.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="0.51" steps="97979"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.40.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="2909"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.40.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="2909"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="12.18" steps="11586"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.48" steps="4102"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.39" steps="2758"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="1880"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="1516"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.9" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.40.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="3.56" steps="4045"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.40.0.9.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.84" steps="3743"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.40.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.37" steps="1842"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="231"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1853"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="52"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="52"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="52"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="213"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="151"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="349"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="912"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="890"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.91" steps="7506"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="157"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="155"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="514"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1073"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="wr ({self}`rep union {self} union {})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="300"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="284"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="288"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="312"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="2397"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="324"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="308"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="312"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="1.08" steps="2508"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self}`rep union {self} union {})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="340"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="324"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="deleteMin&#39;vc.73.0" expl="VC for deleteMin" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="deleteMin&#39;vc.73.0.0" expl="VC for deleteMin" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="deleteMin&#39;vc.73.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="deleteMin&#39;vc.73.0.0.0.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="371"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.73.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="188"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1648"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.75.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.75.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="2005"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.75.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.75.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="180"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.75.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="6.69" steps="765353"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.75.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="921"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="194"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="194"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.79.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.79.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="2056"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="2107"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.2" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="deleteMin&#39;vc.79.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="2106"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.79.0.2.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="2768"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.79.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="387"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.79.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.79.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.79.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.91" steps="2433"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.79.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="394"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.79.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="393"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.79.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="0.32" steps="71555"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.79.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="0.31" steps="71534"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.79.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="0.32" steps="71534"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="4.71" steps="432115"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.94" steps="7192"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="2924"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.85" steps="3001"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.81" steps="6502"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.9" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.79.0.9.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures31">
      <goal name="deleteMin&#39;vc.79.0.9.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="852"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.79.0.9.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.57" steps="5764"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.79.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.94" steps="3337"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="61"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="98"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="66"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1735"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="500"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="684"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="72"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="4539"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="pos := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="134"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="116"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.07" steps="22509"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="776"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="14.22" steps="42622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="192"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="1846"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="430"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="39.46" steps="77248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.06" steps="3448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="311"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="204"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="642"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="32.49" steps="52627"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1500"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.34" steps="3482"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="210"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="210"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="210"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="740"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="334"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="216"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="216"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="1262"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.46.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.46.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1455"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.46.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.46.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="208"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.46.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="6.69" steps="4215"/></proof>
     <proof prover="1" timelimit="15"><result status="valid" time="8.54" steps="697375"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.46.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="1074"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.47.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.47.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1474"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="1510"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.47.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="1495"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.47.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.47.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.47.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="363"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="2602"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="2602"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="2602"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="5.93" steps="24392"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.47.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.16" steps="367"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.47.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.47.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.46" steps="2021"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.10" steps="474086"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.12" steps="479104"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="1.10" steps="133876"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="2.56" steps="208899"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.47.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="1.21" steps="163236"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="7.28" steps="6575"/></proof>
    <proof prover="3"><result status="valid" time="0.10" steps="469912"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.10" steps="475470"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.10" steps="474010"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.09" steps="471769"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.10" steps="476814"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.47.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="9.51" steps="5545"/></proof>
     <proof prover="3"><result status="valid" time="0.17" steps="486238"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.47.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.95" steps="5762"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.47.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="2914"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="282"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="612"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="1169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="1653"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = self)">
   <goal name="decreaseKey&#39;vc.52.0" expl="true case (type invariant)" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="3200"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.52.1" expl="false case (type invariant)" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="8.06" steps="25434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="288"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="424"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.40" steps="3265"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.27" steps="3269"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.60.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="623"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="2.48" steps="3284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="452"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="456"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="468"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.68.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.68.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.68.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.68.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="557"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.68.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.19" steps="312"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.69.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.69.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="0.45" steps="88545"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.69.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.69.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="298"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.69.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="11.33" steps="838339"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.69.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="1554"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.71.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.71.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.41" steps="2207"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.41" steps="2239"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.71.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2223"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.71.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="3"><result status="valid" time="0.30" steps="1074897"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="decreaseKey&#39;vc.71.0.3.0" expl="VC for decreaseKey" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.71.0.3.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.99" steps="2164310"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.71.0.3.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.19" steps="561675"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.71.0.3.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.19" steps="567415"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.71.0.3.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.43" steps="1185323"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.71.0.3.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.35" steps="1185317"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.71.0.3.0.5" expl="VC for decreaseKey" proved="true">
      <proof prover="3"><result status="valid" time="0.36" steps="1185319"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="5.13" steps="578877"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.86" steps="4308"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.14" steps="551441"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.61" steps="8647"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.26" steps="9024"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.71.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="9.07" steps="20133"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.71.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="1.17" steps="170591"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.71.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.80" steps="5584"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1025"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="440"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="14.48" steps="33945"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1148"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.36" steps="3854"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="1878"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="320"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="207"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="658"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="22.45" steps="47752"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1540"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="4089"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="755"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="342"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="219"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="219"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="1590"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.97.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.97.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="1979"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.97.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="211"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.97.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="13.32" steps="736887"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1082"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.98.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.98.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.14" steps="475294"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.13" steps="483686"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.98.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.10" steps="484848"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.98.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.98.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.98.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="368"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="2712"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="1.14" steps="2194803"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.16" steps="490822"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.23" steps="842360"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.98.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.12" steps="415832"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.98.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.98.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="2382"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.16" steps="384"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.13" steps="490939"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.20" steps="657096"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="6.53" steps="325024"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="4.29" steps="284892"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.16" steps="475226"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.16" steps="487971"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.16" steps="482031"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.10" steps="482658"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.11" steps="484828"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.98.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="495507"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.98.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.98.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.98.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.96" steps="4820"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.98.0.9.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2453"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.98.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.58" steps="3270"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="285"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="620"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="1188"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="1674"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.103.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="275"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="275"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="275"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.48" steps="3176"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="14.42" steps="37680"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="524"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.103.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="592"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="291"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="427"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.109.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.44" steps="4735"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.59" steps="3438"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.111.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="631"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="553"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="573"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="475"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.02" steps="3283536"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.120.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.120.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.19" steps="3034"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.120.0.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.08" steps="443103"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.120.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="13.14" steps="922477"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="1561"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.122.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.122.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.58" steps="2659"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="569762"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.122.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.12" steps="568956"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.122.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="7339"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.122.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="572"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.122.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.122.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.67" steps="3651"/></proof>
       <proof prover="3"><result status="valid" time="1.48" steps="2221221"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.30" steps="574851"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.25" steps="580608"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.45" steps="1219619"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.44" steps="1219611"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.122.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.36" steps="1219617"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="11.75" steps="674051"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="4889"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.12" steps="564206"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.90" steps="9823"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.63" steps="10219"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.122.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.13" steps="584576"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.122.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="1.42" steps="179664"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.122.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.65" steps="6204"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="240"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="424"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.11" steps="16392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1100"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="2429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="602"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="288"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1067"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.138.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.138.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="1230"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.138.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.138.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="4.04" steps="473048"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.138.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="892"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.139.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.139.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="1043"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="1070"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.139.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.09" steps="452058"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.139.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.139.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.139.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="455886"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="2018"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.24" steps="584819"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.16" steps="456717"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.31" steps="761641"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.139.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.09" steps="395434"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.139.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.139.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.81" steps="1540787"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.16" steps="456230"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.14" steps="460190"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.25" steps="605620"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.30" steps="5835"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.139.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="1.93" steps="135233"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="11.17" steps="4075"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="1870"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.38" steps="1467"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="1967"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="1967"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.139.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.09" steps="464139"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.139.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.84" steps="4528"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.139.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.70" steps="2256"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="528"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="1013"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="1432"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="39.25" steps="68658"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="241"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="371"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.83" steps="2952"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.81" steps="2957"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.152.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="534"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="468"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="391"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="399"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="488"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.18" steps="2981005"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.161.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.161.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="0.68" steps="82102"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.161.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.161.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="7.91" steps="749396"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.161.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="0.64" steps="77508"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="275"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.163.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.163.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="1959"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="1991"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.163.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.21" steps="531655"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.163.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="5363"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.163.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="526011"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.163.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.163.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="1.02" steps="2047465"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.19" steps="541933"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.20" steps="546832"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.58" steps="1120276"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.58" steps="1120272"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.163.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.56" steps="1120270"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="6.11" steps="628540"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.11" steps="3875"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1954"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.94" steps="7536"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.12" steps="8301"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.163.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.13" steps="549873"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.163.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="10.83" steps="38133"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.163.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.98" steps="4676"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1276"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="275"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.29" steps="13406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="814"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1680"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="13.69" steps="32153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1092"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.87" steps="2721"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="586"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="280"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="268"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1034"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.189.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.189.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.20" steps="615170"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.189.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.189.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="4.76" steps="369969"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.189.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2" timelimit="15"><result status="valid" time="0.37"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.190.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.190.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.10" steps="444816"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="445665"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.190.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.15" steps="447805"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.190.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="4213"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.190.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.08" steps="396298"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.190.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.190.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.76" steps="1497277"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="449459"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.16" steps="454783"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="2.26" steps="148595"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.73" steps="5743"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.190.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.22" steps="588846"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="444800"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="450522"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.17" steps="448980"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="446134"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.15" steps="451460"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.190.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="5.95" steps="4509"/></proof>
     <proof prover="3"><result status="valid" time="0.10" steps="460321"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.190.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.86" steps="4698"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.190.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="2176"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="532"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1014"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="1409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="19.84" steps="33191"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="372"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="2830"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="456"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.203.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="540"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="1.64" steps="2855"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="396"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="404"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="484"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.05" steps="2820838"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.212.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.212.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.68" steps="2236"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.212.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="6.45" steps="507394"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1363"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.214.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.214.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.13" steps="523261"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.19" steps="524974"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.214.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="522825"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.214.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="0.34" steps="75007"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.214.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="518625"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.214.0.3.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="10.54" steps="599794"/></proof>
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.214.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="1.14" steps="1982207"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.19" steps="531404"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.19" steps="537614"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.52" steps="1084606"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.53" steps="1084600"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.214.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="1084600"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="8.25" steps="451165"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.07" steps="3774"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="3"><result status="valid" time="0.18" steps="522684"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.81" steps="6853"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.90" steps="7191"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.214.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="6.88" steps="12130"/></proof>
     <proof prover="3"><result status="valid" time="0.18" steps="540733"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.214.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="13.82" steps="38342"/></proof>
     <proof prover="1" timelimit="15"><result status="valid" time="1.70" steps="158398"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.214.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.94" steps="4549"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="100"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="132"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="276"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.84" steps="11619"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="807"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="2001"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="30.86" steps="55152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1083"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="3066"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="582"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="283"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="271"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="179"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1040"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.240.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.240.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1171"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.240.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.240.0.1.0" expl="asserted formula" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="0.17" steps="55145"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.240.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="5.99" steps="559769"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.240.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.16" steps="877"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.241.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.241.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1193"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="1229"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.241.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.09" steps="453381"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.241.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="4.76" steps="28335"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.241.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.10" steps="399353"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.241.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.241.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.63" steps="1516731"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="457374"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="462529"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.24" steps="601434"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="15"><result status="valid" time="5.81" steps="251564"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.241.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.24" steps="601434"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="12.25" steps="7365"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.41" steps="1793"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1197"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="1890"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="1890"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.241.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.10" steps="466516"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.241.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="2.16" steps="5314"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.241.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="2169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="536"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1022"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="1409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="34.67" steps="60556"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="371"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.252.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.58" steps="3559"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.254.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="543"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="399"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="487"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.16" steps="2951587"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.263.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.263.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="1" timelimit="15"><result status="valid" time="0.39" steps="86370"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.263.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="263"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="8.75" steps="704709"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1354"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.265.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.265.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="1899"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="1931"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.265.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.19" steps="532235"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.265.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.24" steps="5184"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.265.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="527774"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.265.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.265.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="1.09" steps="2011181"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.20" steps="543188"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.20" steps="549356"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.58" steps="1105058"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.57" steps="1105050"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.265.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.57" steps="1105050"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="14.30" steps="32293"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="8.58" steps="502380"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="3743"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="1894"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.84" steps="7253"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.93" steps="7590"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.265.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.22" steps="551431"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.265.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="1.09" steps="165313"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.265.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.93" steps="4534"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="268"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.37" steps="9803"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="787"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1624"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="216"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="851"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.281.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.281.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.20" steps="977"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.281.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.281.0.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.07" steps="399577"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.281.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="2.56" steps="310381"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.281.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="713"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.282.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.282.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="827"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="854"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s2 sntl2)">
     <goal name="decreaseKey&#39;vc.282.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.14" steps="427701"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.282.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="2844"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s2 pq)">
     <goal name="decreaseKey&#39;vc.282.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.12" steps="381902"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.282.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.282.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.72" steps="1407219"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="433480"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.15" steps="437945"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.22" steps="557639"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.68" steps="4119"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.22" steps="557632"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="9.83" steps="2746"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="2.91" steps="234573"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1512"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="825"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1229"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1229"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.282.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.14" steps="440247"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.282.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="3605"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="1636"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="870"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="1203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="18.23" steps="37220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="207"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="314"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="2489"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="387"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.295.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="458"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="342"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="362"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.76" steps="2702898"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.304.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.304.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.56" steps="1975"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.304.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.304.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="221"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.304.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="1" timelimit="15"><result status="valid" time="5.54" steps="520664"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.304.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1186"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="237"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.306.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.306.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="1684"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="10.76" steps="600045"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.52" steps="1716"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="10.00" steps="544271"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.306.0.2.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.19" steps="503306"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="4062"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.306.0.3.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="499383"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.306.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.75" steps="1863255"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.19" steps="516749"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.19" steps="522259"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.49" steps="1024599"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.49" steps="1024595"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="3"><result status="valid" time="0.50" steps="1024595"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="10.65" steps="26196"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="8.42" steps="549511"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="3362"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="1.68" steps="137023"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="1680"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="5.97" steps="480965"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.35" steps="5522"/></proof>
    <proof prover="1" timelimit="15"><result status="valid" time="12.84" steps="736633"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.45" steps="5834"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.306.0.9.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.11" steps="521828"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="8.26" steps="31073"/></proof>
     <proof prover="1" timelimit="15"><result status="valid" time="0.82" steps="127363"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.47" steps="3743"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="76"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="132"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="144"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="148"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.45" steps="4139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="26.97" steps="42092"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="108"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="41.13" steps="102734"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueR" proved="true">
 <transf name="intros" proved="true" arg1="s,t,pi">
  <goal name="boundary_frames_invariant_PqueueR.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueR.0.0" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="boundary_frames_invariant_PqueueR.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.0" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.65" steps="4866"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.1" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="5.30" steps="13294"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.2" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s sntl2)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.2.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="1.54" steps="7591"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.2.1" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="7.85" steps="20342"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.3" proved="true">
     <transf name="assert" proved="true" arg1="(repOk s pq)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.06" steps="327017"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1" proved="true">
      <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.18" steps="755"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.1" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="18"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2" proved="true">
        <transf name="unfold" proved="true" arg1="repOk">
         <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.0" proved="true">
          <proof prover="1" timelimit="15"><result status="valid" time="8.39" steps="530275"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.1" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="2.37" steps="6354"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.2" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="2.17" steps="6284"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3" proved="true">
          <transf name="assert" proved="true" arg1="(agree_child s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.06" steps="319696"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1" proved="true">
           <transf name="unfold" proved="true" arg1="agree_child" arg2="in" arg3="h">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0" proved="true">
            <transf name="destruct" proved="true" arg1="h">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0" proved="true">
             <transf name="instantiate" proved="true" arg1="h" arg2="n">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0" proved="true">
              <transf name="assert" proved="true" arg1="(idRef pi s.heap.child[n] t.heap.child[n])">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="7.50" steps="32448"/></proof>
               </goal>
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.1" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="13.97" steps="33946"/></proof>
               <proof prover="1" timelimit="15"><result status="valid" time="9.16" steps="568158"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4" proved="true">
          <transf name="assert" proved="true" arg1="(idRef pi s.heap.sibling[n] t.heap.sibling[n])">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(agree_sibling s t pi (union (img_rep s s.pool) s.pool))">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.06" steps="319696"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="agree_sibling" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="4.37" steps="23038"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.1" proved="true">
           <proof prover="1" timelimit="15"><result status="valid" time="3.61" steps="546235"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5" proved="true">
          <transf name="assert" proved="true" arg1="(agree_prev s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.06" steps="319696"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1" proved="true">
           <transf name="assert" proved="true" arg1="(pi.lor[n] = n)">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="15"><result status="valid" time="2.20" steps="10533"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1" proved="true">
            <transf name="unfold" proved="true" arg1="agree_prev" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0" proved="true">
             <transf name="destruct" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0" proved="true">
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="2.24" steps="9533"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.1" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="3.56" steps="21593"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.2" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="2.93" steps="13193"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.3" proved="true">
                <proof prover="1" timelimit="15"><result status="valid" time="4.39" steps="432069"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.4" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.66" steps="4860"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.5" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="5.22" steps="17579"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.6" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.92" steps="3021"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.7" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="3501"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.8" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.61" steps="5144"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.9" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0.0" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="13.45" steps="70863"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.10" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.48" steps="4964"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PQUEUE_REL" proved="true">
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="122"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="127"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="54"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="563"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.11" steps="9986"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="findMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="384"/></proof>
  </goal>
  <goal name="findMin&#39;vc.1" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="108"/></proof>
  </goal>
  <goal name="findMin&#39;vc.2" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="113"/></proof>
  </goal>
  <goal name="findMin&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="307"/></proof>
  </goal>
  <goal name="findMin&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="335"/></proof>
  </goal>
  <goal name="findMin&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="findMin&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="findMin&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="62"/></proof>
  </goal>
  <goal name="findMin&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="62"/></proof>
  </goal>
  <goal name="findMin&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="873"/></proof>
  </goal>
  <goal name="findMin&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="findMin&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.87" steps="10220"/></proof>
   </goal>
   <goal name="findMin&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="5.91" steps="30639"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findMin&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="findMin&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="114"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="138"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="140"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="142"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="144"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="184"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="184"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="186"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="188"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="190"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.19" steps="308"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="308"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="668"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="678"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="326"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="327"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="806"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="818"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="936"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="953"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.65" steps="5424"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="414"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="471"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="473"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="1029"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.03" steps="2947"/></proof>
  </goal>
  <goal name="insert&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.18" steps="2763"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.29.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="447"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.62" steps="4958"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="447"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.64" steps="4971"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.41" steps="13963"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="823"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.39" steps="9037"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.56" steps="479"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="479"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="1039"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.33.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="451"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.79" steps="4346"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.77" steps="4328"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.79" steps="4346"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="451"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.95" steps="13158"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.86" steps="13158"/></proof>
   </goal>
   <goal name="insert&#39;vc.33.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.80" steps="13158"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.20" steps="2807"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.35.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="451"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.80" steps="4343"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="451"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.78" steps="4345"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.85" steps="14121"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="826"/></proof>
   </goal>
   <goal name="insert&#39;vc.35.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.32" steps="11174"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="485"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
   <goal name="insert&#39;vc.37.0" expl="true case (assertion)" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="498"/></proof>
   </goal>
   <goal name="insert&#39;vc.37.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
    <goal name="insert&#39;vc.37.1.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="1.67" steps="9977"/></proof>
    </goal>
    <goal name="insert&#39;vc.37.1.1" expl="false case (assertion)" proved="true">
    <transf name="unfold" proved="true" arg1="coupling" arg2="in" arg3="Requires3">
     <goal name="insert&#39;vc.37.1.1.0" expl="false case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 l_s4 r_s4 pi111 l_pq r_pq)">
      <goal name="insert&#39;vc.37.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="1168"/></proof>
      </goal>
      <goal name="insert&#39;vc.37.1.1.0.1" expl="false case (assertion)" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="4.48" steps="22343"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.38" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.38.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.38.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="455"/></proof>
    </goal>
    <goal name="insert&#39;vc.38.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="450"/></proof>
    </goal>
    <goal name="insert&#39;vc.38.0.2" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.38.0.2.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="468"/></proof>
     </goal>
     <goal name="insert&#39;vc.38.0.2.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="Assert5">
      <goal name="insert&#39;vc.38.0.2.1.0" expl="false case" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="insert&#39;vc.38.0.2.1.0.0" expl="false case" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="insert&#39;vc.38.0.2.1.0.0.0" expl="false case" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Assert11">
         <goal name="insert&#39;vc.38.0.2.1.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="472"/></proof>
         </goal>
         <goal name="insert&#39;vc.38.0.2.1.0.0.0.1" expl="destruct premise" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="472"/></proof>
         </goal>
         <goal name="insert&#39;vc.38.0.2.1.0.0.0.2" expl="destruct premise" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="472"/></proof>
         </goal>
         <goal name="insert&#39;vc.38.0.2.1.0.0.0.3" expl="destruct premise" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="472"/></proof>
         </goal>
         <goal name="insert&#39;vc.38.0.2.1.0.0.0.4" expl="false case" proved="true">
         <transf name="instantiate" proved="true" arg1="Assert11" arg2="l_n,r_n">
          <goal name="insert&#39;vc.38.0.2.1.0.0.0.4.0" expl="false case" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.74" steps="32266"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.38.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.38.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="468"/></proof>
     </goal>
     <goal name="insert&#39;vc.38.0.3.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.38.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="4.09" steps="15105"/></proof>
      </goal>
      <goal name="insert&#39;vc.38.0.3.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="2.46" steps="12328"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.38.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.38.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="468"/></proof>
     </goal>
     <goal name="insert&#39;vc.38.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.38.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="4.59" steps="15105"/></proof>
      </goal>
      <goal name="insert&#39;vc.38.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="12.43" steps="30977"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.38.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.38.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="468"/></proof>
     </goal>
     <goal name="insert&#39;vc.38.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.38.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="4.10" steps="15105"/></proof>
      </goal>
      <goal name="insert&#39;vc.38.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="9.95" steps="44792"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.38.0.6" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result -&gt; idRef pi111 l_n r_n)">
     <goal name="insert&#39;vc.38.0.6.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="2.84" steps="10112"/></proof>
     </goal>
     <goal name="insert&#39;vc.38.0.6.1" expl="VC for insert" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="6.14" steps="29846"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.39" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.85" steps="1118"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.87" steps="1128"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="495"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.69" steps="549"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.82" steps="1157"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.34" steps="3845"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.43" steps="3068"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="5.68" steps="17215"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="555"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.69" steps="555"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.81" steps="1164"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.31" steps="3845"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.43" steps="3114"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="5.77" steps="16911"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.70" steps="561"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="1254"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="1260"/></proof>
  </goal>
  <goal name="insert&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.56" steps="3926"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.69" steps="954"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="958"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.70" steps="962"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.62" steps="6446"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.68" steps="6460"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.23" steps="10075"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.66" steps="6710"/></proof>
  </goal>
  <goal name="insert&#39;vc.64" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.68" steps="10089"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.59" steps="10091"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.72" steps="10030"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1012"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.37" steps="10123"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1020"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.37" steps="2628"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="1030"/></proof>
  </goal>
  <goal name="insert&#39;vc.72" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="1034"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1038"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="6.61" steps="13561"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.36" steps="8772"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.70" steps="9253"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.78" steps="9194"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.44" steps="9177"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.53" steps="9088"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.47" steps="9160"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.80" steps="1088"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.70" steps="9247"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.80" steps="1096"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="okRefperm">
   <goal name="insert&#39;vc.84.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.84.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="7.74" steps="18502"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="8.45" steps="21074"/></proof>
    </goal>
    <goal name="insert&#39;vc.84.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.50" steps="14436"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.85" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.85.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="wrs_to_tag_framed_by" arg2="in" arg3="Ensures19">
    <goal name="insert&#39;vc.85.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures19" arg2="n">
     <goal name="insert&#39;vc.85.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="4.96" steps="18167"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.85.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="wrs_to_key_framed_by" arg2="in" arg3="Ensures16">
    <goal name="insert&#39;vc.85.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures16" arg2="n">
     <goal name="insert&#39;vc.85.1.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="4.51" steps="18167"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.85.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem1 n (r_s.heap.rep[r_self])) -&gt; r_s5.heap.tag[n] = r_s.heap.tag[n])">
    <goal name="insert&#39;vc.85.2.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="594"/></proof>
    </goal>
    <goal name="insert&#39;vc.85.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="8.68" steps="22119"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.85.3" expl="postcondition" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="8.59" steps="22119"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.86" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="insert&#39;vc.86.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.86.0.0" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="coupling0">
     <goal name="insert&#39;vc.86.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.86.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.86.0.0.0.0.0" expl="true case" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="613"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.0.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(idRef pi111 l_pq r_pq)">
        <goal name="insert&#39;vc.86.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="10.01" steps="23984"/></proof>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.0.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="4.97" steps="21374"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.1" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(idRef pi111 l_pq r_pq)">
       <goal name="insert&#39;vc.86.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="8.89" steps="24028"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.1.1" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.74" steps="4438"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.2" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(idRef pi111 l_pq r_pq)">
       <goal name="insert&#39;vc.86.0.0.0.2.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="11.14" steps="31218"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.2.1" expl="VC for insert" proved="true">
       <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
        <goal name="insert&#39;vc.86.0.0.0.2.1.0" expl="true case" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="624"/></proof>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.2.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.86.0.0.0.2.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="28.79" steps="44241"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.2.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(l_s5.heap.key[l_n] = r_s5.heap.key[r_n])">
          <goal name="insert&#39;vc.86.0.0.0.2.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="23.54" steps="52355"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.2.1.1.1.1" expl="false case" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="7.91" steps="29109"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.3" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
       <goal name="insert&#39;vc.86.0.0.0.3.0" expl="true case" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="622"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.3.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ l_s5.heap.tag[l_n] = r_s5.heap.tag[r_n])">
        <goal name="insert&#39;vc.86.0.0.0.3.1.0" expl="asserted formula" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.86.0.0.0.3.1.0.0" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="19.28" steps="48123"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.3.1.0.1" proved="true">
         <transf name="unfold" proved="true" arg1="coupling" arg2="in" arg3="Requires3">
          <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0" proved="true">
          <transf name="destruct_rec" proved="true" arg1="Requires3">
           <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0" proved="true">
           <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
            <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="0.66" steps="1499"/></proof>
            </goal>
            <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h1">
             <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0" proved="true">
             <transf name="split_premise_right" proved="true" >
              <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0" proved="true">
              <transf name="eliminate_let" proved="true" >
               <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0" proved="true">
               <transf name="apply" proved="true" arg1="h4">
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="1483"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1483"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="616"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="11.78" steps="35161"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.4" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="7.76" steps="28843"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.5" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="15.29" steps="60148"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.6" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="4.79" steps="20529"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.7" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="25.49" steps="49962"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.8" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="14.47" steps="35666"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.9" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="10.10" steps="18318"/></proof>
                </goal>
                <goal name="insert&#39;vc.86.0.0.0.3.1.0.1.0.0.1.0.0.0.10" expl="apply premises" proved="true">
                <proof prover="0" timelimit="30"><result status="valid" time="29.21" steps="53764"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.3.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="5.24" steps="26066"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.4" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.86.0.0.0.4.0" expl="true case" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.08" steps="21501"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.4.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result)">
        <goal name="insert&#39;vc.86.0.0.0.4.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="1.55" steps="11700"/></proof>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.4.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.86.0.0.0.4.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="11.85" steps="34075"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.4.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="1513"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1" expl="false case" proved="true">
          <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h">
           <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0" expl="false case" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0.0" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="1502"/></proof>
            </goal>
            <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0.1" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="1502"/></proof>
            </goal>
            <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0.2" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="624"/></proof>
            </goal>
            <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0.3" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="11.40" steps="31159"/></proof>
            </goal>
            <goal name="insert&#39;vc.86.0.0.0.4.1.1.1.1.0.4" expl="false case" proved="true">
            <proof prover="0" timelimit="30"><result status="valid" time="9.99" steps="60318"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.5" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.86.0.0.0.5.0" expl="true case" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.21" steps="21495"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.5.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result /\ idRef pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
        <goal name="insert&#39;vc.86.0.0.0.5.1.0" expl="asserted formula" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.86.0.0.0.5.1.0.0" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="2.06" steps="6824"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.5.1.0.1" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="2.10" steps="6854"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.5.1.0.2" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="13.10" steps="31932"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.5.1.0.3" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="20.98" steps="49415"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.5.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
         <goal name="insert&#39;vc.86.0.0.0.5.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1519"/></proof>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.5.1.1.1" expl="false case" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="13.51" steps="52805"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.86.0.0.0.6" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.86.0.0.0.6.0" expl="true case" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.95" steps="21476"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.0.0.6.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
        <goal name="insert&#39;vc.86.0.0.0.6.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="1.41" steps="10253"/></proof>
        </goal>
        <goal name="insert&#39;vc.86.0.0.0.6.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result /\ idRef pi111 l_pq r_pq /\ idRef pi111 l_n r_n /\ coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
         <goal name="insert&#39;vc.86.0.0.0.6.1.1.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="insert&#39;vc.86.0.0.0.6.1.1.0.0" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="1.58" steps="5264"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.6.1.1.0.1" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="1.74" steps="5244"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.6.1.1.0.2" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="12.72" steps="31264"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.6.1.1.0.3" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="12.61" steps="33017"/></proof>
          </goal>
          <goal name="insert&#39;vc.86.0.0.0.6.1.1.0.4" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="0.97" steps="1507"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.86.0.0.0.6.1.1.1" expl="false case" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="13.24" steps="58088"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.86.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="586"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="586"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.3" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="586"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.4" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="586"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.58" steps="628"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="628"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.58" steps="628"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="628"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="630"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="886"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="896"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.47" steps="6383"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.95.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.95.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.95.0.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.95.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.61" steps="19843"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.95.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.95.1.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.95.1.0.0" expl="VC for insert" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="20.96" steps="24043"/></proof>
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.95.1.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="21.10" steps="24189"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="648"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.46" steps="419"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="950"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.90" steps="2634"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.04" steps="2527"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.101.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="393"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.21" steps="4023"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="393"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="393"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="752"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="752"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.43" steps="9824"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="425"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="425"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="962"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.105.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="397"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.52" steps="4173"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.51" steps="4156"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.52" steps="4173"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="397"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.18" steps="13519"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.73" steps="13519"/></proof>
   </goal>
   <goal name="insert&#39;vc.105.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="5.55" steps="22946"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.106" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.09" steps="2567"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.107.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="397"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.16" steps="4171"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="397"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="397"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="758"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="758"/></proof>
   </goal>
   <goal name="insert&#39;vc.107.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.55" steps="10808"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.108" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="431"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.109.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.109.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="401"/></proof>
    </goal>
    <goal name="insert&#39;vc.109.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.94" steps="3001"/></proof>
    </goal>
    <goal name="insert&#39;vc.109.0.2" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.109.0.2.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="414"/></proof>
     </goal>
     <goal name="insert&#39;vc.109.0.2.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.109.0.2.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.55" steps="10638"/></proof>
      </goal>
      <goal name="insert&#39;vc.109.0.2.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="2.43" steps="10536"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.109.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.109.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="414"/></proof>
     </goal>
     <goal name="insert&#39;vc.109.0.3.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.109.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.24" steps="10638"/></proof>
      </goal>
      <goal name="insert&#39;vc.109.0.3.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="2.24" steps="10536"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.109.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.109.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="414"/></proof>
     </goal>
     <goal name="insert&#39;vc.109.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.109.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.56" steps="10638"/></proof>
      </goal>
      <goal name="insert&#39;vc.109.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.98" steps="27367"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.109.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.109.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="414"/></proof>
     </goal>
     <goal name="insert&#39;vc.109.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.109.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.56" steps="10638"/></proof>
      </goal>
      <goal name="insert&#39;vc.109.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="11.11" steps="47715"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.109.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.109.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="414"/></proof>
     </goal>
     <goal name="insert&#39;vc.109.0.6.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.109.0.6.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.23" steps="10638"/></proof>
      </goal>
      <goal name="insert&#39;vc.109.0.6.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.60" steps="27369"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.110" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="1012"/></proof>
  </goal>
  <goal name="insert&#39;vc.111" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="438"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.12" steps="2538"/></proof>
  </goal>
  <goal name="insert&#39;vc.113" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="440"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1020"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="442"/></proof>
  </goal>
  <goal name="insert&#39;vc.116" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="1031"/></proof>
  </goal>
  <goal name="insert&#39;vc.117" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="444"/></proof>
  </goal>
  <goal name="insert&#39;vc.118" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.39" steps="3515"/></proof>
  </goal>
  <goal name="insert&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="1078"/></proof>
  </goal>
  <goal name="insert&#39;vc.120" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.52" steps="1041"/></proof>
  </goal>
  <goal name="insert&#39;vc.121" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="450"/></proof>
  </goal>
  <goal name="insert&#39;vc.122" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.122.0" expl="precondition" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="insert&#39;vc.122.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="3.13" steps="11118"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="3.13" steps="11122"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="7122"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.123" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="452"/></proof>
  </goal>
  <goal name="insert&#39;vc.124" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.47" steps="4041"/></proof>
  </goal>
  <goal name="insert&#39;vc.125" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="1093"/></proof>
  </goal>
  <goal name="insert&#39;vc.126" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.126.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.126.0.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.126.0.0.0" expl="precondition" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.126.0.0.0.0" expl="precondition" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.126.0.0.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.83" steps="13728"/></proof>
       </goal>
       <goal name="insert&#39;vc.126.0.0.0.0.1" expl="false case (precondition)" proved="true">
       <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self /\ idRef pi111 l_pq r_pq)">
        <goal name="insert&#39;vc.126.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="2.99" steps="14555"/></proof>
        </goal>
        <goal name="insert&#39;vc.126.0.0.0.0.1.1" expl="false case (precondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="1.87" steps="5007"/></proof>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.1" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="13.83" steps="33803"/></proof>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.2" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.2.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="4.00" steps="19162"/></proof>
          </goal>
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.2.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="7.06" steps="29837"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.3" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.3.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="4.04" steps="19162"/></proof>
          </goal>
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.3.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="7.08" steps="29837"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.4" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.4.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="4.04" steps="19162"/></proof>
          </goal>
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.4.1" expl="VC for insert" proved="true">
          <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
           <goal name="insert&#39;vc.126.0.0.0.0.1.1.4.1.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="1164"/></proof>
           </goal>
           <goal name="insert&#39;vc.126.0.0.0.0.1.1.4.1.1" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="10.11" steps="49732"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.5" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.5.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.64" steps="26463"/></proof>
          </goal>
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.5.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="21.15" steps="100788"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.126.0.0.0.0.1.1.6" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.6.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.66" steps="26463"/></proof>
          </goal>
          <goal name="insert&#39;vc.126.0.0.0.0.1.1.6.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="8.39" steps="41457"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.126.0.1" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="420"/></proof>
    </goal>
    <goal name="insert&#39;vc.126.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="420"/></proof>
    </goal>
    <goal name="insert&#39;vc.126.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="420"/></proof>
    </goal>
    <goal name="insert&#39;vc.126.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="420"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.127" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="458"/></proof>
  </goal>
  <goal name="insert&#39;vc.128" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="458"/></proof>
  </goal>
  <goal name="insert&#39;vc.129" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.74" steps="17124"/></proof>
  </goal>
  <goal name="insert&#39;vc.130" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="466"/></proof>
  </goal>
  <goal name="insert&#39;vc.131" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.17" steps="1387"/></proof>
  </goal>
  <goal name="insert&#39;vc.132" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.23" steps="1397"/></proof>
  </goal>
  <goal name="insert&#39;vc.133" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="597"/></proof>
  </goal>
  <goal name="insert&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.94" steps="651"/></proof>
  </goal>
  <goal name="insert&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="1539"/></proof>
  </goal>
  <goal name="insert&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.51" steps="3020"/></proof>
  </goal>
  <goal name="insert&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.41" steps="5654"/></proof>
  </goal>
  <goal name="insert&#39;vc.138" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.138.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.96" steps="10864"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.62" steps="617"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.63" steps="617"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.52" steps="10909"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="21.49" steps="94055"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.70" steps="1227"/></proof>
   </goal>
   <goal name="insert&#39;vc.138.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.03" steps="1555"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.98" steps="657"/></proof>
  </goal>
  <goal name="insert&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.96" steps="657"/></proof>
  </goal>
  <goal name="insert&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="1548"/></proof>
  </goal>
  <goal name="insert&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.51" steps="3037"/></proof>
  </goal>
  <goal name="insert&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.51" steps="5725"/></proof>
  </goal>
  <goal name="insert&#39;vc.144" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.144.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="4.29" steps="12390"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.1" expl="type invariant" proved="true">
   <proof prover="1" timelimit="30"><result status="valid" time="2.26" steps="129330"/></proof>
   <proof prover="2" timelimit="30"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.2" expl="type invariant" proved="true">
   <proof prover="1" timelimit="30"><result status="valid" time="2.35" steps="137320"/></proof>
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="4.31" steps="12515"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="25.46" steps="96756"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.5" expl="type invariant" proved="true">
   <proof prover="1" timelimit="30"><result status="valid" time="1.70" steps="127928"/></proof>
   <proof prover="2" timelimit="30"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="insert&#39;vc.144.6" expl="type invariant" proved="true">
   <proof prover="1" timelimit="30"><result status="valid" time="2.30" steps="132620"/></proof>
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.145" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="663"/></proof>
  </goal>
  <goal name="insert&#39;vc.146" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.07" steps="1527"/></proof>
  </goal>
  <goal name="insert&#39;vc.147" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.07" steps="1533"/></proof>
  </goal>
  <goal name="insert&#39;vc.148" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="9.28" steps="24748"/></proof>
  </goal>
  <goal name="insert&#39;vc.149" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="1223"/></proof>
  </goal>
  <goal name="insert&#39;vc.150" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="1227"/></proof>
  </goal>
  <goal name="insert&#39;vc.151" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="1231"/></proof>
  </goal>
  <goal name="insert&#39;vc.152" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="27.42" steps="49723"/></proof>
  </goal>
  <goal name="insert&#39;vc.153" expl="wr ({} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.153.0" expl="wr ({} union {self}`rep)`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="5.90" steps="18784"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.154" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.154.0" expl="wr ({self}`rep union {self})`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.48" steps="1621"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.155" expl="wr ({} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.155.0" expl="wr ({} union {self}`rep)`child" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="6.04" steps="19171"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.156" expl="wr ({self}`rep union {self})`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.156.0" expl="wr ({self}`rep union {self})`rep" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.52" steps="1645"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.157" expl="wr ({} union {self}`rep)`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.157.0" expl="wr ({} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="6.10" steps="19099"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.158" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="23.83" steps="46158"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.158.0" expl="wr ({self}`rep union {self})`size" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.54" steps="1637"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.159" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.96" steps="1281"/></proof>
  </goal>
  <goal name="insert&#39;vc.160" expl="wr ({} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.160.0" expl="wr ({} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="6.19" steps="19203"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.161" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="1289"/></proof>
  </goal>
  <goal name="insert&#39;vc.162" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="11.05" steps="26179"/></proof>
  </goal>
  <goal name="insert&#39;vc.163" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="1299"/></proof>
  </goal>
  <goal name="insert&#39;vc.164" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="1303"/></proof>
  </goal>
  <goal name="insert&#39;vc.165" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.03" steps="1307"/></proof>
  </goal>
  <goal name="insert&#39;vc.166" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.166.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="7.24" steps="14117"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.167" expl="wr ({} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.167.0" expl="wr ({} union {self}`rep)`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="7.06" steps="14150"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.168" expl="wr ({self}`rep union {self})`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.168.0" expl="wr ({self}`rep union {self})`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.56" steps="1697"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.169" expl="wr ({} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.169.0" expl="wr ({} union {self}`rep)`child" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="7.60" steps="14504"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.170" expl="wr ({self}`rep union {self})`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.170.0" expl="wr ({self}`rep union {self})`rep" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.55" steps="1721"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.171" expl="wr ({} union {self}`rep)`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.171.0" expl="wr ({} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="5.38" steps="14376"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.172" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.97" steps="36397"/></proof>
  </goal>
  <goal name="insert&#39;vc.173" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="1357"/></proof>
  </goal>
  <goal name="insert&#39;vc.174" expl="wr ({} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.174.0" expl="wr ({} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.12" steps="14394"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.175" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="1365"/></proof>
  </goal>
  <goal name="insert&#39;vc.176" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="14.14" steps="27553"/></proof>
  </goal>
  <goal name="insert&#39;vc.177" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.177.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.tag[n] = l_s5.heap.tag[n])">
    <goal name="insert&#39;vc.177.0.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="21.39" steps="65614"/></proof>
    </goal>
    <goal name="insert&#39;vc.177.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="3.31" steps="14976"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.177.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.key[n] = l_s5.heap.key[n])">
    <goal name="insert&#39;vc.177.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="l_result,0">
     <goal name="insert&#39;vc.177.1.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="690"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.1.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="7.00" steps="27526"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.1.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="690"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.177.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="3.30" steps="14976"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.177.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.tag[n] = r_s5.heap.tag[n])">
    <goal name="insert&#39;vc.177.2.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.177.2.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="690"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.2.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="10.16" steps="33915"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.2.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="690"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.177.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="5.13" steps="11619"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.177.3" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.key[n] = r_s5.heap.key[n])">
    <goal name="insert&#39;vc.177.3.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.177.3.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="690"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.3.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="17.71" steps="33915"/></proof>
     </goal>
     <goal name="insert&#39;vc.177.3.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.45" steps="690"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.177.3.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="5.12" steps="11619"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.178" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.178.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.178.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi11 l_pq r_pq)">
     <goal name="insert&#39;vc.178.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.59" steps="1723"/></proof>
     </goal>
     <goal name="insert&#39;vc.178.0.0.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.178.0.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.178.0.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="7.27" steps="33125"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="8.82" steps="45355"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.72" steps="27387"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.75" steps="27387"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.81" steps="39206"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.77" steps="37783"/></proof>
       </goal>
       <goal name="insert&#39;vc.178.0.0.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.95" steps="40115"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.178.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="682"/></proof>
    </goal>
    <goal name="insert&#39;vc.178.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="682"/></proof>
    </goal>
    <goal name="insert&#39;vc.178.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="682"/></proof>
    </goal>
    <goal name="insert&#39;vc.178.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="682"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.179" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="728"/></proof>
  </goal>
  <goal name="insert&#39;vc.180" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="728"/></proof>
  </goal>
  <goal name="insert&#39;vc.181" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="728"/></proof>
  </goal>
  <goal name="insert&#39;vc.182" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="728"/></proof>
  </goal>
  <goal name="insert&#39;vc.183" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="730"/></proof>
  </goal>
  <goal name="insert&#39;vc.184" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="1071"/></proof>
  </goal>
  <goal name="insert&#39;vc.185" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="1081"/></proof>
  </goal>
  <goal name="insert&#39;vc.186" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="2.63" steps="5623"/></proof>
  </goal>
  <goal name="insert&#39;vc.187" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.187.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.187.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.187.0.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.187.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.187.0.0.0.0.0" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.187.0.0.0.0.0.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="10.93" steps="33028"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="insert&#39;vc.187.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="702"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.187.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.187.1.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.187.1.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.187.1.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.187.1.0.0.0.0" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.187.1.0.0.0.0.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.187.1.0.0.0.0.0.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="8.92" steps="33387"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="insert&#39;vc.187.1.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="702"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.188" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="748"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="187"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="226"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="231"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="236"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="241"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="246"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.02" steps="4686"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="337"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="342"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="216"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="559"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1352"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1444"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.49" steps="7709"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="222"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="222"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="570"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1429"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="1508"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.84" steps="8250"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="228"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="443"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="449"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="432"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({} union {self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="462"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="466"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="470"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="474"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="478"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.81" steps="2171"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="486"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="490"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="494"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.84" steps="2216"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="wr ({} union {self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="502"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="506"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="510"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="514"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="wr ({} union {self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="542"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="546"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="550"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="554"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="558"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.14" steps="2902"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="566"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="570"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="574"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.17" steps="2977"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="wr ({} union {self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="582"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="586"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="590"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.79" steps="8076"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="292"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.63.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.63.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.63.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="1.10" steps="3183"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.63.0.0.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="10.43" steps="19130"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.63.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1453"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.63.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="deleteMin&#39;vc.63.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.63.1.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="3486"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.63.1.0.1" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="9.06" steps="22720"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.63.1.0.2" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1425"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="619"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="296"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="463"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="302"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.68.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.68.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.68.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="685"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.68.0.0.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.68.0.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.68.0.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.87" steps="3314"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.99" steps="4478"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.14" steps="7075"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.12" steps="7075"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.35" steps="7477"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.33" steps="7477"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.68.0.0.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.37" steps="7471"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.68.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="283"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.68.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="283"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.68.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="283"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.68.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="283"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.69.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.69.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="1.87" steps="7704"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.69.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.69.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="6864"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="309"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="102"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="102"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="628"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="664"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.01" steps="4460"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="108"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="108"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.98" steps="4173"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.85" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.86" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.95" steps="12169"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.87" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="114"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.88" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="604"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.89" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="610"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="320"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="908"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="2188"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="2259"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.94" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.94.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.09" steps="5053"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="302"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="302"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.97" steps="5453"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="9.00" steps="38382"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="644"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.94.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="690"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="326"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="326"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="922"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="2271"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.57" steps="2294"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.100" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.100.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.18" steps="5203"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="306"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="306"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.02" steps="5615"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="8.33" steps="27752"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="652"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.100.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="699"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="332"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1337"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1379"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.65" steps="2188"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.105" expl="wr ({} union {self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="760"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.106" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="717"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.107" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="721"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.108" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="772"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.109" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="776"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.110" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.22" steps="7269"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.111" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="784"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.112" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="741"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.113" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="745"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.114" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.15" steps="6428"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.115" expl="wr ({} union {self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="800"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.116" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="757"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.117" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="761"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.118" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.76" steps="2866"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.119" expl="wr ({} union {self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="838"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.120" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="795"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.121" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="799"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.122" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="850"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.123" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="854"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.124" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.71" steps="7454"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.125" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="862"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.126" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="819"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.127" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="823"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.128" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.79" steps="7578"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.129" expl="wr ({} union {self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="878"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.130" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="835"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.131" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="839"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.132" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.82" steps="10993"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.133" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="396"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.134" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.134.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.134.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.134.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="2.50" steps="6581"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.134.0.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn l_s1 (img_rep l_s1 l_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.134.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="370"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.134.0.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.06" steps="17373"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.134.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="1945"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.134.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.134.1.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.134.1.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="2.75" steps="7515"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.134.1.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.134.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="370"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.134.1.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="4.92" steps="17738"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.134.1.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1917"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="868"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.136" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="400"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.137" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="644"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="406"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.139" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.139.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.139.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.139.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3" timelimit="30"><result status="valid" time="0.10" steps="552015"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.139.0.0.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.139.0.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.139.0.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.32" steps="8928"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.56" steps="10158"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.34" steps="17364"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.29" steps="17364"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.02" steps="19602"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.53" steps="18846"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.139.0.0.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="5.87" steps="19590"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.139.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="379"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.139.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="379"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.139.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="379"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.139.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="379"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.140" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.140.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.140.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.10" steps="14554"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.140.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.140.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.01" steps="13909"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.141" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="413"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="151"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="222"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="227"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.64" steps="6785"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="238"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.99" steps="12524"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="259"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="345"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.95" steps="15183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.87" steps="3571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.49" steps="6369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.89" steps="4058"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.54" steps="8368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="16.70" steps="24591"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="951"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="662"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="665"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="372"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="627"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="19.77" steps="60000"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="1500"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.60" steps="1908"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="640"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.30.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.74" steps="2798"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.82" steps="2813"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.79" steps="2678"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.65" steps="5938"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="366"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="8.15" steps="34056"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="7.19" steps="36531"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.30.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="7.20" steps="26931"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="2406"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="2007"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="384"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.48" steps="1251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.82" steps="3183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="740"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="1361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="766"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="764"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.83" steps="6874"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.08" steps="6570"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.50.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="837"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.50.0.0.1" expl="precondition" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.50.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1577"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="1968"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="28.95" steps="96161"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.03" steps="8305"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="30"><result status="valid" time="11.54" steps="789519"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.92" steps="17291"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.50.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="11.08" steps="52747"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.50.0.1" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.50.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.50.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.50.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="387"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.03" steps="4360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="542"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.62" steps="1113"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.84" steps="2062"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.11" steps="2910"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.59.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.45" steps="524"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="524"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="524"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.86" steps="5295"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="9.01" steps="22082"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="909"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.59.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="1230"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.60" steps="1124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="2082"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.25" steps="3255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="27.67" steps="58600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="554"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="907"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="911"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="915"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.55" steps="16508"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.92" steps="16528"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="28.96" steps="65816"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="wr ({self}`rep union {self})`child" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="decreaseKey&#39;vc.73.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="6.51" steps="18777"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="935"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="939"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="943"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="947"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="5408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="955"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="969"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="973"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="977"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.32" steps="16400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.22" steps="16425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.45" steps="21642"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="wr ({self}`rep union {self})`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.86.0" expl="wr ({self}`rep union {self})`child" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="11.37" steps="58329"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="997"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="1001"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.57" steps="1005"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.57" steps="1009"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.77" steps="6070"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1017"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.97" steps="12747"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.94.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.94.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.94.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3" timelimit="30"><result status="valid" time="0.18" steps="787739"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.94.0.0.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.94.0.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.90" steps="2584"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="3.91" steps="13821"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.20" steps="13031"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.20" steps="13032"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="6.94" steps="27475"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="8.07" steps="27472"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.94.0.0.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="8.10" steps="27463"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.94.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.94.0.2" expl="postcondition" proved="true">
    <proof prover="3" timelimit="30"><result status="valid" time="0.02" steps="25335"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.94.0.3" expl="postcondition" proved="true">
    <proof prover="3" timelimit="30"><result status="valid" time="0.02" steps="25335"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.94.0.4" expl="postcondition" proved="true">
    <proof prover="3" timelimit="30"><result status="valid" time="0.01" steps="25335"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.98.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.98.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.47" steps="18575"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decreaseKey&#39;vc.98.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.98.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="8.63" steps="26207"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="452"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="652"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="655"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="372"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="624"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="25.47" steps="84865"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1472"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.63" steps="1989"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="378"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="636"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.112.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.80" steps="2994"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.81" steps="2996"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="5.04" steps="18291"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="366"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="366"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="53.83" steps="234276"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="522"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.112.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="4.19" steps="16271"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1519"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.66" steps="1974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="384"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="1533"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.82" steps="3286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="730"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="1696"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="746"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="754"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.90" steps="7127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.97" steps="9111"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.132.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.132.0.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="827"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.132.0.0.1" expl="precondition" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.132.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.47" steps="1733"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="2129"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="24.43" steps="43805"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.97" steps="8169"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="1" timelimit="30"><result status="valid" time="12.71" steps="629493"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <transf name="assert" proved="true" arg1="(idRef pi l_pos r_pos)">
        <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.10" steps="421"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1" expl="VC for decreaseKey" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi l_handle r_handle)">
         <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.13" steps="421"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1" expl="VC for decreaseKey" proved="true">
         <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h2">
          <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0" expl="VC for decreaseKey" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0" expl="VC for decreaseKey" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h3">
            <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.24" steps="424"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.1" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.26" steps="424"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.2" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.20" steps="419"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.3" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.18" steps="419"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4" expl="VC for decreaseKey" proved="true">
            <transf name="eliminate_let" proved="true" >
             <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0" expl="VC for decreaseKey" proved="true">
             <transf name="instantiate" proved="true" arg1="h3" arg2="l_n,r_n">
              <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0" expl="VC for decreaseKey" proved="true">
              <transf name="destruct_rec" proved="true" arg1="Hinst">
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.0" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.26" steps="421"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.1" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.37" steps="1264"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.2" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.20" steps="415"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.3" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.27" steps="421"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.4" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.39" steps="1264"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.5" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.21" steps="415"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.6" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.21" steps="415"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.7" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.7.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.37" steps="2936"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.7.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.7.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="12.03" steps="40983"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.7.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="34.35" steps="135217"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.8" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.8.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.11" steps="419"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.8.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.8.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="4.89" steps="27939"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.132.0.0.1.0.5.1.1.0.0.4.0.0.8.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="52.44" steps="176964"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.132.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.26" steps="9150"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.132.0.1" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.132.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.132.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="387"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.132.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="387"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.00" steps="4368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="542"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.63" steps="1109"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.87" steps="2276"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.06" steps="2876"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="19.05" steps="46318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.60" steps="1120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.85" steps="2078"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.15" steps="2945"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.147.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.38" steps="528"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.43" steps="528"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.44" steps="528"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.43" steps="5717"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="6.65" steps="31819"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.47" steps="908"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.147.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.58" steps="1233"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="554"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="904"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="908"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.152.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.152.0.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
    <transf name="assert" proved="true" arg1="(l_s2.heap.sibling[p] = l_s1.heap.sibling[p])">
     <goal name="decreaseKey&#39;vc.152.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.40" steps="1340"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.152.0.0.1" expl="wr ({self}`rep union {self})`sibling" proved="true">
     <proof prover="0"><result status="valid" time="21.54" steps="76450"/></proof>
     <transf name="assert" proved="true" arg1="(p &lt;&gt; l_handle /\ p &lt;&gt; l_tmp /\ p &lt;&gt; l_pos)">
      <goal name="decreaseKey&#39;vc.152.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.79" steps="4279"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.152.0.0.1.1" expl="wr ({self}`rep union {self})`sibling" proved="true">
      <proof prover="0"><result status="valid" time="11.83" steps="39178"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="15.75" steps="20155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="20.77" steps="34332"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.48" steps="5651"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="936"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="940"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="944"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.58" steps="5683"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="952"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="966"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="970"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.165.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.165.0.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
    <transf name="assert" proved="true" arg1="(r_s2.heap.sibling[p] = r_s1.heap.sibling[p])">
     <goal name="decreaseKey&#39;vc.165.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.45" steps="1420"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.165.0.0.1" expl="wr ({self}`rep union {self})`sibling" proved="true">
     <proof prover="0"><result status="valid" time="26.09" steps="97929"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="16.20" steps="21575"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="26.50" steps="48744"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.69" steps="6343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="994"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1002"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="1006"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.68" steps="6376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1014"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.58" steps="13694"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.176.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.176.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.176.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.36" steps="1418"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.176.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.176.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.91" steps="2912"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="4.02" steps="15386"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="4.57" steps="13888"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="4.53" steps="13888"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="9.19" steps="39346"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="10.87" steps="37668"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.176.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="11.57" steps="40981"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.32" steps="579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="579"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.180.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.180.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="8.79" steps="24640"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.180.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.56" steps="35297"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="439"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.28" steps="16157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1627"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="6.87" steps="23934"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="2820"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="299"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="307"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="934"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="2663"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="503"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="315"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="315"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1038"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="525"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="521"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.49" steps="5931"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.24" steps="3984"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.212.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.212.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.212.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.15" steps="571"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.212.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.212.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.35" steps="1231"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.43" steps="1606"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="35.53" steps="94471"/></proof>
       <proof prover="1"><result status="valid" time="5.98" steps="445284"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.51" steps="5997"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="33.05" steps="155084"/></proof>
       <proof prover="1"><result status="valid" time="6.85" steps="406454"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="5.09" steps="21013"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.212.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.81" steps="7928"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.14" steps="305"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.15" steps="305"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.15" steps="305"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.212.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.12" steps="305"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="327"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="327"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.83" steps="3439"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="986"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="2015"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="2293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="19.32" steps="38998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="996"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="1847"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.96" steps="2534"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="23.87" steps="54290"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="797"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="801"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="805"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.18" steps="4897"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="9.19" steps="11572"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.05" steps="4902"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="936"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="825"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="829"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="833"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="837"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="956"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="845"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="859"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="863"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="867"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.45" steps="5544"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.79" steps="13602"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.45" steps="5552"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="887"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="891"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="895"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="899"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="1018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="907"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.78" steps="11442"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.256.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.256.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.256.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.31" steps="1040"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.256.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.256.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.71" steps="2092"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.15" steps="11557"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.76" steps="11840"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.78" steps="11840"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="5.59" steps="21169"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.22" steps="21166"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.256.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.39" steps="21156"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.256.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="497"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.256.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="497"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.256.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="497"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.256.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="497"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="527"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="527"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="532"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.260.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.260.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="5.48" steps="14243"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.260.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.23" steps="22021"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="535"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.76" steps="6481"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="2076"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="2142"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.99" steps="7539"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="15.73" steps="15579"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="865"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="550"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="553"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="546"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.11" steps="16245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.51" steps="1679"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="557"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="19.71" steps="55018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1374"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.59" steps="1795"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="327"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1104"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.67" steps="2933"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="628"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="338"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="335"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="656"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="652"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="341"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.60" steps="6396"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.77" steps="6120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="345"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.303.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.303.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.303.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.17" steps="725"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.303.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.303.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.35" steps="1430"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.46" steps="1820"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="38.61" steps="192115"/></proof>
       <proof prover="1"><result status="valid" time="3.73" steps="465531"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.62" steps="6335"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="2.08" steps="9241"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="5.20" steps="20903"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.303.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.94" steps="33500"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.303.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.303.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.12" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.303.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.303.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="325"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.83" steps="3718"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="353"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="480"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="1031"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.70" steps="1912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.12" steps="3564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="29.58" steps="77493"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="1042"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="1934"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.99" steps="2788"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="26.42" steps="57215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="832"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="836"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="840"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.26" steps="14669"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.03" steps="4611"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="25.99" steps="57822"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.52" steps="14707"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="860"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="864"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="868"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="872"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.09" steps="5087"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="880"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="894"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="898"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="902"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.77" steps="15025"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.45" steps="5696"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.35" steps="19417"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.87" steps="15818"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="922"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="926"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="930"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="934"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="5734"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="942"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.74" steps="12133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.347" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.347.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.347.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.347.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.32" steps="1312"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.347.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.347.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.75" steps="2421"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.53" steps="13385"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.85" steps="12431"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.84" steps="12436"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.56" steps="26466"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="7.35" steps="26463"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.347.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="7.44" steps="26443"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="517"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.348" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.349" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.350" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.351" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.351.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.351.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="6.43" steps="16997"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.351.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.70" steps="22285"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.352" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.353" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.354" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.355" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="538"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.356" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="541"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.357" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.358" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="539"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.359" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.00" steps="18984"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.360" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1283"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.361" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.47" steps="1641"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.362" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.363" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.364" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="550"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.365" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.26" steps="42247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.366" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1337"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.367" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="1734"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.368" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.369" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="330"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.370" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="327"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.371" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.372" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.67" steps="2998"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.373" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="616"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.374" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.375" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="338"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.376" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="335"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.377" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.45" steps="1518"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.378" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="632"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.379" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="640"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.380" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="341"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.381" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.68" steps="6676"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.382" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.383" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.33" steps="8367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.384" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="345"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.385" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.385.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.385.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.385.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.15" steps="713"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.385.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.385.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.35" steps="1566"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.46" steps="1960"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="19.68" steps="69152"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.80" steps="7797"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.99" steps="8690"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h">
        <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0" expl="VC for decreaseKey" proved="true">
        <transf name="split_premise_right" proved="true" >
         <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0" expl="VC for decreaseKey" proved="true">
         <transf name="destruct_rec" proved="true" arg1="h1">
          <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.17" steps="362"/></proof>
          </goal>
          <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.1" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.18" steps="362"/></proof>
          </goal>
          <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.2" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.13" steps="357"/></proof>
          </goal>
          <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.3" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.13" steps="357"/></proof>
          </goal>
          <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4" expl="VC for decreaseKey" proved="true">
          <transf name="eliminate_let" proved="true" >
           <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0" expl="VC for decreaseKey" proved="true">
           <transf name="instantiate" proved="true" arg1="h1" arg2="l_n,r_n">
            <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0" expl="VC for decreaseKey" proved="true">
            <transf name="destruct_rec" proved="true" arg1="Hinst">
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.0" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.19" steps="359"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.1" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.29" steps="1129"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.2" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.15" steps="353"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.3" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.20" steps="359"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.4" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.31" steps="1129"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.5" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.15" steps="353"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.6" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.15" steps="353"/></proof>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.7" expl="VC for decreaseKey" proved="true">
             <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
              <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.7.0" expl="true case" proved="true">
              <proof prover="0"><result status="valid" time="0.15" steps="359"/></proof>
              </goal>
              <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.7.1" expl="false case" proved="true">
              <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
               <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.7.1.0" expl="false case (true case)" proved="true">
               <proof prover="0"><result status="valid" time="9.36" steps="32487"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.7.1.1" expl="false case" proved="true">
               <proof prover="0"><result status="valid" time="31.95" steps="94354"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.8" expl="VC for decreaseKey" proved="true">
             <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
              <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.8.0" expl="true case" proved="true">
              <proof prover="0"><result status="valid" time="0.12" steps="484"/></proof>
              </goal>
              <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.8.1" expl="false case" proved="true">
              <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
               <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.8.1.0" expl="false case (true case)" proved="true">
               <proof prover="0"><result status="valid" time="5.26" steps="32408"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.385.0.0.1.0.5.0.0.4.0.0.8.1.1" expl="false case" proved="true">
               <proof prover="0"><result status="valid" time="10.53" steps="48761"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.385.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="2.01" steps="8678"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.385.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.385.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.14" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.385.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="325"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.385.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="325"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.386" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.387" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.388" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.86" steps="4032"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.389" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="353"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.390" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="480"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.391" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.49" steps="1024"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.392" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.70" steps="1901"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.393" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.93" steps="2675"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.394" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.394.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="462"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.34" steps="462"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.33" steps="462"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.23" steps="5174"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="5.24" steps="26171"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.38" steps="824"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.394.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.50" steps="1103"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.395" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.396" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.397" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1035"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.398" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="1923"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.399" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.99" steps="2744"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.400" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.400.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="466"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="466"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.31" steps="466"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.63" steps="5346"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="5.91" steps="26526"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.35" steps="831"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.400.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.51" steps="1115"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.401" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.402" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="827"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.403" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="831"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.404" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="835"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.405" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.405.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.405.0.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
    <transf name="assert" proved="true" arg1="(l_s2.heap.sibling[p] = l_s1.heap.sibling[p])">
     <goal name="decreaseKey&#39;vc.405.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.34" steps="1222"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.405.0.0.1" expl="wr ({self}`rep union {self})`sibling" proved="true">
     <proof prover="0"><result status="valid" time="7.12" steps="23853"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.406" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.22" steps="5268"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.407" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.76" steps="18850"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.408" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.06" steps="4841"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.409" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="855"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.410" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="859"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.411" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="863"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.412" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="867"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.413" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.14" steps="4873"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.414" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="875"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.415" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="889"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.416" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="893"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.417" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="897"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.418" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.418.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.418.0.0" expl="wr ({self}`rep union {self})`sibling" proved="true">
    <transf name="assert" proved="true" arg1="(r_s2.heap.sibling[p] = r_s1.heap.sibling[p])">
     <goal name="decreaseKey&#39;vc.418.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.35" steps="1302"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.418.0.0.1" expl="wr ({self}`rep union {self})`sibling" proved="true">
     <proof prover="0"><result status="valid" time="19.93" steps="72397"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.419" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.47" steps="5946"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.420" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.74" steps="22190"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.421" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="5958"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.422" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="917"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.423" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="921"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.424" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="925"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.425" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="929"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.426" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.52" steps="5991"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.427" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="937"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.428" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.09" steps="13102"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.429" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.429.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.429.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.429.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.37" steps="1300"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.429.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.429.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.80" steps="2725"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.44" steps="13852"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="4.20" steps="13408"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="4.22" steps="13413"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="9.88" steps="30061"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="11.92" steps="38180"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.429.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="11.84" steps="40165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.429.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.429.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.26" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.429.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="517"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.429.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="517"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.430" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.431" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.432" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.433" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.433.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.433.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="8.86" steps="23566"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.433.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.33" steps="32974"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.434" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.435" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.436" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="352"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.437" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="227"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.438" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.439" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.58" steps="10052"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.440" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="1116"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.441" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1364"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.442" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="233"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.443" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="233"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.444" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.445" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.99" steps="11384"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.446" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.447" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="2152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.448" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.449" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.450" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.451" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="814"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.452" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2464"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.453" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.454" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="253"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.455" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.456" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.457" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="909"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.458" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.459" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.460" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="261"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.461" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.31" steps="5595"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.462" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.463" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.00" steps="3849"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.464" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="265"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.465" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.465.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.465.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="31.90" steps="135741"/></proof>
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.465.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="481"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.465.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.465.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.31" steps="1111"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.37" steps="1481"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="11.40" steps="25186"/></proof>
       <proof prover="1"><result status="valid" time="3.58" steps="379460"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.30" steps="5361"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.59" steps="7615"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.19" steps="13398"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.465.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.65" steps="7608"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.465.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="245"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.465.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="245"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.465.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="245"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.465.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="245"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.466" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="267"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.467" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="267"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.468" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.73" steps="3385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.469" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="273"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.470" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.471" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.472" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.60" steps="1704"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.473" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.77" steps="2134"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.474" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="22.04" steps="52197"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.475" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.476" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.477" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="921"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.478" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.61" steps="1724"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.479" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.81" steps="2195"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.480" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="24.03" steps="51173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.481" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.482" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="728"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.483" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="732"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.484" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="736"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.485" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.89" steps="4609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.486" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="834"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.487" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.90" steps="4615"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.488" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="842"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.489" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="756"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.490" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="760"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.491" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="764"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.492" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="768"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.493" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="862"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.494" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="776"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.495" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="790"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.496" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="794"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.497" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="798"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.498" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.15" steps="5246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.499" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.59" steps="896"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.500" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.16" steps="5253"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.501" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.58" steps="904"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.502" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="818"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.503" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="822"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.504" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="826"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.505" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="830"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.506" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.60" steps="924"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.507" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="838"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.508" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.30" steps="10989"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.509" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.509.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.509.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.509.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.27" steps="946"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.509.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.509.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.65" steps="1952"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="2.91" steps="11760"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.50" steps="11485"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="3.49" steps="11485"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.16" steps="20491"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.50" steps="20488"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.509.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="6.46" steps="20481"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.509.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.18" steps="437"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.509.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="437"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.509.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="437"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.509.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.18" steps="437"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.510" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.511" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.512" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="472"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.513" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.513.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.513.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.40" steps="12923"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.513.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="6.66" steps="19527"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.514" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="475"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.515" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.516" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.517" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="2777"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.518" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="915"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.519" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="1126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.520" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="147"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.521" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="147"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.522" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="342"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.523" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.79" steps="3334"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.524" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="971"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.525" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.47" steps="1881"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.526" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.527" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.528" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="285"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.529" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="289"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.530" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="293"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.531" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="297"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.532" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="301"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.533" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="305"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.534" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.535" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.536" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.537" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.538" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.539" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.540" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.541" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.542" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="351"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.543" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="355"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.544" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.545" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.546" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.547" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="371"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.548" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.549" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.550" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="383"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.551" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.552" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="391"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.553" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.18" steps="4393"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.554" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="coupling">
   <goal name="decreaseKey&#39;vc.554.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.554.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.554.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.10" steps="446"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.554.0.0.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.554.0.0.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.24" steps="984"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.28" steps="1298"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.70" steps="5998"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.97" steps="3873"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.26" steps="5433"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.25" steps="5430"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.554.0.0.1.0.6" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="1.12" steps="5421"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.554.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="193"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.554.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.07" steps="193"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.554.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="193"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.554.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.06" steps="193"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.555" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.556" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.557" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="216"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.558" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.558.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.558.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.95" steps="3384"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.558.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.89" steps="2953"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.559" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="223"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_coupling_PQUEUE_REL" proved="true">
 <transf name="intros" proved="true" arg1="s,t,s&#39;,t&#39;,pi,pi&#39;,rho">
  <goal name="boundary_frames_coupling_PQUEUE_REL.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 s s&#39; rho l_pq r_pq)">
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.13" steps="420831"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1" proved="true">
      <transf name="assert" proved="true" arg1="(s.pool = t.pool /\ s&#39;.pool = t&#39;.pool)">
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.05" steps="39"/></proof>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1" proved="true">
       <transf name="assert" proved="true" arg1="(img_rep s s.pool = img_rep t t.pool)">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="extensionality1">
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="introduce_exists" proved="true" >
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="img_rep_ax">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0.0.0.0.0" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.64" steps="7236"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="16.95" steps="75712"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1" proved="true">
        <transf name="assert" proved="true" arg1="(img_rep s&#39; s&#39;.pool = img_rep t&#39; t&#39;.pool)">
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="extensionality1">
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
          <transf name="inline_goal" proved="true" >
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="13.92" steps="42973"/></proof>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="16.82" steps="78020"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.0" proved="true">
           <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.11" steps="3485"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.head[l_pq] s&#39;.heap.head[r_pq] \/ s.heap.head[l_pq] = null /\ s&#39;.heap.head[r_pq] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.48" steps="3112"/></proof>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.1.1" proved="true">
            <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="12.20" steps="60897"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2" proved="true">
           <transf name="assert" proved="true" arg1="(s.heap.key[l_n] = s&#39;.heap.key[r_n])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h4">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h4">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.86" steps="3419"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.93" steps="3422"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="62"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.06" steps="62"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.4" expl="asserted formula" proved="true">
              <transf name="eliminate_let" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.4.0" expl="asserted formula" proved="true">
               <transf name="destruct" proved="true" arg1="h4">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.4.0.0" expl="asserted formula" proved="true">
                <transf name="destruct" proved="true" arg1="h4">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.4.0.0.0" expl="asserted formula" proved="true">
                 <transf name="instantiate" proved="true" arg1="h4" arg2="l_n,r_n">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.0.0.4.0.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="15.64" steps="75771"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1" proved="true">
            <transf name="assert" proved="true" arg1="(s.heap.key[l_n] = t.heap.key[l_n])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(agree_head s t pi (union (img_rep s s.pool) s.pool))">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.0.0" expl="asserted formula" proved="true">
              <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="373992"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.0.1" expl="asserted formula" proved="true">
              <transf name="assert" proved="true" arg1="(mem1 l_n (img_rep s s.pool))">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.0.1.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="268"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.0.1.1" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="10.01" steps="43381"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1" proved="true">
             <transf name="assert" proved="true" arg1="(s&#39;.heap.key[r_n] = t&#39;.heap.key[r_n])">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.0" expl="asserted formula" proved="true">
              <transf name="assert" proved="true" arg1="(agree_head s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.0.0" expl="asserted formula" proved="true">
               <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="374466"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.0.1" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="19.34" steps="79268"/></proof>
               <transf name="assert" proved="true" arg1="(mem1 r_n (img_rep s&#39; s&#39;.pool))">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.0.1.0" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.08" steps="270"/></proof>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.0.1.1" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="5.04" steps="23262"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.2.1.1.1" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3" proved="true">
           <transf name="assert" proved="true" arg1="(agree_tag s t pi (union (img_rep s s.pool) s.pool) /\ agree_tag s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.04" steps="65"/></proof>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.1" proved="true">
            <transf name="assert" proved="true" arg1="(s.heap.tag[l_n] = t.heap.tag[l_n] /\ s&#39;.heap.tag[r_n] = t&#39;.heap.tag[r_n])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.1.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="8.20" steps="45323"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.1.1" proved="true">
             <transf name="assert" proved="true" arg1="(s.heap.tag[l_n] = s&#39;.heap.tag[r_n])">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.1.1.0" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="14.12" steps="64341"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.3.1.1.1" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.03" steps="74"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.prev[l_n] s&#39;.heap.prev[r_n] /\ not s.heap.prev[l_n] = null /\ not s&#39;.heap.prev[r_n] = s&#39;.heap.sntl[r_pq] \/ s.heap.prev[l_n] = null /\ s&#39;.heap.prev[r_n] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h4">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h4">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.85" steps="3419"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.91" steps="3422"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.04" steps="62"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.06" steps="62"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4" expl="asserted formula" proved="true">
              <transf name="eliminate_let" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0" expl="asserted formula" proved="true">
               <transf name="destruct" proved="true" arg1="h4">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0" expl="asserted formula" proved="true">
                <transf name="destruct" proved="true" arg1="h4">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0" expl="asserted formula" proved="true">
                 <transf name="instantiate" proved="true" arg1="h4" arg2="l_n,r_n">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="destruct_rec" proved="true" arg1="Hinst">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.0" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.10" steps="353"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.1" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="5.78" steps="25556"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.2" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.99" steps="35453"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.3" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.22" steps="1025"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.4" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.19" steps="7863"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.5" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="6.28" steps="15223"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.6" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="64"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.7" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="86"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.8" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.9" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.10" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.11" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.06" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.12" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.07" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.13" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.06" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.0.0.4.0.0.0.0.14" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.05" steps="80"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1" proved="true">
            <transf name="assert" proved="true" arg1="(s.heap.prev[l_n] = t.heap.prev[l_n] /\ s&#39;.heap.prev[r_n] = t&#39;.heap.prev[r_n])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(agree_prev s t pi (union (img_rep s s.pool) s.pool) /\ agree_prev s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.0" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.04" steps="68"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1" expl="asserted formula" proved="true">
              <transf name="assert" proved="true" arg1="(idRef pi s.heap.prev[l_n] t.heap.prev[l_n])">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.0" expl="asserted formula" proved="true">
               <transf name="assert" proved="true" arg1="(pi.lor[l_n] = l_n)">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.0.0" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="1205"/></proof>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.0.1" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="4.93" steps="21776"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.0" proved="true">
                <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.11" steps="747"/></proof>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.1" proved="true">
                <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.prev[r_n] t&#39;.heap.prev[r_n])">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.1.0" expl="asserted formula" proved="true">
                 <transf name="assert" proved="true" arg1="(pi&#39;.lor[r_n] = r_n)">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.1.0.0" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.69" steps="3981"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.1.0.1" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="5.11" steps="27149"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.0.1.1.1.1" proved="true">
                 <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.11" steps="759"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1" proved="true">
             <transf name="subst" proved="true" arg1="l_pre,r_pre">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0" proved="true">
              <transf name="destruct" proved="true" arg1="h">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h1">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0" proved="true">
                <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0" proved="true">
                 <transf name="assert" proved="true" arg1="(s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="assert" proved="true" arg1="(agree_sntl s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.05" steps="73"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
                   <transf name="assert" proved="true" arg1="(mem1 s&#39;.heap.sntl[r_pq] s&#39;.pool)">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.47" steps="8350"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
                    <transf name="assert" proved="true" arg1="(mem1 t&#39;.heap.sntl[r_pq] t&#39;.pool)">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
                     <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.19" steps="984"/></proof>
                     </goal>
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.1.1" expl="asserted formula" proved="true">
                     <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.26" steps="10579"/></proof>
                      </goal>
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.0.1.1.1.1" expl="asserted formula" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.12" steps="788"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.4.1.1.0.0.0.0.1" proved="true">
                  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.03" steps="71"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5" proved="true">
           <transf name="assert" proved="true" arg1="(s.heap.sibling[l_n] = t.heap.sibling[l_n] /\ s&#39;.heap.sibling[r_n] = t&#39;.heap.sibling[r_n] /\ s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(idRef pi s.heap.sibling[l_n] t.heap.sibling[l_n] /\ idRef pi&#39; s&#39;.heap.sibling[r_n] t&#39;.heap.sibling[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(agree_sibling s t pi (union (img_rep s s.pool) s.pool) /\ agree_sibling s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool) /\ agree_sntl s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.0" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.05" steps="65"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1" expl="asserted formula" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0" proved="true">
               <transf name="assert" proved="true" arg1="(mem1 s.heap.sibling[l_n] (img_rep s s.pool) /\ pi.lor[l_n] = l_n)">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0.0" expl="asserted formula" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0.0.0" proved="true">
                 <transf name="rewrite" proved="true" arg1="img_rep_ax">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0.0.0.0" proved="true">
                  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="16.64" steps="58881"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0.0.1" proved="true">
                 <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.18" steps="867"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.0.1" proved="true">
                <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.58" steps="11156"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1" proved="true">
               <transf name="assert" proved="true" arg1="(mem1 s&#39;.heap.sibling[r_n] (union (img_rep s&#39; s&#39;.pool) s&#39;.pool) /\ pi&#39;.lor[r_n] = r_n)">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0" expl="asserted formula" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0" proved="true">
                 <transf name="rewrite" proved="true" arg1="union_def">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0" proved="true">
                  <transf name="rewrite" proved="true" arg1="img_rep_ax">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0" proved="true">
                   <transf name="assert" proved="true" arg1="(repOk s&#39; r_pq)">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.17" steps="925"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1" proved="true">
                    <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h1">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0" proved="true">
                     <transf name="destruct_rec" proved="true" arg1="h1">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.84" steps="3415"/></proof>
                      </goal>
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.1" expl="destruct premise" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.04" steps="70"/></proof>
                      </goal>
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2" proved="true">
                      <transf name="eliminate_let" proved="true" >
                       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0" proved="true">
                       <transf name="destruct_rec" proved="true" arg1="h1">
                        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0" proved="true">
                        <transf name="instantiate" proved="true" arg1="h1" arg2="r_n">
                         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0" proved="true">
                         <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="24.37" steps="96940"/></proof>
                         <transf name="destruct_rec" proved="true" arg1="Hinst">
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.0" expl="destruct premise" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.13" steps="720"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.1" expl="destruct premise" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="3.71" steps="10583"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.2" expl="destruct premise" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="14.68" steps="58117"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.3" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.60" steps="5957"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.4" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.38" steps="5700"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.5" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.16" steps="5895"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.6" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.31" steps="4684"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.7" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.39" steps="5700"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.8" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.46" steps="4423"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.9" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.21" steps="4684"/></proof>
                          </goal>
                          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.0.0.0.1.0.2.0.0.0.10" proved="true">
                          <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.26" steps="4247"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.0.1" proved="true">
                 <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.58" steps="2953"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.1.1" proved="true">
                <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.91" steps="8063"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.0.1.2" proved="true">
               <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="5.43" steps="22690"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.16" steps="1433"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1" proved="true">
            <transf name="assert" proved="true" arg1="(idRef rho s.heap.sibling[l_n] s&#39;.heap.sibling[r_n] /\ not s.heap.sibling[l_n] = null /\ not s&#39;.heap.sibling[r_n] = s&#39;.heap.sntl[r_pq] \/ s.heap.sibling[l_n] = null /\ s&#39;.heap.sibling[r_n] = s&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0" expl="asserted formula" proved="true">
             <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h5">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0" expl="asserted formula" proved="true">
              <transf name="destruct_rec" proved="true" arg1="h5">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.0" expl="destruct premise" proved="true">
               <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.95" steps="3895"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.1" expl="destruct premise" proved="true">
               <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.96" steps="3894"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.2" expl="destruct premise" proved="true">
               <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="68"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.3" expl="destruct premise" proved="true">
               <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.06" steps="68"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4" expl="asserted formula" proved="true">
               <transf name="eliminate_let" proved="true" >
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0" expl="asserted formula" proved="true">
                <transf name="destruct" proved="true" arg1="h5">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0" expl="asserted formula" proved="true">
                 <transf name="destruct" proved="true" arg1="h5">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0" expl="asserted formula" proved="true">
                  <transf name="instantiate" proved="true" arg1="h5" arg2="l_n,r_n">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="destruct_rec" proved="true" arg1="Hinst">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.0" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.10" steps="359"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.1" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.02" steps="27364"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.2" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="8.19" steps="35459"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.3" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.24" steps="1031"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.4" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="3.21" steps="7869"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.5" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="5.63" steps="15229"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.6" expl="destruct premise" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="70"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.7" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="92"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.8" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="90"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.9" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="90"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.10" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="88"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.11" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="90"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.12" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="88"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.13" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="88"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.0.0.4.0.0.0.0.14" expl="asserted formula" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="86"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.5.1.1" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.04" steps="76"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6" proved="true">
           <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h3">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0" proved="true">
            <transf name="destruct_rec" proved="true" arg1="h3">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.0" expl="destruct premise" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.87" steps="3419"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.1" expl="destruct premise" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.88" steps="3422"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.2" expl="destruct premise" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.04" steps="62"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.3" expl="destruct premise" proved="true">
             <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.05" steps="62"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4" proved="true">
             <transf name="eliminate_let" proved="true" >
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0" proved="true">
              <transf name="destruct" proved="true" arg1="h3">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0" proved="true">
               <transf name="destruct" proved="true" arg1="h3">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0" proved="true">
                <transf name="instantiate" proved="true" arg1="h3" arg2="l_n,r_n">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0" proved="true">
                 <transf name="assert" proved="true" arg1="(idRef rho s.heap.child[l_n] s&#39;.heap.child[r_n] /\ not s.heap.child[l_n] = null /\ not s&#39;.heap.child[r_n] = s&#39;.heap.sntl[r_pq] \/ s.heap.child[l_n] = null /\ s&#39;.heap.child[r_n] = s&#39;.heap.sntl[r_pq])">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="22.49" steps="98813"/></proof>
                  <transf name="destruct_rec" proved="true" arg1="Hinst">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.0" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.10" steps="353"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.1" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.16" steps="25556"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.2" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="8.27" steps="35453"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.3" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.22" steps="1025"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.4" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.31" steps="7863"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.5" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="5.59" steps="15223"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.6" expl="destruct premise" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="64"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.7" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="86"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.8" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.9" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.06" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.10" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.11" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="84"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.12" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.13" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.08" steps="82"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.0.14" expl="asserted formula" proved="true">
                   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.07" steps="80"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1" proved="true">
                  <transf name="remove" proved="true" arg1="Hinst">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0" proved="true">
                   <transf name="assert" proved="true" arg1="(idRef pi s.heap.child[l_n] t.heap.child[l_n] /\ idRef pi&#39; s&#39;.heap.child[r_n] t&#39;.heap.child[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                    <transf name="assert" proved="true" arg1="(agree_child s t pi (union (img_rep s s.pool) s.pool) /\ agree_child s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool) /\ agree_sntl s&#39; t&#39; pi&#39; (union (img_rep s&#39; s&#39;.pool) s&#39;.pool))">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                     <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.05" steps="69"/></proof>
                     </goal>
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0.1.0" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="7.95" steps="33532"/></proof>
                      </goal>
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0.1.1" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="10.06" steps="40325"/></proof>
                      </goal>
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.0.1.2" proved="true">
                      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.75" steps="6838"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.0.1.1.1.1.0.6.0.4.0.0.0.0.1.0.1" proved="true">
                    <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.15" steps="1128"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.1" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.10" steps="24"/></proof>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.2" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.06" steps="24"/></proof>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.3" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.3.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.3.0.0" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.00" steps="4035"/></proof>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.3.0.1" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.27" steps="14609"/></proof>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.3.0.2" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="18.55" steps="68274"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0.0" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.92" steps="4036"/></proof>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0.1" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="11.92" steps="29156"/></proof>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0.2" proved="true">
       <transf name="assert" proved="true" arg1="(s&#39;.heap.rep[p] \# s&#39;.heap.rep[q])">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0.2.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.04" steps="8151"/></proof>
        </goal>
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0.4.0.2.1" proved="true">
        <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="16.54" steps="50758"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Client" proved="true">
 <goal name="dijkstra&#39;vc" expl="VC for dijkstra" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="dijkstra&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="16"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.1" expl="Pqueue(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.2" expl="Pqueue(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="58"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.3" expl="Pqueue(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="59"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.4" expl="Pqueue(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.88" steps="3292"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.5" expl="Pqueue(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="68"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="102"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.7" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="170"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="198"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="4955"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1002"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1448"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.54" steps="1641"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="204"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.14" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="402"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.15" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="204"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.16" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="204"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="238"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.18" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="451"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.19" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="240"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.20" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="240"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.21" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="243"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.22" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="243"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.23" expl="ins := insert(queue,initDist,source)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="dijkstra&#39;vc.23.0" expl="VC for dijkstra" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="dijkstra&#39;vc.23.0.0" expl="VC for dijkstra" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="1164"/></proof>
    </goal>
    <goal name="dijkstra&#39;vc.23.0.1" expl="VC for dijkstra" proved="true">
    <proof prover="0"><result status="valid" time="2.81" steps="8882"/></proof>
    </goal>
    <goal name="dijkstra&#39;vc.23.0.2" expl="VC for dijkstra" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2795"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.24" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="586"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.25" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="292"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.26" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="292"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.27" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="293"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="296"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.29" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1017"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="14.56" steps="16958"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.31" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.39" steps="4635"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.32" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="12.43" steps="21226"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.33" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.25" steps="5147"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.34" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.11" steps="5127"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.35" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.26" steps="5139"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.36" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.32" steps="5168"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.37" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.59" steps="5154"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.38" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.68" steps="5193"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.39" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.29" steps="5173"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.40" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.33" steps="5207"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.41" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.23" steps="2322"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.42" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.83" steps="5193"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.43" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.16" steps="2335"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.17" steps="331"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.93" steps="7225"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.17" steps="331"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="20.24" steps="20114"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.48" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.87" steps="7900"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.49" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="336"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.50" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="352"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.51" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="352"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.52" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.17" steps="352"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.53" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="353"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.54" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="353"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.55" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="400"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.56" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="400"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.57" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="404"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.58" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="404"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.59" expl="assertion" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="6.35" steps="8956"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.60" expl="assertion" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="11.35" steps="10810574"/></proof>
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="dijkstra&#39;vc.60.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="13.57" steps="27962"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.61" expl="precondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.42" steps="894"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.62" expl="i := dist.{minTag} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.99" steps="2366"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.17" steps="420"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.64" expl="precondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.42" steps="908"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.65" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.99" steps="2376"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.66" expl="array size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="450"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.67" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="456"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.68" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="4.18" steps="10621"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.69" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.51" steps="2199"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.70" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.79" steps="2530"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.19" steps="3730"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="462"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.73" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.47" steps="956"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.74" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="460"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.75" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="460"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.76" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="dijkstra&#39;vc.76.0" expl="VC for dijkstra" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="dijkstra&#39;vc.76.0.0" expl="VC for dijkstra" proved="true">
    <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.07" steps="4122"/></proof>
    </goal>
    <goal name="dijkstra&#39;vc.76.0.1" expl="VC for dijkstra" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="dijkstra&#39;vc.76.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.13" steps="427"/></proof>
     </goal>
     <goal name="dijkstra&#39;vc.76.0.1.1" expl="VC for dijkstra" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="4.87" steps="13843"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="dijkstra&#39;vc.76.0.2" expl="VC for dijkstra" proved="true">
    <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.39" steps="7767"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.77" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.77" steps="4883"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.78" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.69" steps="1996"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.79" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.06" steps="4348"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.80" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.82" steps="11139"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.81" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.06" steps="4424"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.82" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.19" steps="4439"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.83" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.53" steps="4449"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.84" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.39" steps="4443"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.85" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.35" steps="4465"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.86" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.59" steps="4467"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.87" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.11" steps="4481"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.88" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.61" steps="4478"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.89" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.62" steps="4456"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.90" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.61" steps="4501"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.91" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.67" steps="4543"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.92" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.21" steps="504"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.93" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="dijkstra&#39;vc.93.0" expl="loop invariant init" proved="true">
   <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.90" steps="2460018"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.94" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="14.07" steps="31248"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.95" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="506"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.96" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="8.72" steps="10542"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.97" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="509"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.98" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="515"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.99" expl="currEdge := get(gEdges,i) ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="547"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.100" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="dijkstra&#39;vc.100.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="0.31" steps="957873"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.101" expl="precondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.67" steps="1267"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.102" expl="d := dist.{startV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.46" steps="1161"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.103" expl="assertion" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="567"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.104" expl="precondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.82" steps="1306"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.105" expl="d := dist.{endV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.48" steps="1168"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.106" expl="assertion" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.21" steps="573"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.107" expl="precondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.94" steps="1320"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.108" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.36" steps="1174"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.109" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.35" steps="612"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.110" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.01" steps="12974"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.111" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.98" steps="3110"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.112" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.90" steps="3646"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.97" steps="5383"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.39" steps="618"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.115" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.37" steps="618"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.116" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="613"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.117" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.30" steps="613"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.118" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="dijkstra&#39;vc.118.0" expl="VC for dijkstra" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="dijkstra&#39;vc.118.0.0" expl="VC for dijkstra" proved="true">
    <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="3.14" steps="5164"/></proof>
    </goal>
    <goal name="dijkstra&#39;vc.118.0.1" expl="VC for dijkstra" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="LoopInvariant3">
     <goal name="dijkstra&#39;vc.118.0.1.0" expl="VC for dijkstra" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="11.46" steps="17037"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="dijkstra&#39;vc.118.0.2" expl="VC for dijkstra" proved="true">
    <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="4.42" steps="9766"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.119" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.63" steps="2808"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.120" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.83" steps="2713"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.121" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.62" steps="1455"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.122" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.70" steps="5966"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.123" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.01" steps="1470"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.124" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.99" steps="1474"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.125" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.85" steps="1478"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.126" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.02" steps="1482"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.127" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.75" steps="1485"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.128" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.11" steps="1489"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.129" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.21" steps="1494"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.130" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.01" steps="1498"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.131" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.03" steps="1502"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.132" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.02" steps="1506"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.133" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.95" steps="1496"/></proof>
  <proof prover="1" timelimit="20" memlimit="12000"><result status="valid" time="1.11" steps="98362"/></proof>
  <proof prover="2" timelimit="20" memlimit="12000"><result status="valid" time="1.39"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.134" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.30" steps="653"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.135" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="dijkstra&#39;vc.135.0" expl="loop invariant preservation" proved="true">
   <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="1.04" steps="2895534"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dijkstra&#39;vc.136" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.10" steps="3924"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.137" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.30" steps="655"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.138" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.29" steps="656"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.139" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.29" steps="657"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.140" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.29" steps="657"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.141" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="575"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.142" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.29" steps="575"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.143" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="575"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.144" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="576"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.145" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.146" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.147" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.148" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.149" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.150" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.151" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.152" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.153" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.154" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.155" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.22" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.156" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.157" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.158" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.159" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.160" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.161" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.36" steps="590"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.166" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="577"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.167" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="547"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.168" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="547"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.169" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.23" steps="547"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.170" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="548"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.171" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.172" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.173" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.174" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.175" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.176" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.177" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.31" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.178" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.179" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.180" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.29" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.181" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.182" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.183" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.184" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.185" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.28" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.186" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.27" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.33" steps="562"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.188" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.189" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.25" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.190" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.191" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.24" steps="549"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.192" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.48" steps="895"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.193" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="422"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.194" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="422"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.195" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="423"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.196" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.90" steps="2230"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.197" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.49" steps="934"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.198" expl="wr ({queue}`rep union {queue})`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.27" steps="3887"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.199" expl="wr ({queue}`rep union {queue} union {dist})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.29" steps="3954"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.200" expl="wr ({queue}`rep union {queue})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.35" steps="3925"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.201" expl="wr ({queue}`rep union {queue})`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.35" steps="3938"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.202" expl="wr ({queue}`rep union {queue})`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.06" steps="3950"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.203" expl="wr ({queue}`rep union {queue})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.43" steps="3946"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.204" expl="wr ({queue}`rep union {queue})`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.31" steps="3967"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.205" expl="wr ({queue}`rep union {queue})`rep" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.08" steps="3969"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.206" expl="wr ({queue}`rep union {queue})`tag" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.58" steps="3981"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.207" expl="wr ({queue}`rep union {queue})`size" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.34" steps="3976"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.208" expl="wr ({queue}`rep union {queue})`length" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.08" steps="3980"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.209" expl="wr ({queue}`rep union {queue})`key" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.33" steps="4001"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.210" expl="wr ({queue}`rep union {queue} union {dist})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.31" steps="4006"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.211" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="456"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.212" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="9.53" steps="25152"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.213" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.22" steps="456"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.214" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="26.46" steps="27168"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.215" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.36" steps="9429"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.216" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="460"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.217" expl="postcondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="354"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.218" expl="postcondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.18" steps="355"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.219" expl="postcondition" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.20" steps="356"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.220" expl="wr (pool`rep union pool)`slots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="5.28" steps="7373"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.221" expl="wr (pool`rep union pool union {})`dSlots" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="14.19" steps="21074"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.222" expl="wr (pool`rep union pool union {})`sntl" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="6.93" steps="8363"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.223" expl="wr (pool`rep union pool)`sibling" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="6.20" steps="8344"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.224" expl="wr (pool`rep union pool)`prev" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="7.04" steps="8348"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.225" expl="wr (pool`rep union pool union {})`head" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="6.52" steps="8384"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.226" expl="wr (pool`rep union pool)`child" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="4.65" steps="8356"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.227" expl="wr (pool`rep union pool union pool union {})`rep" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="2.90" steps="4866835"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.228" expl="wr (pool`rep union pool)`tag" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="2.92" steps="5095024"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.229" expl="wr (pool`rep union pool union {})`size" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="4.37" steps="4870846"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.230" expl="wr (pool`rep union pool)`length" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="3.93" steps="4963914"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.231" expl="wr (pool`rep union pool)`key" proved="true">
  <proof prover="3" timelimit="20" memlimit="12000"><result status="valid" time="3.37" steps="5125380"/></proof>
  </goal>
  <goal name="dijkstra&#39;vc.232" expl="wr (pool`rep union pool union {})`dLength" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="2.73" steps="3163"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
