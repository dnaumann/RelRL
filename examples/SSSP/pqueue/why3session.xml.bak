<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="2" name="CVC3" version="2.4.1" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="4" name="Z3" version="4.8.4" timelimit="80" steplimit="0" memlimit="16000"/>
<prover id="5" name="CVC4" version="1.6" alternative="counterexamples" timelimit="60" steplimit="0" memlimit="10000"/>
<prover id="6" name="CVC4" version="1.6" timelimit="100" steplimit="0" memlimit="16000"/>
<prover id="7" name="Z3" version="4.8.4" alternative="counterexamples" timelimit="15" steplimit="0" memlimit="10000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="pqueue.mlw"/>
<theory name="State" proved="true">
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="450"/></proof>
 </goal>
</theory>
<theory name="PQUEUE" proved="true">
 <goal name="noPqueueInRep" proved="true">
 <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="1576"/></proof>
 </goal>
</theory>
<theory name="PqueueL" proved="true">
 <goal name="repClosed_DEF" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="repClosed_DEF.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="repClosed_DEF.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="6"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="6"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.2" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.3" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.4" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="674"/></proof>
   </goal>
   <goal name="repClosed_DEF.0.5" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="822"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="1.46" steps="6568"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Node&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.06" steps="147"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="942"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="413"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="516"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="72"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.7" expl="wr {self}`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.07" steps="107"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.8" expl="wr {self}`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.07" steps="111"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.30" steps="1602"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.06" steps="78"/></proof>
  </goal>
  <goal name="init_Node&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="60"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="178"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="584"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="494"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="2583"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="116"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="128"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="wr ({self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="136"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="140"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="wr ({self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="144"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="439"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="wr ({self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="152"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="156"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="160"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="164"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="168"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="176"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.44" steps="7710"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="215"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="209"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0" memlimit="16000"><result status="valid" time="0.06" steps="242"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.25.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.25.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1573"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="50.43" steps="91904"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.25.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.95" steps="4269"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.26" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.26.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.26.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Pqueue&#39;vc.26.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="init_Pqueue&#39;vc.26.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.00" steps="12560"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.14" steps="4261"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.2" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="19.79" steps="44355"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.3" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.56" steps="42597"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.4" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="19.89" steps="44351"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1549"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.95" steps="3997"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.3" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1727"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1739"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.26.0.5" expl="VC for init_Pqueue" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Pqueue&#39;vc.26.0.5.0" expl="VC for init_Pqueue" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="init_Pqueue&#39;vc.26.0.5.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.66" steps="50000"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.5.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.79" steps="50000"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="351"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="511"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.15" steps="55663"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.24" steps="59320"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="96"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="rep := self.rep" proved="true">
  <proof prover="5"><result status="valid" time="0.26" steps="63435"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="43"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="fkey := first.key" proved="true">
  <proof prover="5"><result status="valid" time="0.30" steps="64582"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="skey := second.key" proved="true">
  <proof prover="5"><result status="valid" time="0.30" steps="66302"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="tmp := first.prev" proved="true">
  <proof prover="5"><result status="valid" time="0.31" steps="66852"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.49" steps="87718"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="71196"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="108"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="tmp := second.child" proved="true">
  <proof prover="5"><result status="valid" time="0.34" steps="70140"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="tmp := first.sibling" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="70905"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="2440"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="75925"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="181"/></proof>
  <proof prover="5"><result status="valid" time="0.29" steps="72283"/></proof>
  </goal>
  <goal name="link&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="336"/></proof>
  <proof prover="5"><result status="valid" time="0.53" steps="106470"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.45" steps="45984"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1091"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1341"/></proof>
  <proof prover="5"><result status="valid" time="0.45" steps="93451"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="187"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="78442"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.24.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.24.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.66" steps="6358"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="1429"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.77" steps="8865"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.58" steps="68169"/></proof>
    </goal>
    <goal name="link&#39;vc.24.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.93" steps="8099"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="217"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="74688"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="428"/></proof>
  <proof prover="5"><result status="valid" time="0.56" steps="112631"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.12" steps="9873"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1390"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="1721"/></proof>
  <proof prover="5"><result status="valid" time="0.45" steps="94824"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="223"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="81423"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.76" steps="23140"/></proof>
  </goal>
  <goal name="link&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="220"/></proof>
  <proof prover="5"><result status="valid" time="0.14" steps="55477"/></proof>
  </goal>
  <goal name="link&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="438"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="74325"/></proof>
  </goal>
  <goal name="link&#39;vc.34" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="5064"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.35.0" expl="wr {self}`rep`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.35.0.0" expl="wr {self}`rep`prev" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.43" steps="12245"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.36" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="4941"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="23.53" steps="65888"/></proof>
  <proof prover="5"><result status="valid" time="9.42" steps="784334"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.38.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.38.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.60" steps="3027"/></proof>
    </goal>
    <goal name="link&#39;vc.38.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.56" steps="12507"/></proof>
    </goal>
    <goal name="link&#39;vc.38.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1400"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.39" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.39.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.39.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.01" steps="32043"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="2034"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1324"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2581"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="2584"/></proof>
    </goal>
    <goal name="link&#39;vc.39.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.06" steps="24042"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="241"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="65653"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="235"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="56907"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="235"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="61383"/></proof>
  </goal>
  <goal name="link&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.34" steps="71384"/></proof>
  </goal>
  <goal name="link&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="331"/></proof>
  <proof prover="5"><result status="valid" time="0.54" steps="100700"/></proof>
  </goal>
  <goal name="link&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.54" steps="19367"/></proof>
  </goal>
  <goal name="link&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1010"/></proof>
  </goal>
  <goal name="link&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1257"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="87977"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="181"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="77441"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.49.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.49.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.61" steps="7072"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1318"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.99" steps="8274"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.65" steps="19661"/></proof>
    </goal>
    <goal name="link&#39;vc.49.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.60" steps="7324"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="178"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="55020"/></proof>
  </goal>
  <goal name="link&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="343"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="71088"/></proof>
  </goal>
  <goal name="link&#39;vc.52" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.62" steps="3553"/></proof>
  </goal>
  <goal name="link&#39;vc.53" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.69" steps="18230"/></proof>
  </goal>
  <goal name="link&#39;vc.54" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.63" steps="3589"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.04" steps="18616"/></proof>
  <proof prover="5"><result status="valid" time="4.58" steps="428937"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.56.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.56.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.42" steps="2305"/></proof>
    </goal>
    <goal name="link&#39;vc.56.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.11" steps="8720"/></proof>
    </goal>
    <goal name="link&#39;vc.56.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="1082"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.57" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.57.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.57.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.34" steps="20830"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1572"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="1026"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="2002"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="2004"/></proof>
    </goal>
    <goal name="link&#39;vc.57.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.19" steps="17754"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="199"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="64312"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="193"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56295"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="193"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="60816"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="74"/></proof>
  </goal>
  <goal name="link&#39;vc.62" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="164"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="66815"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1812"/></proof>
  <proof prover="5"><result status="valid" time="0.60" steps="89172"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="110"/></proof>
  </goal>
  <goal name="link&#39;vc.65" expl="tmp := first.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="68170"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="119"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="tmp := first.child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="267"/></proof>
  <proof prover="5"><result status="valid" time="0.36" steps="71365"/></proof>
  </goal>
  <goal name="link&#39;vc.69" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="176"/></proof>
  </goal>
  <goal name="link&#39;vc.70" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="317"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="72032"/></proof>
  </goal>
  <goal name="link&#39;vc.71" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.50" steps="2523"/></proof>
  </goal>
  <goal name="link&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="241"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="74214"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="415"/></proof>
  <proof prover="5"><result status="valid" time="0.58" steps="109871"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.98" steps="89343"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="1440"/></proof>
  </goal>
  <goal name="link&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1474"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="92489"/></proof>
  </goal>
  <goal name="link&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="247"/></proof>
  <proof prover="5"><result status="valid" time="0.41" steps="80749"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.78.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.78.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.90" steps="7131"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.30" steps="1543"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.20" steps="25693"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="82.23" steps="332395"/></proof>
    </goal>
    <goal name="link&#39;vc.78.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.85" steps="8905"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="244"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="55691"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="449"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="73922"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="4233"/></proof>
  </goal>
  <goal name="link&#39;vc.82" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.82.0" expl="wr {self}`rep`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.82.0.0" expl="wr {self}`rep`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.08" steps="10850"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.83" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.17" steps="62853"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.60" steps="47991"/></proof>
  <proof prover="5"><result status="valid" time="7.69" steps="674067"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.85.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.85.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.47" steps="2877"/></proof>
    </goal>
    <goal name="link&#39;vc.85.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.74" steps="11807"/></proof>
    </goal>
    <goal name="link&#39;vc.85.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1253"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.86" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.86.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.86.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.64" steps="32997"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="1987"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="1197"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2449"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2451"/></proof>
    </goal>
    <goal name="link&#39;vc.86.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.66" steps="24341"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="265"/></proof>
  <proof prover="5"><result status="valid" time="0.24" steps="66014"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="259"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="57077"/></proof>
  </goal>
  <goal name="link&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="259"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61580"/></proof>
  </goal>
  <goal name="link&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="209"/></proof>
  <proof prover="5"><result status="valid" time="0.30" steps="72726"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="381"/></proof>
  <proof prover="5"><result status="valid" time="0.61" steps="104585"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.99" steps="26071"/></proof>
  </goal>
  <goal name="link&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1111"/></proof>
  </goal>
  <goal name="link&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="1516"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="88770"/></proof>
  </goal>
  <goal name="link&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.40" steps="78864"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.96.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.96.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.56" steps="6162"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.37" steps="1407"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.07" steps="15562"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.05" steps="15591"/></proof>
    </goal>
    <goal name="link&#39;vc.96.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.06" steps="8254"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="55373"/></proof>
  </goal>
  <goal name="link&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="403"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="72476"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.80" steps="3697"/></proof>
  </goal>
  <goal name="link&#39;vc.100" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.16" steps="20271"/></proof>
  </goal>
  <goal name="link&#39;vc.101" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.59" steps="19329"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.34" steps="22228"/></proof>
  <proof prover="5"><result status="valid" time="5.93" steps="550430"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="96.03" steps="315267"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.104.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.104.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.59" steps="25677"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="1681"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="1109"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="2124"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2122"/></proof>
    </goal>
    <goal name="link&#39;vc.104.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.83" steps="21035"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="233"/></proof>
  <proof prover="5"><result status="valid" time="0.23" steps="65193"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56736"/></proof>
  </goal>
  <goal name="link&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.24" steps="61301"/></proof>
  </goal>
  <goal name="link&#39;vc.108" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="110"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="tmp := first.child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="68879"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="link&#39;vc.111" expl="tmp := second.sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="265"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="70176"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1967"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="209"/></proof>
  <proof prover="5"><result status="valid" time="0.33" steps="72622"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="375"/></proof>
  <proof prover="5"><result status="valid" time="0.53" steps="103905"/></proof>
  </goal>
  <goal name="link&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.74" steps="31169"/></proof>
  </goal>
  <goal name="link&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1418"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1347"/></proof>
  <proof prover="5"><result status="valid" time="0.44" steps="89844"/></proof>
  </goal>
  <goal name="link&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="215"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="78761"/></proof>
  </goal>
  <goal name="link&#39;vc.119" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.119.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.119.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.51" steps="5970"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="202"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.90" steps="14604"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.37" steps="21402"/></proof>
    </goal>
    <goal name="link&#39;vc.119.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.68" steps="7099"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="212"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="55362"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="394"/></proof>
  <proof prover="5"><result status="valid" time="0.34" steps="72410"/></proof>
  </goal>
  <goal name="link&#39;vc.122" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.58" steps="3681"/></proof>
  </goal>
  <goal name="link&#39;vc.123" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.76" steps="16962"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.84" steps="16991"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.36" steps="20807"/></proof>
  <proof prover="5"><result status="valid" time="6.25" steps="542221"/></proof>
  </goal>
  <goal name="link&#39;vc.126" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="22.09" steps="76992"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.127.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.127.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.58" steps="21786"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1821"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="1083"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="2252"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="2254"/></proof>
    </goal>
    <goal name="link&#39;vc.127.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.08" steps="17697"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.128" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="233"/></proof>
  <proof prover="5"><result status="valid" time="0.27" steps="65205"/></proof>
  </goal>
  <goal name="link&#39;vc.129" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.15" steps="56742"/></proof>
  </goal>
  <goal name="link&#39;vc.130" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="227"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61240"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="177"/></proof>
  <proof prover="5"><result status="valid" time="0.32" steps="70584"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="332"/></proof>
  <proof prover="5"><result status="valid" time="0.55" steps="98205"/></proof>
  </goal>
  <goal name="link&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.47" steps="18786"/></proof>
  </goal>
  <goal name="link&#39;vc.134" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="980"/></proof>
  </goal>
  <goal name="link&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="1216"/></proof>
  <proof prover="5"><result status="valid" time="0.38" steps="85296"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="183"/></proof>
  <proof prover="5"><result status="valid" time="0.42" steps="76295"/></proof>
  </goal>
  <goal name="link&#39;vc.137" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="link&#39;vc.137.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.137.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.16" steps="4592"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="170"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="12123"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.38" steps="5878"/></proof>
    </goal>
    <goal name="link&#39;vc.137.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.34" steps="5895"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="180"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="55044"/></proof>
  </goal>
  <goal name="link&#39;vc.139" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="341"/></proof>
  <proof prover="5"><result status="valid" time="0.30" steps="70329"/></proof>
  </goal>
  <goal name="link&#39;vc.140" expl="wr {self}`rep`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="3186"/></proof>
  </goal>
  <goal name="link&#39;vc.141" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1391"/></proof>
  </goal>
  <goal name="link&#39;vc.142" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="15.54" steps="65004"/></proof>
  </goal>
  <goal name="link&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.08" steps="19378"/></proof>
  <proof prover="5"><result status="valid" time="4.81" steps="412128"/></proof>
  </goal>
  <goal name="link&#39;vc.144" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.144.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.144.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2204"/></proof>
    </goal>
    <goal name="link&#39;vc.144.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.76" steps="7992"/></proof>
    </goal>
    <goal name="link&#39;vc.144.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1046"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.145" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.145.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.145.0.0" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.59" steps="20437"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.1" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1522"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.2" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="989"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.3" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1931"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.4" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="1931"/></proof>
    </goal>
    <goal name="link&#39;vc.145.0.5" expl="VC for link" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.31" steps="14634"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.146" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="201"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="64019"/></proof>
  </goal>
  <goal name="link&#39;vc.147" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="195"/></proof>
  <proof prover="5"><result status="valid" time="0.16" steps="56325"/></proof>
  </goal>
  <goal name="link&#39;vc.148" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="195"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="60893"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.14" steps="1364"/></proof>
 </goal>
 <goal name="img_rep_lem" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="2"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="6.47" steps="36382"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="68"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="19.61" steps="50673"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="940"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.44" steps="26659"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1216"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="707"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="1289"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="1291"/></proof>
    </goal>
    <goal name="insert&#39;vc.8.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.45" steps="11259"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="661"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="331"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="302"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="146"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="406"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="915"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1418"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.96" steps="13851"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="152"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="2466"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="2348"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="3059"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.21.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.21.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="2239"/></proof>
    </goal>
    <goal name="insert&#39;vc.21.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="146.72" steps="336001"/></proof>
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.21.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="138"/></proof>
     </goal>
     <goal name="insert&#39;vc.21.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.21.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.21.0.1.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.47" steps="35437"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.21.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="382"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="18.92" steps="63955"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.23.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.23.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.23.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.23.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="6.01" steps="16209"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.03" steps="4334"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="9.24" steps="25382"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="9.19" steps="24062"/></proof>
      </goal>
      <goal name="insert&#39;vc.23.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="9.15" steps="25462"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.23.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1715"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="4133"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="2232"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="2407"/></proof>
    </goal>
    <goal name="insert&#39;vc.23.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.75" steps="30330"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="158"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="156"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="56111"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="428"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="164"/></proof>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="194"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="2346"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="373"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="200"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="502"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="234"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="604"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1161"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1940"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.62" steps="20381"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="240"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="236"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="554"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="5499"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="435"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="439"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="443"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_key_framed_by">
   <goal name="insert&#39;vc.45.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.45.0.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
    <proof prover="0"><result status="valid" time="2.82" steps="6824"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.46" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.05" steps="7101"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="4.35" steps="9871"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="wr ({} union {self}`rep)`child" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_tag_framed_by">
   <goal name="insert&#39;vc.48.0" expl="wr ({} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.48.0.0" expl="wr ({} union {self}`rep)`child" proved="true">
    <proof prover="0"><result status="valid" time="4.11" steps="8978"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.49" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="5"><result status="valid" time="1.97" steps="193944"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="wr ({} union {self}`rep)`tag" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="insert&#39;vc.50.0" expl="wr ({} union {self}`rep)`tag" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.50.0.0" expl="wr ({} union {self}`rep)`tag" proved="true">
    <proof prover="0"><result status="valid" time="11.98" steps="9141"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="4.41" steps="9976"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="493"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="11.97" steps="8931"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="501"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.55.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.55.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.55.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.55.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="272"/></proof>
      </goal>
      <goal name="insert&#39;vc.55.0.0.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.55.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.55.0.0.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.71" steps="12362"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="268"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="273"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="275"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="273"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="274"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="12.68" steps="23070"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="8.42" steps="13942"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.63.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.63.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.78" steps="7853"/></proof>
    </goal>
    <goal name="insert&#39;vc.63.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Assert9">
     <goal name="insert&#39;vc.63.0.1.0" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="47.07" steps="35903"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.63.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.32" steps="2033"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.64.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.64.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.64.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.64.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node (Nil : list reftype)))">
       <goal name="insert&#39;vc.64.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.32" steps="1940"/></proof>
       </goal>
       <goal name="insert&#39;vc.64.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="3.17" steps="9969"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="1.74" steps="6600"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="11.45" steps="20837"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="11.49" steps="20837"/></proof>
      </goal>
      <goal name="insert&#39;vc.64.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="11.60" steps="20837"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.64.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="4.66" steps="11252"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.38" steps="10386"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.04" steps="12791"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="4.75" steps="12781"/></proof>
    </goal>
    <goal name="insert&#39;vc.64.0.5" expl="VC for insert" proved="true">
    <proof prover="2"><result status="valid" time="26.67"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.65" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="164"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.66.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.49" steps="17228"/></proof>
   <proof prover="6"><result status="valid" time="4.98" steps="523686"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.67" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="507"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="168"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1273"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="170"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="523"/></proof>
  </goal>
  <goal name="insert&#39;vc.72" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="172"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="172"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="3049"/></proof>
  </goal>
  <goal name="insert&#39;vc.75" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="177"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="244"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="238"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="675"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="274"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="778"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1930"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2455"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="14.27" steps="43790"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="280"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="274"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="727"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.79" steps="12946"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="555"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="559"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="563"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="48.84" steps="22399"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="48.73" steps="22404"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="11.66" steps="17627"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="63.59" steps="23757"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.48" steps="24223"/></proof>
  <proof prover="6" timelimit="80"><result status="valid" time="3.02" steps="278054"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="61.68" steps="22947"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="18.79" steps="27442"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="609"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="90352"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="61.74" steps="24526"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="617"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="90538"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.102.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.102.0.0" expl="postcondition" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def, img_rep_ax" arg2="in" arg3="H">
     <goal name="insert&#39;vc.102.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.102.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.15" steps="312"/></proof>
      </goal>
      <goal name="insert&#39;vc.102.0.0.0.1" expl="postcondition" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="insert&#39;vc.102.0.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.29" steps="27382"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.75" steps="5826"/></proof>
  <proof prover="5"><result status="valid" time="14.17" steps="781454"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="314"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="73028"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="316"/></proof>
  <proof prover="5"><result status="valid" time="0.46" steps="94438"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="312"/></proof>
  <proof prover="5"><result status="valid" time="0.25" steps="61269"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="313"/></proof>
  <proof prover="5"><result status="valid" time="0.28" steps="61301"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="3.72" steps="386550"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.109.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="insert&#39;vc.109.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.109.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="905"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.109.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="892"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.110" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.110.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.110.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="9.43" steps="16376"/></proof>
    </goal>
    <goal name="insert&#39;vc.110.0.1" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures26">
     <goal name="insert&#39;vc.110.0.1.0" expl="VC for insert" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="insert&#39;vc.110.0.1.0.0" expl="VC for insert" proved="true">
      <proof prover="5"><result status="valid" time="8.13" steps="618087"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.110.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="2634"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.111" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.111.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.111.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="insert&#39;vc.111.0.0.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.111.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="insert&#39;vc.111.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.53" steps="2520"/></proof>
       </goal>
       <goal name="insert&#39;vc.111.0.0.0.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="6.43" steps="14289"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.1" expl="VC for insert" proved="true">
      <proof prover="5"><result status="valid" time="2.08" steps="201541"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.2" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="1.04"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.3" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.91"/></proof>
      </goal>
      <goal name="insert&#39;vc.111.0.0.0.4" expl="VC for insert" proved="true">
      <proof prover="2"><result status="valid" time="0.90"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.111.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="20.55" steps="21418"/></proof>
    <proof prover="5"><result status="valid" time="3.44" steps="333440"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="12.88" steps="19187"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.3" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="27.58" steps="25982"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="25.67" steps="25957"/></proof>
    </goal>
    <goal name="insert&#39;vc.111.0.5" expl="VC for insert" proved="true">
    <transf name="unfold" proved="true" arg1="nodeP">
     <goal name="insert&#39;vc.111.0.5.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.111.0.5.0.0" expl="VC for insert" proved="true">
      <transf name="case" proved="true" arg1="(p = self)">
       <goal name="insert&#39;vc.111.0.5.0.0.0" expl="true case" proved="true">
       <proof prover="2"><result status="valid" time="27.78"/></proof>
       </goal>
       <goal name="insert&#39;vc.111.0.5.0.0.1" expl="false case" proved="true">
       <proof prover="2"><result status="valid" time="48.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="array size" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.95"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="130"/></proof>
  <proof prover="5"><result status="valid" time="0.26" steps="74864"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="160"/></proof>
  <proof prover="5"><result status="valid" time="0.29" steps="76830"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.94" steps="12605"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.89"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="7097"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="172"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="current := handle.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.27" steps="6461"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.20" steps="315"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="319"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="323"/></proof>
  <proof prover="5"><result status="valid" time="0.31" steps="75359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.24.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.24.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.24.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.24.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
       <goal name="combineAux&#39;vc.24.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.37" steps="4494"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.38" steps="1652"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.80" steps="8027"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.79" steps="8027"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.24.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.80" steps="8027"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.24.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="1342"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="1238"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="1754"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1738"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.24.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="6.32" steps="18362"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.25.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.25.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="4443"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.25.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.25.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="39.72" steps="4136926"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.25.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1422"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="loop invariant init" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.26.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.26.0.0" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Requires">
     <goal name="combineAux&#39;vc.26.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="455"/></proof>
     <proof prover="5"><result status="valid" time="0.55" steps="106955"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.26.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.27" steps="1528"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.2" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.3" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.26.0.4" expl="VC for combineAux" proved="true">
    <proof prover="2"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="207"/></proof>
  <proof prover="5"><result status="valid" time="0.36" steps="89344"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="5738"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="2.54"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.24" steps="277"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="tmp := current.prev" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="306"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="2747"/></proof>
  <proof prover="5"><result status="valid" time="4.92" steps="632711"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.38" steps="36644"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.41.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.80" steps="2495"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="308"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.25" steps="308"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.92" steps="2493"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.41.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.41.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="5.05" steps="17421"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.41.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.82" steps="6536"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="4.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.06" steps="8121"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="69.70" steps="25822"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.47.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.92" steps="3934"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.47.0.0" expl="wr {self}`rep`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.96" steps="3934"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="552"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="556"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.50.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.50.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.50.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.50.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s2 s2.heap.rep[p] (Cons Node (Nil : list reftype)))">
       <goal name="combineAux&#39;vc.50.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="1882"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.50.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.40" steps="5263"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.90" steps="3079"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="64.12" steps="61205"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.83" steps="11640"/></proof>
      <proof prover="2"><result status="valid" time="1.44"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.50.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.86" steps="11640"/></proof>
      <proof prover="2"><result status="valid" time="1.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.50.0.1" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="130980"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.72" steps="130080"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.3" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.77" steps="134115"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.4" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="0.76" steps="132038"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.50.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="90.41" steps="41864"/></proof>
    <transf name="assert" proved="true" arg1="(nodeP s2 s2.heap.rep[p])">
     <goal name="combineAux&#39;vc.50.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="1853"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.50.0.5.1" expl="VC for combineAux" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="43.00" steps="32532"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.51.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.51.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="4845"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.51.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.19" steps="330"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="25.63" steps="1903742"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="2042"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <transf name="rewrite" proved="true" arg1="repClosed_DEF">
   <goal name="combineAux&#39;vc.52.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.52.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="771"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="332"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.61" steps="14558"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1835"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="1835"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="1871"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.51" steps="12122"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="3.19" steps="9272"/></proof>
  <proof prover="5"><result status="valid" time="5.86" steps="602058"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="9.25" steps="21909"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="280"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="current := current.sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1413"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="type invariant" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.63.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.63.0.0" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.64" steps="2467"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.1" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="282"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.2" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="282"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.3" expl="type invariant" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.71" steps="2444"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.63.0.4" expl="type invariant" proved="true">
    <transf name="case" proved="true" arg1="(p = trees)">
     <goal name="combineAux&#39;vc.63.0.4.0" expl="true case (type invariant)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.58" steps="8450"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.63.0.4.1" expl="false case (type invariant)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.75" steps="6322"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="3.65"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="5.58" steps="7106"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.01" steps="3021"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.72.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.72.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.72.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.72.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 s1.heap.rep[p] (Cons Node Nil))">
       <goal name="combineAux&#39;vc.72.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.36" steps="1746"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.72.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="1.37" steps="5180"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.82" steps="3164"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.30" steps="11145"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.26" steps="11138"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.72.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="5.26" steps="11138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.72.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.61" steps="2595"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1726"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3297"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.82" steps="3595"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.72.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="85.11" steps="39228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.73.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.73.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.17" steps="4710"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.73.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.73.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.14" steps="303"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.73.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6"><result status="valid" time="13.40" steps="1090781"/></proof>
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.73.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.73.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.15" steps="8823"/></proof>
       <proof prover="4" timelimit="100"><result status="valid" time="0.67" steps="1508855"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.73.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1906"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="2.97"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="5.61" steps="13144"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.57" steps="8179"/></proof>
  <proof prover="5"><result status="valid" time="4.32" steps="493616"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="6.61" steps="14959"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.86.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.48" steps="2095"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="270"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="270"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.49" steps="2100"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.86.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.86.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.39" steps="5792"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.86.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="4739"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="3.48"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.88" steps="5441"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.67" steps="2180"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="497"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="501"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.97.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.97.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.97.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.97.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="15.72" steps="30064"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.67" steps="2468"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.60" steps="6365"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.60" steps="6364"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.97.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.57" steps="6364"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.97.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="2243"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="1540"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.68" steps="3103"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.62" steps="3128"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.97.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="16.44" steps="34574"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.98" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.98.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.98.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.80" steps="3561"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.98.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="LoopInvariant7">
     <goal name="combineAux&#39;vc.98.0.1.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="14.19" steps="29121"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.98.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1718"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.36" steps="4769"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.31" steps="4938"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="5223"/></proof>
  <proof prover="5"><result status="valid" time="2.95" steps="353017"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="341"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="342"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="844"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="852"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.113" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.44" steps="860"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.124.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="25.57" steps="45617"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.124.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="11.62" steps="26081"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.48" steps="4292"/></proof>
  <proof prover="2"><result status="valid" time="10.27"/></proof>
  <proof prover="5"><result status="valid" time="0.69" steps="111410"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.68"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="wr {trees}`slots" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.129.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.77" steps="6075"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="4.15" steps="5417"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
   <goal name="combineAux&#39;vc.135.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="combineAux&#39;vc.135.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.135.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="rewrite" proved="true" arg1="repClosed_DEF">
      <goal name="combineAux&#39;vc.135.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.135.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="59.27" steps="38944"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.89" steps="3614"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.10" steps="6006"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.11" steps="6006"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.135.0.0.0.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="3.11" steps="6006"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="3430"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.68" steps="2921"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.3" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.97" steps="3434"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.4" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="0.98" steps="3438"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.135.0.0.5" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="14.63" steps="1916175"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.136" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
   <goal name="combineAux&#39;vc.136.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="combineAux&#39;vc.136.0.0" expl="VC for combineAux" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="combineAux&#39;vc.136.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.54" steps="98004"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.136.0.0.1" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.136.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.23" steps="449"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.136.0.0.1.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.136.0.0.1.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="31.46" steps="27513"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.136.0.0.1.1.0.0" expl="VC for combineAux" proved="true">
        <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
         <goal name="combineAux&#39;vc.136.0.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="2.69" steps="5412"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.136.0.0.2" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.35" steps="96704"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="9.48" steps="17178"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="7.64" steps="19438"/></proof>
  <proof prover="5"><result status="valid" time="11.17" steps="1317042"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="22.22" steps="48097"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="851"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="859"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="867"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.159" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.163.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="24.20" steps="45624"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.163.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="11.79" steps="26088"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="10.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="wr {trees}`slots" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_slots_framed_by">
   <goal name="combineAux&#39;vc.168.0" expl="VC for combineAux" proved="true">
   <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="1.84" steps="6082"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="4.11" steps="5423"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="4.14" steps="5434"/></proof>
  <proof prover="2"><result status="valid" time="1.24"/></proof>
  <proof prover="5"><result status="valid" time="0.88" steps="162582"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.172.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.172.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.172.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.172.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures10">
       <goal name="combineAux&#39;vc.172.0.0.0.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="54.96" steps="38950"/></proof>
       <proof prover="6"><result status="valid" time="47.89" steps="3145139"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.56" steps="5577"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.95" steps="31521"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="33.01" steps="31514"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.172.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.82" steps="31514"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.172.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.43" steps="5158"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.79" steps="2943"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.36" steps="9047"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.83" steps="10619"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.172.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.172.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.92" steps="3625"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.172.0.5.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="combineAux&#39;vc.172.0.5.1.0" expl="VC for combineAux" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.24" steps="11566"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.173.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.173.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.40" steps="9312"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.173.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures11">
     <goal name="combineAux&#39;vc.173.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.173.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.25" steps="451"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.173.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.173.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="32.29" steps="27515"/></proof>
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.173.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="32.21" steps="27515"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.173.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="3174"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.174" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="10.72" steps="17184"/></proof>
  <proof prover="5"><result status="valid" time="10.32" steps="1114720"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="8.16" steps="19446"/></proof>
  <proof prover="5"><result status="valid" time="10.76" steps="1315202"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="25.69" steps="48089"/></proof>
  <proof prover="5"><result status="valid" time="9.55" steps="1193149"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.53" steps="489"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.52" steps="495"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.52"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.183" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="499"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="1223"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="1231"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.200.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="6.62" steps="7097"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.57" steps="569"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.59" steps="569"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="7.88" steps="7097"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.200.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.200.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="51.31" steps="7467584"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.200.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0"><result status="valid" time="27.21" steps="31355"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="23.10"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.86"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.205.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="4.08" steps="10773"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="12.06" steps="8887"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="2.28"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="2.32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.209.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.209.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.209.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.209.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.209.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.83" steps="4951"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.209.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.39" steps="17765"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="2.98" steps="288324"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.84"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.83"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.209.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="2"><result status="valid" time="1.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.209.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.61" steps="7363"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.68" steps="4172"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="6.76" steps="18399"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.01" steps="10778"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.209.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.209.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.78" steps="5178"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.209.0.5.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="3.06" steps="326777"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.210.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.210.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="11.09" steps="16728"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.210.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.210.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.210.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.48" steps="596"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.210.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.210.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.210.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="5" timelimit="30" memlimit="12000"><result status="valid" time="1.04" steps="159926"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.210.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.70" steps="4444"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="612"/></proof>
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  <proof prover="5"><result status="valid" time="0.23" steps="65026"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="38.08" steps="59480"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="24.30" steps="2704998"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="91.29" steps="100473"/></proof>
  <proof prover="6"><result status="valid" time="23.03" steps="2521182"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.54" steps="489"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="1205"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.221.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.34" steps="12018"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="wr {}`slots" proved="true">
  <proof prover="2"><result status="valid" time="30.09"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.226.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.226.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.02" steps="6089"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.23" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="0.22" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="338"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="20" memlimit="12000"><result status="valid" time="0.26" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="404"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="403"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.248.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.248.0.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.248.0.0.0" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="397"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="978"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="986"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.254" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.255" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.256" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.257" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.258" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.259" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.260" expl=" index is in bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.261" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.262" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.263" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.264" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.264.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="36.20" steps="52260"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.264.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="18.63" steps="34839"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.265" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="12.27"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.266" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.267" expl="locals type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.268" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.269" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.269.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.56" steps="6964"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.270" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="25" memlimit="12000"><result status="valid" time="6.02" steps="6926"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.271" expl="wr {self}`rep`child" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.272" expl="wr {self}`rep`prev" proved="true">
  <proof prover="2"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.273" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.273.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.273.0.0" expl="VC for combineAux" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="combineAux&#39;vc.273.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.273.0.0.0.0" expl="VC for combineAux" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="combineAux&#39;vc.273.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.22" steps="4115"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.273.0.0.0.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="5.80" steps="11897"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="1.92" steps="213957"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="52.42" steps="34873"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.3" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="52.43" steps="34902"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.273.0.0.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="51.70" steps="34902"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.273.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.83" steps="5651"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="3307"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.88" steps="8948"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.73" steps="8310"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.273.0.5" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.273.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.22" steps="3880"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.273.0.5.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="2.00" steps="233335"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.274" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.274.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.274.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="5.27" steps="10990"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.274.0.1" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures12">
     <goal name="combineAux&#39;vc.274.0.1.0" expl="VC for combineAux" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
      <goal name="combineAux&#39;vc.274.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.31" steps="507"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.274.0.1.0.1" expl="VC for combineAux" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="combineAux&#39;vc.274.0.1.0.1.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.274.0.1.0.1.0.0" expl="VC for combineAux" proved="true">
        <proof prover="5" timelimit="30" memlimit="12000"><result status="valid" time="0.82" steps="135822"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.274.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.22" steps="3564"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.275" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.276" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="24.23" steps="38256"/></proof>
  <proof prover="5"><result status="valid" time="13.58" steps="1360429"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.277" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="15.47" steps="30268"/></proof>
  <proof prover="5"><result status="valid" time="13.15" steps="1550895"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.278" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="12.60" steps="1485372"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.279" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="403"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.280" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="857"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.281" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="406"/></proof>
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.282" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="408"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  <proof prover="5"><result status="valid" time="0.39" steps="86799"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.283" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="886"/></proof>
  <proof prover="2"><result status="valid" time="31.68"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="407"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  <proof prover="5"><result status="valid" time="0.18" steps="61331"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.285" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="11.77" steps="23232"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.286" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="4.69" steps="9001"/></proof>
  <proof prover="2"><result status="valid" time="13.40"/></proof>
  <proof prover="5"><result status="valid" time="0.97" steps="150249"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.287" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63663"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.288" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63667"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.289" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="411"/></proof>
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  <proof prover="5"><result status="valid" time="0.21" steps="63671"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.290" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.290.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.290.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.290.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.290.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.32" steps="413"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.290.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="3307"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.291" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="413"/></proof>
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="61235"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.292" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="413"/></proof>
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  <proof prover="5"><result status="valid" time="0.17" steps="61239"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.293" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="418"/></proof>
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  <proof prover="5"><result status="valid" time="0.43" steps="94702"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="81"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="47"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="49"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="51"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="55"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="55"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="140"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
  <goal name="combine&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="84"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="127"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="96"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="145"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="451"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="896"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="5054"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="196"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="168"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="198"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="202"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="206"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="210"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="214"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1318"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="222"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="226"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="3148"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="242"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="246"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="2.01" steps="186432"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="344"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="145"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="143"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="150"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.41.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.41.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.94" steps="2436"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.41.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.41.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="140"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.41.0.1.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.41.0.1.1.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.37" steps="6103"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.41.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1004"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.42.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.42.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.42.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.42.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.42.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.20" steps="972"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.42.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0"><result status="valid" time="0.99" steps="2742"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="0.68" steps="1545"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.48" steps="3796"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.51" steps="3796"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.42.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0"><result status="valid" time="2.58" steps="3796"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="2954"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.45" steps="4037"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="3744"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="3773"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.42.0.5" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.42.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.11" steps="943"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.42.0.5.1" expl="VC for deleteMin" proved="true">
     <proof prover="0"><result status="valid" time="15.53" steps="15545"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="161"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="795"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.57" steps="2429"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="119"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="321"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="153"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="395"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="872"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1552"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.55" steps="11951"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="159"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="155"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="1025"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.98" steps="5499"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.00" steps="3110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="321"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="325"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.23" steps="3144"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.22" steps="3152"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.78" steps="8897"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.25" steps="3168"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="345"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="349"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.91" steps="8949"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.15" steps="3201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="361"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="365"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.77.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.98" steps="10201"/></proof>
   <proof prover="4"><result status="valid" time="0.17" steps="513773"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="deleteMin&#39;vc.77.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.51" steps="10201"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="2.52" steps="317555"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="506"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="194"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="192"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="199"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.82.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.82.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.42" steps="6703"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.82.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.82.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="185"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.82.0.1.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.82.0.1.1.0" expl="VC for deleteMin" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="deleteMin&#39;vc.82.0.1.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="35.34" steps="15718"/></proof>
       <proof prover="4"><result status="valid" time="0.67" steps="1356706"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.82.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1812"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.83.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.83.0.0" expl="VC for deleteMin" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="deleteMin&#39;vc.83.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.83.0.0.0.0" expl="VC for deleteMin" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn s1 rep1 (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.83.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="2062"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.83.0.0.0.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.54" steps="7260"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.59" steps="3521"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.2" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="39.38" steps="26675"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.3" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.63" steps="26675"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.83.0.0.0.4" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="39.61" steps="26675"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.88" steps="4036"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.01" steps="8817"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.3" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.91" steps="11624"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.92" steps="11944"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.83.0.5" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.83.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.33" steps="2047"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.83.0.5.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.83.0.5.1.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.11" steps="8005"/></proof>
      <transf name="introduce_premises" proved="true" >
       <goal name="deleteMin&#39;vc.83.0.5.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="6"><result status="valid" time="1.52" steps="206962"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.05" steps="159373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="509"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.06" steps="159389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="117"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := self.head" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.09" steps="175373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="72"/></proof>
  <proof prover="6"><result status="valid" time="0.16" steps="57617"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="tmp := handle.sibling" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="177287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="75"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="pos := handle.prev" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="178890"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="105"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="tmp := handle.prev" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="287682"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="5933"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="121"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="pos := tmp.child" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="1.62" steps="2835056"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="123"/></proof>
  <proof prover="6"><result status="valid" time="0.24" steps="55026"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="212"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="280"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.18.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.27" steps="1181"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="157"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.85" steps="4299"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1179"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="157"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.32" steps="11992"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="229"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.18.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="30.14" steps="26169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1043"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="163"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="184"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="318"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="383"/></proof>
  <proof prover="6"><result status="valid" time="0.23" steps="67808"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="196"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.46" steps="30062"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1649"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="202"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="202"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="203"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="439"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.41.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.41.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.25" steps="4377"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.41.0.1.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.28" steps="68863"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.41.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="9.75" steps="729526"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.41.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="1264"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.42.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.42.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.42.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="20.82" steps="1992899"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2659"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1201"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="3192"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="3224"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.42.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.42.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="1195"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.42.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.42.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.42.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.95" steps="220612"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.42.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.23" steps="1250"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="274"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="620"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="1321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="2038"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="20.26" steps="46106"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="280"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="273"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="441"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.51.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0"><result status="valid" time="1.89" steps="3429"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="449"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.56.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.56.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="4" timelimit="120"><result status="valid" time="0.30" steps="857462"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="10.29" steps="21786"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.58.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.58.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.51" steps="37104"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.59.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="1984"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="481"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="489"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.63.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.63.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.71" steps="5136"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="308"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.65.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.65.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="105412"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.65.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.14" steps="296"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.65.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="15.20" steps="1001592"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.65.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="1.03" steps="147869"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.66.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.66.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.66.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="17.48" steps="898165"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="3919"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="5133"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.02" steps="5135"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.06" steps="5198"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.66.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.66.0.5.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="1.04" steps="143604"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.66.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="1.59" steps="178036"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="pos := handle.sibling" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="186371"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.79" steps="6048"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="159"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="169502"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="289"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="15.93" steps="38434"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1107"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="198031"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.28" steps="2127"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="188"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55857"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="pos := self.head" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="210024"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="assertion" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="251104"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="399"/></proof>
  <proof prover="6"><result status="valid" time="0.24" steps="68436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="186130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="23.81" steps="49670"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1910"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="224062"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="186410"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.04" steps="1476"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.07" steps="218284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="680"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.16" steps="186726"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.04" steps="1496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.07" steps="177975"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="227959"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.96.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.96.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="4931"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.96.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="10.69" steps="1149979"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.96.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1307"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.97.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.97.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.97.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.97.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="5"><result status="valid" time="17.45" steps="2191992"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.97.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.89" steps="3574"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.97.0.0.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.96" steps="267940"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.97.0.0.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.95" steps="269922"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.97.0.0.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="2.53" steps="211659"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.64" steps="117234"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.97" steps="138191"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.67" steps="119752"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.63" steps="117487"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.97.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.97.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.23" steps="1238"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.97.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.97.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.97.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <transf name="unfold" proved="true" arg1="nodeP" arg2="in" arg3="h">
        <goal name="decreaseKey&#39;vc.97.0.5.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="n">
         <goal name="decreaseKey&#39;vc.97.0.5.1.0.0.0.0" expl="VC for decreaseKey" proved="true">
         <proof prover="0"><result status="valid" time="1.60" steps="4387"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.97.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.23" steps="1279"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.10" steps="196872"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="634"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="2135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2105"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="51.67" steps="81501"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="245740"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="452"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.77" steps="4394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="464"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="468"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="472"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.97" steps="4428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="38.59" steps="36609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.113.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.113.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.54" steps="6267"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.114.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.114.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.38" steps="5792"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="500"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.118.0" expl="VC for decreaseKey" proved="true">
   <proof prover="6"><result status="valid" time="1.14" steps="141287"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="312"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.120.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.120.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="2.18" steps="7751"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.120.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="300"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.120.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="16.78" steps="1076996"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.120.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="1956"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.121.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.121.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.121.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="16.81" steps="936635"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.91" steps="4542"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="5855"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.16" steps="5842"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="5907"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.121.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.121.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.42" steps="1842"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.121.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.121.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.121.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.42" steps="1916"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.121.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.42" steps="1917"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="141"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55138"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="233"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="904"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="297"/></proof>
  <proof prover="6"><result status="valid" time="0.26" steps="66873"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="152"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.93" steps="13473"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="1057"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="1323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="794"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="160"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="352"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.140.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.140.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.44" steps="82278"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.140.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.06" steps="160"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.140.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="6.01" steps="516025"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.140.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.60" steps="103874"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.141.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.141.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.141.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="7.84" steps="667491"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.56" steps="99579"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.62" steps="103835"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.55" steps="101264"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.55" steps="99547"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.141.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.141.0.5.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.53" steps="100778"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.141.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.141.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.141.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.36" steps="195638"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.141.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.17" steps="993"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="230"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="531"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1024"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1729"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.55" steps="29852"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="236"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="postcondition" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.03" steps="547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="380"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.150.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0"><result status="valid" time="1.28" steps="2726"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="388"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="396"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="2759"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="3.38" steps="9876"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="19.32" steps="10027"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="8.80" steps="10041"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="420"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="424"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.162.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="9.03" steps="10927"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.164.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.164.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.65" steps="96589"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.164.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="254"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.164.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="9.51" steps="666215"/></proof>
     </goal>
    </transf>
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures21">
     <goal name="decreaseKey&#39;vc.164.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="97.67" steps="6876238"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.164.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.84" steps="129225"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.165.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.165.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.165.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="14.22" steps="807783"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.75" steps="123938"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.69" steps="3756"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="2.10" steps="210416"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="5.32" steps="556840"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.70" steps="4164"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.165.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="2"><result status="valid" time="19.90"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="75"/></proof>
  <proof prover="6"><result status="valid" time="0.17" steps="54467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1574"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="91"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="920"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="93"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="7609"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="1018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="132"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="153"/></proof>
  <proof prover="6"><result status="valid" time="0.15" steps="55460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="271"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1312"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="336"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.04" steps="23641"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1262"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1573"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1093"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.198.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.198.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="4217"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.198.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="5.60" steps="489507"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.198.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2"><result status="valid" time="0.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.199.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.199.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.199.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="9.67" steps="709436"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="2552"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1141"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="3075"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="3098"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.199.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.199.0.5.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.52" steps="108653"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.199.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.199.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.199.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.94" steps="239786"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.199.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.21" steps="1189"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="583"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="1963"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="27.90" steps="67955"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3314"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="417"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="72.44" steps="21466"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="11.19" steps="23353"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.216.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.216.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.60" steps="1915"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="445"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="449"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.220.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="71.84" steps="31938"/></proof>
   <proof prover="6" timelimit="80"><result status="valid" time="1.56" steps="146661"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="277"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.222.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.222.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="2.03" steps="6779"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.222.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="265"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.222.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="12.07" steps="841502"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.222.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="1842"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.223.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.223.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.223.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="15.87" steps="877942"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="3800"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="4992"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="4997"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.88" steps="5049"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.223.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.223.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.26" steps="1728"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.223.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.223.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.223.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="5"><result status="valid" time="0.91" steps="142668"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.223.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="5"><result status="valid" time="0.78" steps="142689"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="93"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="170"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="1039"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.08" steps="11386"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="1393"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1030"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="1711"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="282"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="347"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="393"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.09" steps="25401"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1604"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1118"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="174"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="176"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="176"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="403"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.253.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.253.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="4279"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.253.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="7.51" steps="632263"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.253.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.13" steps="1206"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.254.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.254.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.254.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="10.09" steps="797447"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="2565"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="1151"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="3088"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="3108"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.254.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.254.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.12" steps="1145"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.254.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.254.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.254.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.08" steps="254627"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.254.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0"><result status="valid" time="0.21" steps="1177"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="247"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="591"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.55" steps="1995"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="31.00" steps="95267"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="253"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="3376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="433"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="3414"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="9.17" steps="19587"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.47" steps="3432"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.271.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="4593"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.275.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="20.90" steps="27148"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="281"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.277.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.277.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.81" steps="6856"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.277.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="0.25" steps="61082"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.277.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="14.13" steps="879225"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.277.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1842"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.278.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.278.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.278.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6"><result status="valid" time="16.36" steps="920059"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.74" steps="3821"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.92" steps="4659"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="5020"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.93" steps="5077"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.278.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.278.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.37" steps="1732"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.278.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.278.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.278.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="5"><result status="valid" time="0.84" steps="145841"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.278.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="5"><result status="valid" time="1.02" steps="145841"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="111"/></proof>
  <proof prover="6"><result status="valid" time="0.16" steps="54834"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="191"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="844"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="122"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.77" steps="7914"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="996"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1258"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="742"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="128"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.297.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.297.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="3379"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.297.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.05" steps="130"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.297.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="4.62" steps="436914"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.297.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5"><result status="valid" time="0.51" steps="98994"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.298.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.298.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.298.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="8.96" steps="513591"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.26" steps="1683"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="901"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2142"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2140"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.298.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.298.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.08" steps="898"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.298.0.5.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.298.0.5.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.298.0.5.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.35" steps="206189"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.298.0.5.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="5"><result status="valid" time="0.57" steps="103101"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="972"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1663"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="10.39" steps="32251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="206"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="200"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.12" steps="217811"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="2389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="218625"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="362"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="219817"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="441828"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.90" steps="8581"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="2436"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="8.97" steps="8748"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="386"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="222336"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="222754"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.319.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.319.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.319.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.319.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="0.10" steps="228"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.319.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0"><result status="valid" time="1.33" steps="3123"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="234"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.321.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.321.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="1.64" steps="5551"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.321.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="224"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.321.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="8.99" steps="612311"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.321.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="1569"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.322.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.322.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.322.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="29.44" steps="2093825"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.56" steps="2960"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.72" steps="3647"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.57" steps="4016"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.65" steps="4056"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.322.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.322.0.5.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.71" steps="119405"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.322.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="1.04" steps="137506"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="70"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="3103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="765"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="764"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="76"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="73"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="123"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="740"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="147"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="151"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="159"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="163"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.343.0" expl="VC for decreaseKey" proved="true">
   <proof prover="0"><result status="valid" time="0.64" steps="2574"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="104"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="36.96" steps="89550"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.346.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.346.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="rewrite" proved="true" arg1="repClosed_DEF">
     <goal name="decreaseKey&#39;vc.346.0.0.0" expl="VC for decreaseKey" proved="true">
     <proof prover="5"><result status="valid" time="7.40" steps="749861"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.10" steps="770"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="677"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.11" steps="1073"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0"><result status="valid" time="0.12" steps="1073"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.346.0.5" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.346.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.14" steps="670"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.346.0.5.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0"><result status="valid" time="1.57" steps="7292"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueL" proved="true">
 <transf name="unfold" proved="true" arg1="pqueueI">
  <goal name="boundary_frames_invariant_PqueueL.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueL.0.0" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="boundary_frames_invariant_PqueueL.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="repClosed_DEF">
      <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="21.26" steps="32603"/></proof>
       <proof prover="5"><result status="valid" time="14.80" steps="1328413"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.85" steps="3936"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="38.43" steps="141966"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="43.76" steps="141862"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="43.66" steps="155668"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.1" proved="true">
     <proof prover="5"><result status="valid" time="1.45" steps="192896"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.2" proved="true">
     <proof prover="5"><result status="valid" time="1.73" steps="195371"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.3" proved="true">
     <proof prover="5"><result status="valid" time="1.56" steps="196795"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.4" proved="true">
     <proof prover="5"><result status="valid" time="1.55" steps="194950"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueL.0.0.0.5" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0.0" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.20" steps="39528"/></proof>
       </goal>
       <goal name="boundary_frames_invariant_PqueueL.0.0.0.5.0.1" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.63" steps="38312"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PqueueR" proved="true">
 <goal name="repOk_EMPTY" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="409"/></proof>
 </goal>
 <goal name="disjointNotIn" proved="true">
 <transf name="unfold" proved="true" arg1="pqueuePub">
  <goal name="disjointNotIn.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="disjointNotIn.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="H4" arg2="p,q">
    <goal name="disjointNotIn.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="1.15" steps="4721"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="init_Node&#39;vc" expl="VC for init_Node" proved="true">
 <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.62" steps="25008"/></proof>
 </goal>
 <goal name="getTag&#39;vc" expl="VC for getTag" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="259"/></proof>
 </goal>
 <goal name="getKey&#39;vc" expl="VC for getKey" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="259"/></proof>
 </goal>
 <goal name="init_Pqueue&#39;vc" expl="VC for init_Pqueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init_Pqueue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.2" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.3" expl="Node(sntl,sntlVal,sntlVal)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="70"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="249"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="274"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="696"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.80" steps="40248"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="2840"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.28" steps="35391"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="2542"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="278"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="984"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.13" expl="wr ({self}`rep union {self})`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="454"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.14" expl="wr ({self}`rep union {self})`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="458"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.15" expl="wr ({self}`rep union {self})`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="2079"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.16" expl="wr ({} union {self}`rep union {self})`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2438"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.17" expl="wr ({} union {self}`rep union {self})`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="2276"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.18" expl="wr ({self}`rep union {self})`head" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="2314"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.19" expl="wr ({} union {self}`rep union {self})`child" proved="true">
  <proof prover="0"><result status="valid" time="0.83" steps="2290"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.20" expl="wr ({self}`rep union {self})`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="2293"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.21" expl="wr ({} union {self}`rep union {self})`tag" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="4755"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.22" expl="wr ({self}`rep union {self})`size" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="502"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.23" expl="wr ({self}`rep union {self})`length" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="506"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.24" expl="wr ({} union {self}`rep union {self})`key" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="4603"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.25" expl="wr ({self}`rep union {self})`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="514"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.26" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="init_Pqueue&#39;vc.26.0" expl="VC for init_Pqueue" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="init_Pqueue&#39;vc.26.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="init_Pqueue&#39;vc.26.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="init_Pqueue&#39;vc.26.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="0.38" steps="620"/></proof>
      </goal>
      <goal name="init_Pqueue&#39;vc.26.0.0.0.1" expl="VC for init_Pqueue" proved="true">
      <proof prover="0"><result status="valid" time="3.45" steps="9378"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="2466"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="637"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0" memlimit="16000"><result status="valid" time="1.27" steps="2998"/></proof>
  </goal>
  <goal name="init_Pqueue&#39;vc.30" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="init_Pqueue&#39;vc.30.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.30.0.0" expl="VC for init_Pqueue" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="init_Pqueue&#39;vc.30.0.0.0" expl="VC for init_Pqueue" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="init_Pqueue&#39;vc.30.0.0.0.0" expl="VC for init_Pqueue" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.70" steps="9880"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.1" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="init_Pqueue&#39;vc.30.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="302"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.30.0.1.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="53.16" steps="6460049"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.30.0.2" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="15.56" steps="27702"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="init_Pqueue&#39;vc.31" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="init_Pqueue&#39;vc.31.0" expl="VC for init_Pqueue" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="init_Pqueue&#39;vc.31.0.0" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="13.86" steps="24346"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.1" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="14.48" steps="25958"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.2" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="init_Pqueue&#39;vc.31.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="12.58" steps="21468"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.2.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="0"><result status="valid" time="13.81" steps="38633"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.3" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="init_Pqueue&#39;vc.31.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.96" steps="6048"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.3.1" expl="VC for init_Pqueue" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="init_Pqueue&#39;vc.31.0.3.1.0" expl="VC for init_Pqueue" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.0" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="4.44" steps="9596"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.1" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="2.19" steps="6688"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.2" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="2.13" steps="6769"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3" expl="VC for init_Pqueue" proved="true">
       <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0" expl="VC for init_Pqueue" proved="true">
        <transf name="assert" proved="true" arg1="(mem1 s3.heap.child[n] s3.heap.rep[pq] \/ s3.heap.child[n] = s3.heap.sntl[pq])">
         <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="7.81" steps="27731"/></proof>
         </goal>
         <goal name="init_Pqueue&#39;vc.31.0.3.1.0.3.0.1" expl="VC for init_Pqueue" proved="true">
         <proof prover="0"><result status="valid" time="8.11" steps="23156"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.4" expl="VC for init_Pqueue" proved="true">
       <proof prover="0"><result status="valid" time="15.84" steps="30384"/></proof>
       </goal>
       <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5" expl="VC for init_Pqueue" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="117.35" steps="81570"/></proof>
       <transf name="case" proved="true" arg1="(pq = self)">
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5.0" expl="true case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.23" steps="2351"/></proof>
        </goal>
        <goal name="init_Pqueue&#39;vc.31.0.3.1.0.5.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="68.10" steps="51346"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.4" expl="VC for init_Pqueue" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="105.27" steps="65372"/></proof>
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="init_Pqueue&#39;vc.31.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="312"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.4.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="49.78" steps="55891"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.5" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="13.70" steps="25856"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.6" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.33" steps="13613"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.7" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.44" steps="14047"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.8" expl="VC for init_Pqueue" proved="true">
    <proof prover="0"><result status="valid" time="5.74" steps="14485"/></proof>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.9" expl="VC for init_Pqueue" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="init_Pqueue&#39;vc.31.0.9.0" expl="asserted formula" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="28.99" steps="3839921"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.9.1" expl="VC for init_Pqueue" proved="true">
     <proof prover="5"><result status="valid" time="16.76" steps="1558863"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="init_Pqueue&#39;vc.31.0.10" expl="VC for init_Pqueue" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="init_Pqueue&#39;vc.31.0.10.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="6.03" steps="14240"/></proof>
     </goal>
     <goal name="init_Pqueue&#39;vc.31.0.10.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="80.59" steps="58355"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="366"/></proof>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="537"/></proof>
 </goal>
 <goal name="link&#39;vc" expl="VC for link" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="link&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="link&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="275"/></proof>
  </goal>
  <goal name="link&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="link&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="97"/></proof>
  </goal>
  <goal name="link&#39;vc.4" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="102"/></proof>
  </goal>
  <goal name="link&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="346"/></proof>
  </goal>
  <goal name="link&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="link&#39;vc.7" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="111"/></proof>
  </goal>
  <goal name="link&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="51"/></proof>
  </goal>
  <goal name="link&#39;vc.9" expl="fkey := first.key" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="121"/></proof>
  </goal>
  <goal name="link&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="link&#39;vc.11" expl="skey := second.key" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="131"/></proof>
  </goal>
  <goal name="link&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="160"/></proof>
  </goal>
  <goal name="link&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="link&#39;vc.14" expl="tmp := first.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="138"/></proof>
  </goal>
  <goal name="link&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="1205"/></proof>
  </goal>
  <goal name="link&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="118"/></proof>
  </goal>
  <goal name="link&#39;vc.17" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="114"/></proof>
  </goal>
  <goal name="link&#39;vc.18" expl="tmp := second.child" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="227"/></proof>
  </goal>
  <goal name="link&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="148"/></proof>
  </goal>
  <goal name="link&#39;vc.20" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="276"/></proof>
  </goal>
  <goal name="link&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.61" steps="10287"/></proof>
  </goal>
  <goal name="link&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="160"/></proof>
  </goal>
  <goal name="link&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="307"/></proof>
  </goal>
  <goal name="link&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.11" steps="31507"/></proof>
  </goal>
  <goal name="link&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1010"/></proof>
  </goal>
  <goal name="link&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1292"/></proof>
  </goal>
  <goal name="link&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="166"/></proof>
  </goal>
  <goal name="link&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="3927"/></proof>
  </goal>
  <goal name="link&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="88.76" steps="357172"/></proof>
  </goal>
  <goal name="link&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="188"/></proof>
  </goal>
  <goal name="link&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="196"/></proof>
  </goal>
  <goal name="link&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="198"/></proof>
  </goal>
  <goal name="link&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="384"/></proof>
  </goal>
  <goal name="link&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.26" steps="12094"/></proof>
  </goal>
  <goal name="link&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1285"/></proof>
  </goal>
  <goal name="link&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1612"/></proof>
  </goal>
  <goal name="link&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="204"/></proof>
  </goal>
  <goal name="link&#39;vc.38" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(repOk s2 self)">
   <goal name="link&#39;vc.38.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="374"/></proof>
   </goal>
   <goal name="link&#39;vc.38.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="repOk">
    <goal name="link&#39;vc.38.1.0" expl="VC for link" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="link&#39;vc.38.1.0.0" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.47" steps="2697"/></proof>
     </goal>
     <goal name="link&#39;vc.38.1.0.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="208"/></proof>
     </goal>
     <goal name="link&#39;vc.38.1.0.2" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="208"/></proof>
     </goal>
     <goal name="link&#39;vc.38.1.0.3" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="6.01" steps="20933"/></proof>
     <proof prover="7" timelimit="60"><result status="valid" time="0.15" steps="294734"/></proof>
     </goal>
     <goal name="link&#39;vc.38.1.0.4" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="1.98" steps="8729"/></proof>
     </goal>
     <goal name="link&#39;vc.38.1.0.5" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="20.51" steps="90933"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="234"/></proof>
  </goal>
  <goal name="link&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="452"/></proof>
  </goal>
  <goal name="link&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="16.47" steps="67600"/></proof>
  </goal>
  <goal name="link&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1528"/></proof>
  </goal>
  <goal name="link&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="1904"/></proof>
  </goal>
  <goal name="link&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="240"/></proof>
  </goal>
  <goal name="link&#39;vc.45" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="44.87" steps="154971"/></proof>
  </goal>
  <goal name="link&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="430"/></proof>
  </goal>
  <goal name="link&#39;vc.48" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="1.31" steps="5979"/></proof>
  </goal>
  <goal name="link&#39;vc.49" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.49.0" expl="wr {self}`rep`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="link&#39;vc.49.0.0" expl="wr {self}`rep`prev" proved="true">
    <transf name="assert" proved="true" arg1="(p &lt;&gt; tmp)">
     <goal name="link&#39;vc.49.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="246"/></proof>
     </goal>
     <goal name="link&#39;vc.49.0.0.1" expl="wr {self}`rep`prev" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="72.39" steps="229637"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.50" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.82" steps="7769"/></proof>
  </goal>
  <goal name="link&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="513520"/></proof>
  </goal>
  <goal name="link&#39;vc.52" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.52.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.52.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.77" steps="3706"/></proof>
    </goal>
    <goal name="link&#39;vc.52.0.1" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="link&#39;vc.52.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.18" steps="241"/></proof>
     </goal>
     <goal name="link&#39;vc.52.0.1.1" expl="VC for link" proved="true">
     <proof prover="0"><result status="valid" time="18.88" steps="55448"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.52.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1532"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.53" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.53.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.53.0.0" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.14" steps="227419"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.1" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.16" steps="234707"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.2" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 s3.heap.sntl[pq])">
     <goal name="link&#39;vc.53.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.47" steps="2523"/></proof>
     </goal>
     <goal name="link&#39;vc.53.0.2.1" expl="VC for link" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.99" steps="22947"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.53.0.3" expl="VC for link" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="link&#39;vc.53.0.3.0" expl="VC for link" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="link&#39;vc.53.0.3.0.0" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="5.76" steps="16844"/></proof>
      </goal>
      <goal name="link&#39;vc.53.0.3.0.1" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.46" steps="1801"/></proof>
      </goal>
      <goal name="link&#39;vc.53.0.3.0.2" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="0.45" steps="2624"/></proof>
      </goal>
      <goal name="link&#39;vc.53.0.3.0.3" expl="VC for link" proved="true">
      <proof prover="5"><result status="valid" time="2.73" steps="224728"/></proof>
      </goal>
      <goal name="link&#39;vc.53.0.3.0.4" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="3.09" steps="12698"/></proof>
      </goal>
      <goal name="link&#39;vc.53.0.3.0.5" expl="VC for link" proved="true">
      <proof prover="0"><result status="valid" time="3.08" steps="11946"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.53.0.4" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="227417"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.5" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="235631"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.6" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.18" steps="227442"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.7" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.08" steps="227470"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.8" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.19" steps="227470"/></proof>
    </goal>
    <goal name="link&#39;vc.53.0.9" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="link&#39;vc.53.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.78" steps="2991"/></proof>
     </goal>
     <goal name="link&#39;vc.53.0.9.1" expl="VC for link" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="77.67" steps="247234"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="link&#39;vc.53.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.85" steps="4396"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="258"/></proof>
  </goal>
  <goal name="link&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="250"/></proof>
  </goal>
  <goal name="link&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="250"/></proof>
  </goal>
  <goal name="link&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="182"/></proof>
  </goal>
  <goal name="link&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="348"/></proof>
  </goal>
  <goal name="link&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.90" steps="34942"/></proof>
  </goal>
  <goal name="link&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1816"/></proof>
  </goal>
  <goal name="link&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1300"/></proof>
  </goal>
  <goal name="link&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="188"/></proof>
  </goal>
  <goal name="link&#39;vc.63" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="19.38" steps="71122"/></proof>
  </goal>
  <goal name="link&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="184"/></proof>
  </goal>
  <goal name="link&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="334"/></proof>
  </goal>
  <goal name="link&#39;vc.66" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="3548"/></proof>
  </goal>
  <goal name="link&#39;vc.67" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="31.37" steps="113392"/></proof>
  </goal>
  <goal name="link&#39;vc.68" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="4250"/></proof>
  </goal>
  <goal name="link&#39;vc.69" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="link&#39;vc.69.0" expl="VC for link" proved="true">
   <proof prover="0"><result status="valid" time="1.20" steps="4980"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="42.00" steps="137862"/></proof>
  </goal>
  <goal name="link&#39;vc.71" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.71.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.71.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.37" steps="1781"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.41" steps="1835"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.89" steps="13111"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="11.35" steps="53576"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="2404"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="2000"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.26" steps="1604"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="2272"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.33" steps="2272"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.76" steps="14940"/></proof>
    </goal>
    <goal name="link&#39;vc.71.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.49" steps="3151"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="206"/></proof>
  </goal>
  <goal name="link&#39;vc.73" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
  <goal name="link&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="199"/></proof>
  </goal>
  <goal name="link&#39;vc.75" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="82"/></proof>
  </goal>
  <goal name="link&#39;vc.76" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="176"/></proof>
  </goal>
  <goal name="link&#39;vc.77" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1701"/></proof>
  </goal>
  <goal name="link&#39;vc.78" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="118"/></proof>
  </goal>
  <goal name="link&#39;vc.79" expl="tmp := first.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="223"/></proof>
  </goal>
  <goal name="link&#39;vc.80" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="148"/></proof>
  </goal>
  <goal name="link&#39;vc.81" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="275"/></proof>
  </goal>
  <goal name="link&#39;vc.82" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="5363"/></proof>
  </goal>
  <goal name="link&#39;vc.83" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="184"/></proof>
  </goal>
  <goal name="link&#39;vc.84" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="329"/></proof>
  </goal>
  <goal name="link&#39;vc.85" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="193"/></proof>
  </goal>
  <goal name="link&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="249"/></proof>
  </goal>
  <goal name="link&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="421"/></proof>
  </goal>
  <goal name="link&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="29.95" steps="119920"/></proof>
  </goal>
  <goal name="link&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1453"/></proof>
  </goal>
  <goal name="link&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1461"/></proof>
  </goal>
  <goal name="link&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="255"/></proof>
  </goal>
  <goal name="link&#39;vc.92" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.92.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.92.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.87" steps="3836"/></proof>
    <proof prover="6"><result status="valid" time="1.27" steps="118970"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="902"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="895"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.17" steps="21457"/></proof>
    <proof prover="6"><result status="valid" time="2.38" steps="198048"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.52" steps="36278"/></proof>
    </goal>
    <goal name="link&#39;vc.92.0.5" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(mem1 s1.heap.prev[n] s1.heap.rep[self] \/ s1.heap.prev[n] = s1.heap.sntl[self])">
     <goal name="link&#39;vc.92.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.54" steps="7507"/></proof>
     </goal>
     <goal name="link&#39;vc.92.0.5.1" expl="assertion" proved="true">
     <transf name="case" proved="true" arg1="(n = tmp)">
      <goal name="link&#39;vc.92.0.5.1.0" expl="true case (assertion)" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="260"/></proof>
      </goal>
      <goal name="link&#39;vc.92.0.5.1.1" expl="false case (assertion)" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="163.90" steps="604914"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="252"/></proof>
  </goal>
  <goal name="link&#39;vc.94" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="439"/></proof>
  </goal>
  <goal name="link&#39;vc.95" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="4480"/></proof>
  </goal>
  <goal name="link&#39;vc.96" expl="wr {self}`rep`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.96.0" expl="wr {self}`rep`prev" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.81" steps="18322"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.97" expl="wr {self}`rep`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.97.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.41" steps="6023"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="54.38" steps="181970"/></proof>
  </goal>
  <goal name="link&#39;vc.99" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.99.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.99.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3127"/></proof>
    </goal>
    <goal name="link&#39;vc.99.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.87" steps="19694"/></proof>
    </goal>
    <goal name="link&#39;vc.99.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.29" steps="1228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.100" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.100.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.100.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.31" steps="2145"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="2220"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="14.59" steps="61876"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="25.00" steps="108310"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="2826"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="2615"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="2144"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="2857"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="2857"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="10.77" steps="49267"/></proof>
    </goal>
    <goal name="link&#39;vc.100.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="3606"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.101" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="273"/></proof>
  </goal>
  <goal name="link&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="267"/></proof>
  </goal>
  <goal name="link&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="267"/></proof>
  </goal>
  <goal name="link&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="215"/></proof>
  </goal>
  <goal name="link&#39;vc.105" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="384"/></proof>
  </goal>
  <goal name="link&#39;vc.106" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.84" steps="48478"/></proof>
  </goal>
  <goal name="link&#39;vc.107" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1321"/></proof>
  </goal>
  <goal name="link&#39;vc.108" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1369"/></proof>
  </goal>
  <goal name="link&#39;vc.109" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="221"/></proof>
  </goal>
  <goal name="link&#39;vc.110" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="repOk">
   <goal name="link&#39;vc.110.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.110.0.0" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.32" steps="661014"/></proof>
    </goal>
    <goal name="link&#39;vc.110.0.1" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="208089"/></proof>
    </goal>
    <goal name="link&#39;vc.110.0.2" expl="VC for link" proved="true">
    <proof prover="7" timelimit="60"><result status="valid" time="0.13" steps="208051"/></proof>
    </goal>
    <goal name="link&#39;vc.110.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.88" steps="13877"/></proof>
    </goal>
    <goal name="link&#39;vc.110.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.56" steps="27663"/></proof>
    </goal>
    <goal name="link&#39;vc.110.0.5" expl="VC for link" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 self)">
     <goal name="link&#39;vc.110.0.5.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.17" steps="403"/></proof>
     </goal>
     <goal name="link&#39;vc.110.0.5.1" expl="VC for link" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.41" steps="47104"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="218"/></proof>
  </goal>
  <goal name="link&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="390"/></proof>
  </goal>
  <goal name="link&#39;vc.113" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="3213"/></proof>
  </goal>
  <goal name="link&#39;vc.114" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="16.52" steps="52122"/></proof>
  </goal>
  <goal name="link&#39;vc.115" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="8.63" steps="23589"/></proof>
  </goal>
  <goal name="link&#39;vc.116" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="15.38" steps="42399"/></proof>
  </goal>
  <goal name="link&#39;vc.117" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.117.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.117.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="2676"/></proof>
    </goal>
    <goal name="link&#39;vc.117.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.90" steps="11946"/></proof>
    </goal>
    <goal name="link&#39;vc.117.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="1141"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.118" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.118.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.118.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.36" steps="1836"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="1890"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="3.04" steps="16714"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="9.63" steps="41969"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.55" steps="2464"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.40" steps="2257"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="1835"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="2501"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.46" steps="2501"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.24" steps="16483"/></proof>
    </goal>
    <goal name="link&#39;vc.118.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="3210"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.119" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="239"/></proof>
  </goal>
  <goal name="link&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="233"/></proof>
  </goal>
  <goal name="link&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="233"/></proof>
  </goal>
  <goal name="link&#39;vc.122" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="116"/></proof>
  </goal>
  <goal name="link&#39;vc.123" expl="tmp := first.child" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="226"/></proof>
  </goal>
  <goal name="link&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="3764"/></proof>
  </goal>
  <goal name="link&#39;vc.125" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="152"/></proof>
  </goal>
  <goal name="link&#39;vc.126" expl="tmp := second.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="280"/></proof>
  </goal>
  <goal name="link&#39;vc.127" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="161"/></proof>
  </goal>
  <goal name="link&#39;vc.128" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="217"/></proof>
  </goal>
  <goal name="link&#39;vc.129" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="388"/></proof>
  </goal>
  <goal name="link&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="12.88" steps="58212"/></proof>
  </goal>
  <goal name="link&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1483"/></proof>
  </goal>
  <goal name="link&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1366"/></proof>
  </goal>
  <goal name="link&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="223"/></proof>
  </goal>
  <goal name="link&#39;vc.134" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.134.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.134.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.74" steps="3482"/></proof>
    </goal>
    <goal name="link&#39;vc.134.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="814"/></proof>
    </goal>
    <goal name="link&#39;vc.134.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.19" steps="807"/></proof>
    </goal>
    <goal name="link&#39;vc.134.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.91" steps="14529"/></proof>
    </goal>
    <goal name="link&#39;vc.134.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.36" steps="17190"/></proof>
    </goal>
    <goal name="link&#39;vc.134.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.81" steps="20650"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="220"/></proof>
  </goal>
  <goal name="link&#39;vc.136" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="389"/></proof>
  </goal>
  <goal name="link&#39;vc.137" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="3550"/></proof>
  </goal>
  <goal name="link&#39;vc.138" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="98.68" steps="362276"/></proof>
  </goal>
  <goal name="link&#39;vc.139" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="31.58" steps="120780"/></proof>
  </goal>
  <goal name="link&#39;vc.140" expl="postcondition" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="94.83" steps="308805"/></proof>
  </goal>
  <goal name="link&#39;vc.141" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.141.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.141.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="2910"/></proof>
    </goal>
    <goal name="link&#39;vc.141.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="4.27" steps="16415"/></proof>
    </goal>
    <goal name="link&#39;vc.141.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.18" steps="1139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.142" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.142.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.142.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2036"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2097"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="8.51" steps="41536"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="13.53" steps="61685"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.56" steps="2683"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.42" steps="2490"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2035"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.43" steps="2719"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="2719"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="6.41" steps="25455"/></proof>
    </goal>
    <goal name="link&#39;vc.142.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="3452"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="241"/></proof>
  </goal>
  <goal name="link&#39;vc.144" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.145" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="235"/></proof>
  </goal>
  <goal name="link&#39;vc.146" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="183"/></proof>
  </goal>
  <goal name="link&#39;vc.147" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="337"/></proof>
  </goal>
  <goal name="link&#39;vc.148" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="14.35" steps="61574"/></proof>
  </goal>
  <goal name="link&#39;vc.149" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1028"/></proof>
  </goal>
  <goal name="link&#39;vc.150" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1248"/></proof>
  </goal>
  <goal name="link&#39;vc.151" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="189"/></proof>
  </goal>
  <goal name="link&#39;vc.152" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="link&#39;vc.152.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.152.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.57" steps="2904"/></proof>
    </goal>
    <goal name="link&#39;vc.152.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="723"/></proof>
    </goal>
    <goal name="link&#39;vc.152.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="716"/></proof>
    </goal>
    <goal name="link&#39;vc.152.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.46" steps="12543"/></proof>
    <proof prover="6" timelimit="120"><result status="valid" time="1.44" steps="152665"/></proof>
    </goal>
    <goal name="link&#39;vc.152.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.51" steps="12322"/></proof>
    </goal>
    <goal name="link&#39;vc.152.0.5" expl="assertion" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.10" steps="10281"/></proof>
    <proof prover="6" timelimit="120"><result status="valid" time="1.46" steps="152701"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.153" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="186"/></proof>
  </goal>
  <goal name="link&#39;vc.154" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="333"/></proof>
  </goal>
  <goal name="link&#39;vc.155" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="3368"/></proof>
  </goal>
  <goal name="link&#39;vc.156" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="1549"/></proof>
  </goal>
  <goal name="link&#39;vc.157" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="10.44" steps="34862"/></proof>
  </goal>
  <goal name="link&#39;vc.158" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="19.04" steps="69573"/></proof>
  </goal>
  <goal name="link&#39;vc.159" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="link&#39;vc.159.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.159.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="2469"/></proof>
    </goal>
    <goal name="link&#39;vc.159.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.28" steps="9409"/></proof>
    </goal>
    <goal name="link&#39;vc.159.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.28" steps="1046"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.160" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="link&#39;vc.160.0" expl="VC for link" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="link&#39;vc.160.0.0" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1725"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.1" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.45" steps="1779"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.2" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.29" steps="13442"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.3" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="7.43" steps="34538"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.4" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="2319"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.5" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.34" steps="2132"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.6" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.35" steps="1724"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.7" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.39" steps="2361"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.8" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.38" steps="2361"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.9" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="2.85" steps="10894"/></proof>
    </goal>
    <goal name="link&#39;vc.160.0.10" expl="VC for link" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="3050"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="link&#39;vc.161" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="207"/></proof>
  </goal>
  <goal name="link&#39;vc.162" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="201"/></proof>
  </goal>
  <goal name="link&#39;vc.163" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="201"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_wr_rgn_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.13" steps="1380"/></proof>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="71"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="64"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="73"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="68"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="68"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.6.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.6.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.48" steps="3160"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.47" steps="30888"/></proof>
    </goal>
    <goal name="insert&#39;vc.6.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.22" steps="1265"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="1153"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="190"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="445"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.10.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.42" steps="2010"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="2013"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.40" steps="2020"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="184"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="184"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.74" steps="17775"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.77" steps="17769"/></proof>
   </goal>
   <goal name="insert&#39;vc.10.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.75" steps="17781"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="2023"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="1698"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="196"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="2221"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="194"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="rep := self.rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="445"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="24.94" steps="87208"/></proof>
   </goal>
   <goal name="insert&#39;vc.17.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="6.17" steps="25207"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="236"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="547"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1061"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="1891"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.12" steps="15626"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="242"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="8.01" steps="28788"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="565"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1243"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="( \# )">
   <goal name="insert&#39;vc.27.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.27.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if_term" proved="true" >
     <goal name="insert&#39;vc.27.0.0.0" expl="VC for insert" proved="true">
     <transf name="eliminate_if_fmla" proved="true" >
      <goal name="insert&#39;vc.27.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="7.47" steps="17448"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.27.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="0.10" steps="232"/></proof>
       </goal>
       <goal name="insert&#39;vc.27.0.0.0.0.1" expl="assertion" proved="true">
       <proof prover="0"><result status="valid" time="6.53" steps="19126"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.28.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.28.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.59" steps="3544"/></proof>
    </goal>
    <goal name="insert&#39;vc.28.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.28.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="228"/></proof>
     </goal>
     <goal name="insert&#39;vc.28.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.28.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.28.0.1.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.73" steps="18361"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.28.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.54" steps="3392"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="3.00" steps="13300"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(p = self)">
   <goal name="insert&#39;vc.30.0" expl="true case (assertion)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="252"/></proof>
   </goal>
   <goal name="insert&#39;vc.30.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(nodeP s4 s4.heap.rep[p])">
    <goal name="insert&#39;vc.30.1.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.33" steps="7885"/></proof>
    </goal>
    <goal name="insert&#39;vc.30.1.1" expl="false case (assertion)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.98" steps="16439"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="248"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="246"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="hd := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="561"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="284"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="647"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="1251"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2207"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.36" steps="30305"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="290"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="5.12" steps="19454"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="288"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="633"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="322"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="721"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1386"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.73" steps="2439"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="8073"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="328"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="324"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="685"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.63" steps="7094"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="523"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="527"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="531"/></proof>
  </goal>
  <goal name="insert&#39;vc.55" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.17" steps="10371"/></proof>
  </goal>
  <goal name="insert&#39;vc.56" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.80" steps="11930"/></proof>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.13" steps="10550"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.94" steps="14304"/></proof>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="2.94" steps="9389"/></proof>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="14.56" steps="38069"/></proof>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="3.04" steps="9408"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="581"/></proof>
  </goal>
  <goal name="insert&#39;vc.63" expl="wr ({} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="16.12" steps="42231"/></proof>
  </goal>
  <goal name="insert&#39;vc.64" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="589"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.65.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.65.0.0" expl="postcondition" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def, img_rep_ax" arg2="in" arg3="H">
     <goal name="insert&#39;vc.65.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.65.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="360"/></proof>
      </goal>
      <goal name="insert&#39;vc.65.0.0.0.1" expl="postcondition" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="insert&#39;vc.65.0.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="4.33" steps="15818"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="5402"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="362"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="364"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="362"/></proof>
  </goal>
  <goal name="insert&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="363"/></proof>
  </goal>
  <goal name="insert&#39;vc.71" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.71.0" expl="postcondition" proved="true">
   <proof prover="6" timelimit="80"><result status="valid" time="4.51" steps="305747"/></proof>
   </goal>
   <goal name="insert&#39;vc.71.1" expl="postcondition" proved="true">
   <proof prover="6" timelimit="80"><result status="valid" time="4.61" steps="305169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="12.67" steps="21508"/></proof>
  </goal>
  <goal name="insert&#39;vc.73" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.73.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.73.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.97" steps="9854"/></proof>
    </goal>
    <goal name="insert&#39;vc.73.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.73.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="352"/></proof>
     </goal>
     <goal name="insert&#39;vc.73.0.1.1" expl="VC for insert" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.73.0.1.1.0" expl="VC for insert" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="insert&#39;vc.73.0.1.1.0.0" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.73.0.1.1.0.0.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.73.0.1.1.0.0.0.0" expl="VC for insert" proved="true">
         <proof prover="6" timelimit="120"><result status="valid" time="5.85" steps="303740"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.73.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.73" steps="2296"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.74" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.74.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.74.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.52" steps="6890"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.44" steps="6434"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.2" expl="VC for insert" proved="true">
    <proof prover="2"><result status="valid" time="83.23"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s6 pq)">
     <goal name="insert&#39;vc.74.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.43" steps="924"/></proof>
     </goal>
     <goal name="insert&#39;vc.74.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.74.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.74.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="36.93" steps="55397"/></proof>
       </goal>
       <goal name="insert&#39;vc.74.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="1.40" steps="152676"/></proof>
       </goal>
       <goal name="insert&#39;vc.74.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="1.41" steps="152090"/></proof>
       </goal>
       <goal name="insert&#39;vc.74.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="22.46" steps="1109968"/></proof>
       </goal>
       <goal name="insert&#39;vc.74.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="22.20" steps="1110717"/></proof>
       </goal>
       <goal name="insert&#39;vc.74.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="22.22" steps="1108762"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.74.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="insert&#39;vc.74.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="362"/></proof>
     </goal>
     <goal name="insert&#39;vc.74.0.4.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="17.68" steps="25410"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.74.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.37" steps="9470"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.6" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="9.08" steps="24748"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.80" steps="8457"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.74" steps="7847"/></proof>
    </goal>
    <goal name="insert&#39;vc.74.0.9" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.74.0.9.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.74.0.9.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.47" steps="8907"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.74.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.70" steps="9407"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.75" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="254"/></proof>
  </goal>
  <goal name="insert&#39;vc.76" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="10.85" steps="26086"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="639"/></proof>
  </goal>
  <goal name="insert&#39;vc.78" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="258"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="1568"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="670"/></proof>
  </goal>
  <goal name="insert&#39;vc.81" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="676"/></proof>
  </goal>
  <goal name="insert&#39;vc.82" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="264"/></proof>
  </goal>
  <goal name="insert&#39;vc.83" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="264"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="1.56" steps="8084"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="tmp := link(self,hd,result)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="269"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="tmp := link(self,hd,result)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.86.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.86.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.60" steps="4011"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.64" steps="3649"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.2" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="insert&#39;vc.86.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.55" steps="3608"/></proof>
     </goal>
     <goal name="insert&#39;vc.86.0.2.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="insert&#39;vc.86.0.2.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.86.0.2.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.31" steps="9300"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.2.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="2.53" steps="9285"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.2.1.0.2" expl="VC for insert" proved="true">
       <proof prover="5"><result status="valid" time="3.44" steps="285969"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.2.1.0.3" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.98" steps="8758"/></proof>
       <proof prover="5"><result status="valid" time="3.47" steps="286905"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.2.1.0.4" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="1.94" steps="8761"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.86.0.3" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="insert&#39;vc.86.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.22" steps="720"/></proof>
     </goal>
     <goal name="insert&#39;vc.86.0.3.1" expl="VC for insert" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="insert&#39;vc.86.0.3.1.0" expl="VC for insert" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.86.0.3.1.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="9.20" steps="12714"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.3.1.0.1" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.68" steps="4230"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.3.1.0.2" expl="VC for insert" proved="true">
       <proof prover="0"><result status="valid" time="0.62" steps="3851"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.3.1.0.3" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="26.94" steps="1836894"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.3.1.0.4" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="26.80" steps="1832334"/></proof>
       </goal>
       <goal name="insert&#39;vc.86.0.3.1.0.5" expl="VC for insert" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="27.01" steps="1816020"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.86.0.4" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="57.81" steps="12320"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="4733"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.6" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.62" steps="3587"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.72" steps="4377"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.70" steps="4373"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.9" expl="VC for insert" proved="true">
    <proof prover="5"><result status="valid" time="0.26" steps="67941"/></proof>
    </goal>
    <goal name="insert&#39;vc.86.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="1.07" steps="5099"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.87" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="462"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.28" steps="330"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="815"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="366"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="900"/></proof>
  </goal>
  <goal name="insert&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="1757"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="2807"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="55.85" steps="148080"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="372"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="366"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="867"/></proof>
  </goal>
  <goal name="insert&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.63" steps="12695"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="654"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="658"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="662"/></proof>
  </goal>
  <goal name="insert&#39;vc.102" expl="wr ({} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.102.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.102.0.0" expl="wr ({} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="3.62" steps="10020"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.103" expl="wr ({} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="106.34" steps="24351"/></proof>
  </goal>
  <goal name="insert&#39;vc.104" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_size_framed_by">
   <goal name="insert&#39;vc.104.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0"><result status="valid" time="20.55" steps="24849"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.105" expl="wr ({} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="109.83" steps="24774"/></proof>
  </goal>
  <goal name="insert&#39;vc.106" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="5"><result status="valid" time="5.10" steps="414823"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="wr ({} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="70.56" steps="27406"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.108.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.108.0.0" expl="wr ({self} union {self}`rep)`size" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.59" steps="994"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.109" expl="wr {self}`rep`length" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="708"/></proof>
  </goal>
  <goal name="insert&#39;vc.110" expl="wr ({} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="insert&#39;vc.110.0" expl="wr ({} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="68.64" steps="26371"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.111" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="716"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="insert&#39;vc.112.0" expl="VC for insert" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="insert&#39;vc.112.0.0" expl="VC for insert" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.112.0.0.0" expl="VC for insert" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.112.0.0.0.0" expl="VC for insert" proved="true">
      <proof prover="0"><result status="valid" time="0.34" steps="398"/></proof>
      </goal>
      <goal name="insert&#39;vc.112.0.0.0.1" expl="VC for insert" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.112.0.0.0.1.0" expl="VC for insert" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.112.0.0.0.1.0.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.77" steps="9990"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.113" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.31" steps="10545"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="406"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="408"/></proof>
  </goal>
  <goal name="insert&#39;vc.116" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="404"/></proof>
  </goal>
  <goal name="insert&#39;vc.117" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="405"/></proof>
  </goal>
  <goal name="insert&#39;vc.118" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="7.67" steps="662826"/></proof>
  </goal>
  <goal name="insert&#39;vc.119" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.119.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="insert&#39;vc.119.0.0" expl="postcondition" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="insert&#39;vc.119.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.48" steps="1044"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.119.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.42" steps="1031"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.120" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="insert&#39;vc.120.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.120.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="8.13" steps="17065"/></proof>
    </goal>
    <goal name="insert&#39;vc.120.0.1" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="insert&#39;vc.120.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.26" steps="396"/></proof>
     </goal>
     <goal name="insert&#39;vc.120.0.1.1" expl="VC for insert" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="48.38" steps="2158570"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.120.0.2" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="0.71" steps="2888"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.121" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="insert&#39;vc.121.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.121.0.0" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.39" steps="9718"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.1" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.30" steps="9193"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.2" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="insert&#39;vc.121.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="2.44" steps="8994"/></proof>
     </goal>
     <goal name="insert&#39;vc.121.0.2.1" expl="VC for insert" proved="true">
     <proof prover="0"><result status="valid" time="3.43" steps="12795"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.121.0.3" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.121.0.3.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.121.0.3.0.0" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="185.20" steps="22659733"/></proof>
      </goal>
      <goal name="insert&#39;vc.121.0.3.0.1" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="9.69" steps="772520"/></proof>
      </goal>
      <goal name="insert&#39;vc.121.0.3.0.2" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="9.35" steps="836822"/></proof>
      </goal>
      <goal name="insert&#39;vc.121.0.3.0.3" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="38.99" steps="1640640"/></proof>
      </goal>
      <goal name="insert&#39;vc.121.0.3.0.4" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="39.00" steps="1643652"/></proof>
      </goal>
      <goal name="insert&#39;vc.121.0.3.0.5" expl="VC for insert" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="38.89" steps="1643759"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.121.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="insert&#39;vc.121.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.21" steps="400"/></proof>
     </goal>
     <goal name="insert&#39;vc.121.0.4.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="86.40" steps="91100"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.121.0.5" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.50" steps="12622"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(pq = self)">
     <goal name="insert&#39;vc.121.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.43" steps="1102"/></proof>
     </goal>
     <goal name="insert&#39;vc.121.0.6.1" expl="false case" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.13" steps="14828"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.121.0.7" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="3.01" steps="12610"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.8" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="2.72" steps="11683"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.9" expl="VC for insert" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="43.80" steps="1951585"/></proof>
    </goal>
    <goal name="insert&#39;vc.121.0.10" expl="VC for insert" proved="true">
    <proof prover="0"><result status="valid" time="5.20" steps="13361"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="combineAux&#39;vc" expl="VC for combineAux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combineAux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="32"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.7" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="87"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.8" expl="array size" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="104"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="264"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.10" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="137"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="167"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="169"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="770"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="5.17" steps="23907"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="175"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="4.35" steps="14761"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="179"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.20" expl="current := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.21" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="2223"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.22" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="4044"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.23" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.23.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.20" steps="1141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.24" expl="wr {self}`rep`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.24.0" expl="wr {self}`rep`sibling" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.09" steps="200"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.25" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="329"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.26" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="333"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.27" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.27.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.27.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="2017"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="1874"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.90" steps="10143"/></proof>
    <proof prover="5"><result status="valid" time="4.15" steps="634200"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.3" expl="VC for combineAux" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="combineAux&#39;vc.27.0.3.0" expl="VC for combineAux" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.27.0.3.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.78" steps="7895"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.26" steps="1589"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.2" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="1.44" steps="7041"/></proof>
      <proof prover="5"><result status="valid" time="3.69" steps="486727"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.3" expl="VC for combineAux" proved="true">
      <proof prover="5"><result status="valid" time="7.71" steps="648284"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.4" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.42" steps="10939"/></proof>
      <proof prover="5"><result status="valid" time="7.65" steps="648411"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.27.0.3.0.5" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="2.47" steps="10938"/></proof>
      <proof prover="5"><result status="valid" time="7.69" steps="648469"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.27.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="4233"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2109"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="1820"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2115"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.25" steps="2113"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.27.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="combineAux&#39;vc.27.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.46" steps="7148"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.27.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="2.14" steps="10487"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.27.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.69" steps="3970"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.28" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.28.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.28.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="5524"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.28.0.1" expl="VC for combineAux" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="76.53" steps="7437900"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.28.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="1522"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="6834"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.30" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="214"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1214"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.32" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.34" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="252"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="286"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.36" expl="tmp := current.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="1299"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="308"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.38" expl="current := current.sibling" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="4979"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="319"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="660"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="15.03" steps="57077"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.42" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.42.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.01" steps="3462"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.19" steps="311"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.17" steps="311"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.17" steps="3459"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.42.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.42.4.0" expl="true case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.39" steps="14439"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.42.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.10" steps="9305"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="2643"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="325"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.45" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.86" steps="16535"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.46" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="3.14" steps="10333"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.47" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="13.52" steps="22518"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.48" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="85.06" steps="70758"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.49" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="535"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.50" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="539"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.51" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.51.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.51.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.00" steps="4277"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.66" steps="3506"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.51.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.82" steps="3445"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.2.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="combineAux&#39;vc.51.0.2.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.51.0.2.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.2.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.2.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.97" steps="19917"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.2.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.28" steps="733"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.2.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.30" steps="733"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.51.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="744"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.51.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.51.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="3.51" steps="254809"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.34" steps="92141"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.33" steps="91935"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.99" steps="161947"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.09" steps="369525"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.51.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="0.95" steps="161947"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="21.38" steps="16979"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.23" steps="5364"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.87" steps="3438"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.96" steps="4061"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="4508"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.51.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.51.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.09" steps="249444"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.51.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="41.73" steps="36122"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.51.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.46" steps="11171"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.52" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.52.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.52.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.75" steps="6729"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.52.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.52.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="335"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.52.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.52.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="combineAux&#39;vc.52.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="6" timelimit="60"><result status="valid" time="3.02" steps="195315"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.52.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="0.44" steps="1971"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.53" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="6.92" steps="17465"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.54" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="Ensures8" arg2="k7">
   <goal name="combineAux&#39;vc.54.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.29" steps="700"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.55" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="1635"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.56" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="348"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="514"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.58" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="248"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.59" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="282"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="598"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.61" expl="tmp := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="285"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="287"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="638"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.64" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1537"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.65" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.65.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="2.95" steps="10256"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.65.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="2.45" steps="10756"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.66" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="2858"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.67" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="293"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.68" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.68" steps="3432"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.69" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="2.01" steps="6472"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.70" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.41" steps="11777"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.71" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.12" steps="3034"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.72" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="513"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.73" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.74" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="311"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.75" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.75.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.75.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.66" steps="2761"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.1" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.65" steps="2762"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.2" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="7.03" steps="17849"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.3" expl="loop invariant init" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="combineAux&#39;vc.75.0.3.0" expl="loop invariant init" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="combineAux&#39;vc.75.0.3.0.0" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="19.53" steps="1212059"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.1" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="6.71" steps="705217"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.2" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="6.96" steps="750615"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.3" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="20.92" steps="1327197"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.4" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="23.75" steps="1407965"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.75.0.3.0.5" expl="loop invariant init" proved="true">
      <proof prover="6" timelimit="120"><result status="valid" time="21.25" steps="1331191"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.75.0.4" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.18" steps="12426"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.5" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3240"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.6" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.66" steps="2702"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.7" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3219"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.8" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.75" steps="3208"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.9" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="56.01" steps="94205"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.75.0.10" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.82" steps="6340"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.76" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.76.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.76.0.0" expl="loop invariant init" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="1.63" steps="142121"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.76.0.1" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.76.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="304"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.76.0.1.1" expl="loop invariant init" proved="true">
     <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="52.72" steps="77681"/></proof>
     <transf name="inline_goal" proved="true" >
      <goal name="combineAux&#39;vc.76.0.1.1.0" expl="loop invariant init" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="combineAux&#39;vc.76.0.1.1.0.0" expl="loop invariant init" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="combineAux&#39;vc.76.0.1.1.0.0.0" expl="loop invariant init" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="combineAux&#39;vc.76.0.1.1.0.0.0.0" expl="loop invariant init" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="5.75" steps="10713"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.76.0.2" expl="loop invariant init" proved="true">
    <proof prover="6" timelimit="120"><result status="valid" time="1.26" steps="155273"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.77" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="5554"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.78" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="3291"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.79" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="1737"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.80" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="347"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="757"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.82" expl="fst := trees.{i} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="356"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.83" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.33" steps="353"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="787"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.85" expl="snd := trees.{i + 1} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.86" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="863"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.87" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.88" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="359"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.89" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="873"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.90" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="2214"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.91" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.43" steps="883"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.92" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="2324"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.93" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="367"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.94" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.95" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="372"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.96" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="372"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.97" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="993"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.98" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="413"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="443"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="1075"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.83" steps="2094"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.102" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.102.0" expl="true case (type invariant)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.102.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="451"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="451"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.2" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="444"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.3" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.50" steps="453"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.102.0.4" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="47.44" steps="69448"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="combineAux&#39;vc.102.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="18.10" steps="33863"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="4571"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="449"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.105" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.30" steps="8848"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.106" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="12.73" steps="29836"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.107" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.107.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.20" steps="7305"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.108" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.89" steps="5558"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.109" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="3.72" steps="5569"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.110" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="3.74" steps="5578"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="469"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.112" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.112.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.112.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.64" steps="6481"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.1" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="19.46" steps="2306578"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.112.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.52" steps="5366"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.72" steps="112478"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.112.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.112.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.73" steps="1173"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.112.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.112.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="5.54" steps="12589"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.70" steps="2655"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.67" steps="2628"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.17" steps="252866"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="11.14" steps="21155"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.112.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="10.19" steps="21160"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.112.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.16" steps="294417"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.04" steps="6924"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.63" steps="5879"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.18" steps="7559"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.10" steps="7552"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.112.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.112.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7" timelimit="60"><result status="valid" time="0.11" steps="296324"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.112.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="2.34" steps="279892"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.112.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="10.82" steps="21617"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.113.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.113.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="5.11" steps="371493"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.113.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.113.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.29" steps="460"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.113.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="74.17" steps="5649382"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.113.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="1.64" steps="224088"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.114" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="475"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.115" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="28.57" steps="47778"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="2942"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.117" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="353"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.118" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.20" steps="354"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="764"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.120" expl="fst := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="363"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.121" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="360"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.122" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="794"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.123" expl="snd := trees.{j + 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="367"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.37" steps="870"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.125" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.126" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="366"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.127" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="880"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.128" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.51" steps="2223"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.129" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="890"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.130" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2333"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.131" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="374"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.132" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.133" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="379"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.134" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="379"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.135" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="1000"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.136" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="420"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="448"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="1080"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.74" steps="2099"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.140" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = trees)">
   <goal name="combineAux&#39;vc.140.0" expl="true case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="37.36" steps="47126"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.140.1" expl="false case (type invariant)" proved="true">
   <proof prover="0"><result status="valid" time="19.48" steps="33870"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="4578"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="454"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.143" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.47" steps="8855"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.144" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="14.76" steps="29850"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.145" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.145.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="2.92" steps="8634"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.146" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.95" steps="5568"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.147" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="4.04" steps="5578"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.148" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="4.10" steps="5586"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.149" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.149.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.149.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.78" steps="6486"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.76" steps="5950"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.149.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.61" steps="5371"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="2.21" steps="7641"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.149.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.149.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="1176"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.149.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.149.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="5.91" steps="13284"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.74" steps="2660"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="0.73" steps="2633"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.18" steps="257628"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.49" steps="21235"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.149.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="12.46" steps="23534"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.149.0.4" expl="VC for combineAux" proved="true">
    <proof prover="2" timelimit="30" memlimit="12000"><result status="valid" time="0.65"/></proof>
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.15" steps="294444"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.46" steps="7749"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="1.76" steps="5884"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.28" steps="7563"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.26" steps="7549"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.149.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.149.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7" timelimit="20" memlimit="12000"><result status="valid" time="0.12" steps="296354"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.149.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="2.43" steps="285781"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.149.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="14.76" steps="27113"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.150" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.150.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.150.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="4.69" steps="371362"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.150.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.150.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.42" steps="463"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.150.0.1.1" expl="VC for combineAux" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="61.23" steps="4902442"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.150.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="1.44" steps="229888"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.151" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="478"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.152" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="480"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.153" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="34.95" steps="45702"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.154" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="2951"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.155" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.57" steps="506"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.156" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="1210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.157" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.158" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="512"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.159" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="1240"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.160" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="521"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.161" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.54" steps="516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.162" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.163" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.57" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.164" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="1257"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.165" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="3442"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.166" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.06" steps="1267"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.167" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="3596"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.168" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="525"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.169" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="740"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.170" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="530"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.171" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="530"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.172" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.172.0" expl="assertion" proved="true">
   <proof prover="0" memlimit="16000"><result status="valid" time="0.43" steps="539"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.172.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.172.1.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.172.1.0.0" expl="assertion" proved="true">
     <proof prover="0" memlimit="16000"><result status="valid" time="5.70" steps="16047"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.173" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="1409"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.174" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.76" steps="575"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.175" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="605"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.176" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="1488"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.177" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="2900"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.178" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.178.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="8.87" steps="9049"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.63" steps="589"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.58" steps="589"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="16.77" steps="9049"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.178.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.178.4.0" expl="true case (type invariant)" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.178.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="11.09" steps="31212"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.178.4.1" expl="false case (type invariant)" proved="true">
    <transf name="subst_all" proved="true" >
     <goal name="combineAux&#39;vc.178.4.1.0" expl="false case (type invariant)" proved="true">
     <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="58.02" steps="45298"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.179" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.01" steps="6717"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.180" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="611"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.181" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="7.80" steps="16031"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="53.96" steps="66270"/></proof>
  <transf name="assert" proved="true" arg1="(s2.alloct = s.alloct)">
   <goal name="combineAux&#39;vc.182.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="619"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.182.1" expl="loop invariant preservation" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.182.1.0" expl="loop invariant preservation" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.182.1.0.0" expl="loop invariant preservation" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.06" steps="1138"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.183" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.183.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="5.10" steps="11857"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.184" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="12.78" steps="10445"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.185" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="12.25" steps="10479"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.186" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="12.19" steps="11435"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.187" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.187.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.187.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.65" steps="9873"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.82" steps="10006"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.187.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="3.43" steps="8140"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.187.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="9.09" steps="21444"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.187.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.31" steps="1593"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.187.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.187.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.187.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="25.53" steps="25040"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.65" steps="3903"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.39" steps="3876"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="3.24" steps="359375"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="60.09" steps="41706"/></proof>
       <proof prover="5"><result status="valid" time="3.30" steps="359381"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.187.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="58.50" steps="41711"/></proof>
       <proof prover="5"><result status="valid" time="3.22" steps="359375"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.17" steps="347081"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="4.59" steps="11587"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.52" steps="8999"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="9.20" steps="22463"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="8.62" steps="21128"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.187.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.187.0.9.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.187.0.9.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.69" steps="4318"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.187.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="4.43" steps="484024"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.187.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="44.14" steps="54477"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.188.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.188.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="13.57" steps="773947"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.188.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.188.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.57" steps="616"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.188.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
      <goal name="combineAux&#39;vc.188.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn">
       <goal name="combineAux&#39;vc.188.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.188.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.188.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="10.69" steps="9870"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.188.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="2.68" steps="376516"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.189" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="633"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.190" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.81" steps="635"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.191" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="Ensures3" arg2="k15">
   <goal name="combineAux&#39;vc.191.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="1.00" steps="1191"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.192" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="1.90" steps="305534"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.193" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.58" steps="506"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.194" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89" steps="1210"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.195" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="517"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.196" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="3409"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.197" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="1242"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.198" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.199" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.199.0" expl="wr {}`length" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="11.45" steps="16866"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.200" expl="wr {}`slots" proved="true">
  <proof prover="5"><result status="valid" time="7.34" steps="523956"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.201" expl="wr {self}`rep`child" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="66137"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.202" expl="wr {self}`rep`prev" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="66141"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.203" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="66145"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.204" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.204.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.204.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.204.0.0.0" expl="VC for combineAux" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="combineAux&#39;vc.204.0.0.0.0" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="0.53" steps="522"/></proof>
      </goal>
      <goal name="combineAux&#39;vc.204.0.0.0.1" expl="VC for combineAux" proved="true">
      <proof prover="0"><result status="valid" time="8.28" steps="8752"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.206" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="522"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.207" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="529"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.208" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.209" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.210" expl="wr {trees}`slots" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.24" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.211" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="0.23" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.212" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.213" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.214" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.215" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.215.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.215.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.20" steps="339"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.215.0.1" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.19" steps="339"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.215.0.2" expl="loop invariant init" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.39" steps="814"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.216" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="349"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.217" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="351"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.218" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="361"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.219" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="361"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.220" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.32" steps="414"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.221" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="897"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.222" expl="fst := trees.{j - 2} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="425"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.223" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.24" steps="420"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.224" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="927"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.225" expl="snd := trees.{j} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="429"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.226" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.69" steps="1003"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.227" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="426"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.228" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="426"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.229" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="1013"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.230" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="2693"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.231" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="1023"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.232" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="2825"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.233" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="434"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.234" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="612"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.235" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="439"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.236" expl="tmp := link(self,fst,snd)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="439"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.237" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.237.0" expl="assertion" proved="true">
   <proof prover="0" memlimit="16000"><result status="valid" time="0.22" steps="450"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.237.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="combineAux&#39;vc.237.1.0" expl="assertion" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.237.1.0.0" expl="assertion" proved="true">
     <proof prover="0" memlimit="16000"><result status="valid" time="3.15" steps="9439"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.238" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="1165"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.239" expl=" index is in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.48" steps="484"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="514"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="1264"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.05" steps="2732"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.243" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="combineAux&#39;vc.243.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="5.23" steps="7189"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="500"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.41" steps="500"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="7.68" steps="7191"/></proof>
   </goal>
   <goal name="combineAux&#39;vc.243.4" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(p = trees)">
    <goal name="combineAux&#39;vc.243.4.0" expl="true case (type invariant)" proved="true">
    <transf name="instantiate" proved="true" arg1="Ensures3" arg2="i">
     <goal name="combineAux&#39;vc.243.4.0.0" expl="true case (type invariant)" proved="true">
     <proof prover="0"><result status="valid" time="3.98" steps="11172"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.243.4.1" expl="false case (type invariant)" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="33.65" steps="45558"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="1.96" steps="5539"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="520"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.246" expl="locals type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.38" steps="10392"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.247" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="61.82" steps="83903"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.248" expl="wr {trees}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.248.0" expl="wr {trees}`slots" proved="true">
   <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="3.22" steps="9589"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.249" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0" timelimit="30" memlimit="12000"><result status="valid" time="6.66" steps="6870"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.250" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="6.52" steps="8401"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.251" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="6.88" steps="7639"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.252" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="combineAux&#39;vc.252.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.252.0.0" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.60" steps="8003"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.1" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.42" steps="7252"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.2" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="combineAux&#39;vc.252.0.2.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures11">
      <goal name="combineAux&#39;vc.252.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.61" steps="5034"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="combineAux&#39;vc.252.0.2.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="0.80" steps="125177"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.252.0.3" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="combineAux&#39;vc.252.0.3.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="2.02" steps="277341"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.252.0.3.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="combineAux&#39;vc.252.0.3.1.0" expl="VC for combineAux" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="combineAux&#39;vc.252.0.3.1.0.0" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="11.69" steps="17535"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.1" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.02" steps="3184"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.2" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="1.04" steps="3157"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.3" expl="VC for combineAux" proved="true">
       <proof prover="5"><result status="valid" time="2.43" steps="300316"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.4" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="24.02" steps="29571"/></proof>
       <proof prover="5"><result status="valid" time="2.52" steps="299861"/></proof>
       </goal>
       <goal name="combineAux&#39;vc.252.0.3.1.0.5" expl="VC for combineAux" proved="true">
       <proof prover="0"><result status="valid" time="23.89" steps="29576"/></proof>
       <proof prover="5"><result status="valid" time="2.47" steps="300442"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.252.0.4" expl="VC for combineAux" proved="true">
    <proof prover="7" timelimit="30" memlimit="12000"><result status="valid" time="0.19" steps="316138"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.5" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.93" steps="8544"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.6" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="2.46" steps="7185"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.7" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.65" steps="10129"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.8" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="3.89" steps="11954"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.252.0.9" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="combineAux&#39;vc.252.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7" timelimit="20" memlimit="12000"><result status="valid" time="0.12" steps="318236"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.252.0.9.1" expl="VC for combineAux" proved="true">
     <proof prover="5"><result status="valid" time="3.14" steps="365827"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.252.0.10" expl="VC for combineAux" proved="true">
    <proof prover="0"><result status="valid" time="23.23" steps="33093"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.253" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="combineAux&#39;vc.253.0" expl="VC for combineAux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="combineAux&#39;vc.253.0.0" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="8.64" steps="574899"/></proof>
    </goal>
    <goal name="combineAux&#39;vc.253.0.1" expl="VC for combineAux" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="combineAux&#39;vc.253.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.37" steps="527"/></proof>
     </goal>
     <goal name="combineAux&#39;vc.253.0.1.1" expl="VC for combineAux" proved="true">
     <transf name="unfold" proved="true" arg1="typeofRgn">
      <goal name="combineAux&#39;vc.253.0.1.1.0" expl="VC for combineAux" proved="true">
      <transf name="unfold" proved="true" arg1="typeofRgn" arg2="in" arg3="h">
       <goal name="combineAux&#39;vc.253.0.1.1.0.0" expl="VC for combineAux" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="combineAux&#39;vc.253.0.1.1.0.0.0" expl="VC for combineAux" proved="true">
        <transf name="instantiate" proved="true" arg1="h" arg2="p">
         <goal name="combineAux&#39;vc.253.0.1.1.0.0.0.0" expl="VC for combineAux" proved="true">
         <proof prover="0"><result status="valid" time="6.21" steps="7955"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="combineAux&#39;vc.253.0.2" expl="VC for combineAux" proved="true">
    <proof prover="5"><result status="valid" time="1.83" steps="300524"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.254" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="542"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.255" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="544"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.256" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="69.76" steps="73530"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.257" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="3516"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.258" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.31" steps="414"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.259" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="892"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.260" expl="result := trees.{0} ( index is in bounds)" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.261" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="2441"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.262" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="924"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.263" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="424"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.264" expl="wr {}`length" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.264.0" expl="wr {}`length" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.264.0.0" expl="wr {}`length" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="3.92" steps="9036"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.265" expl="wr {}`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="combineAux&#39;vc.265.0" expl="wr {}`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="combineAux&#39;vc.265.0.0" expl="wr {}`slots" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="2.71" steps="6162"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.266" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.267" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.268" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="428"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.269" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="combineAux&#39;vc.269.0" expl="VC for combineAux" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="combineAux&#39;vc.269.0.0" expl="VC for combineAux" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="combineAux&#39;vc.269.0.0.0" expl="VC for combineAux" proved="true">
     <proof prover="0"><result status="valid" time="2.67" steps="4721"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="combineAux&#39;vc.270" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="430"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.271" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="430"/></proof>
  </goal>
  <goal name="combineAux&#39;vc.272" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="combine&#39;vc" expl="VC for combine" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="combine&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="combine&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="32"/></proof>
  </goal>
  <goal name="combine&#39;vc.3" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="81"/></proof>
  </goal>
  <goal name="combine&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="115"/></proof>
  </goal>
  <goal name="combine&#39;vc.5" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
  <goal name="combine&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
  <goal name="combine&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="combine&#39;vc.9" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="50"/></proof>
  </goal>
  <goal name="combine&#39;vc.10" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="52"/></proof>
  </goal>
  <goal name="combine&#39;vc.11" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="54"/></proof>
  </goal>
  <goal name="combine&#39;vc.12" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="combine&#39;vc.13" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="combine&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="combine&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="59"/></proof>
  </goal>
  <goal name="combine&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="150"/></proof>
  </goal>
  <goal name="combine&#39;vc.20" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.21" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.22" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.23" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.24" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.25" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.26" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="combine&#39;vc.27" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="2466"/></proof>
  </goal>
  <goal name="combine&#39;vc.28" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.29" expl="result := combineAux(self,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="combine&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.33" expl="wr {}`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.34" expl="wr {}`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.35" expl="wr {self}`rep`child" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.36" expl="wr {self}`rep`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.37" expl="wr {self}`rep`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="88"/></proof>
  </goal>
  <goal name="combine&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="67"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="result := findMin(self)" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="31"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="86"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="91"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="601"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="tmp := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="101"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="150"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="108"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="231"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="451"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="916"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="4635"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="114"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="171"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="201"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="205"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="209"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="213"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="217"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.72" steps="1563"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="225"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="229"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="233"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="3706"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="241"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="245"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="249"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="deleteMin&#39;vc.39.0" expl="VC for deleteMin" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="deleteMin&#39;vc.39.0.0" expl="VC for deleteMin" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="deleteMin&#39;vc.39.0.0.0" expl="VC for deleteMin" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="deleteMin&#39;vc.39.0.0.0.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="143"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.39.0.0.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1879"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1144"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="149"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="147"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="154"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.44.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.44.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="2703"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.44.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.44.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="144"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.44.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="3.46" steps="321836"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.44.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.37" steps="79213"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.45.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.45.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1514"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1550"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.2" expl="VC for deleteMin" proved="true">
    <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures34">
     <goal name="deleteMin&#39;vc.45.0.2.0" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
      <goal name="deleteMin&#39;vc.45.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="946"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.45.0.2.0.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="2087"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.45.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="388"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.45.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.45.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.45.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="3039"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="897"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="869"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="0.75" steps="122902"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="3531"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.45.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.10" steps="3531"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="19.30" steps="16361"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.42" steps="5344"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.39" steps="3270"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="3534"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="3731"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.9" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.45.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="4.81" steps="3359"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.45.0.9.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="13.19" steps="12870"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.45.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="2324"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="166"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="50"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="861"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="6.12" steps="20864"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="54"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="2.41" steps="10063"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="tmp := combine(self,tmp)" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="123"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="sz := self.size" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="157"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="401"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="879"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1547"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="2.49" steps="11240"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="163"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="159"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="1062"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99" steps="4867"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="wr ({} union {self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="2.01" steps="3619"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="326"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="330"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="2.18" steps="3658"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="2.17" steps="3666"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="4.88" steps="9565"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="3685"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="350"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="4.56" steps="8121"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="wr ({} union {self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="2.17" steps="3711"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="366"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="370"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.80.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="deleteMin&#39;vc.80.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="28.31" steps="12121"/></proof>
    <proof prover="4"><result status="valid" time="0.16" steps="537207"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="3.01" steps="397212"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="1712"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="198"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="196"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="203"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.85" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="deleteMin&#39;vc.85.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.85.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="5.60" steps="7029"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.85.0.1" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="deleteMin&#39;vc.85.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="189"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.85.0.1.1" expl="VC for deleteMin" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="8.58" steps="573461"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.85.0.2" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1493"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.86" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="deleteMin&#39;vc.86.0" expl="VC for deleteMin" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.86.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="3097"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.1" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.68" steps="3153"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.2" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="deleteMin&#39;vc.86.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="3130"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.2.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="4025"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.3" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="deleteMin&#39;vc.86.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="550"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.3.1" expl="VC for deleteMin" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="deleteMin&#39;vc.86.0.3.1.0" expl="VC for deleteMin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.86.0.3.1.0.0" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.37" steps="7998"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.1" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1300"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.2" expl="VC for deleteMin" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="1272"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.3" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.09" steps="146432"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.4" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.10" steps="146450"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.86.0.3.1.0.5" expl="VC for deleteMin" proved="true">
       <proof prover="5" timelimit="15"><result status="valid" time="1.11" steps="146438"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.4" expl="VC for deleteMin" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="3.86" steps="421472"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.5" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="7.18" steps="10598"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.6" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="5.03" steps="4252"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.7" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="3.87" steps="4326"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.8" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="7.09" steps="10206"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.9" expl="VC for deleteMin" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="deleteMin&#39;vc.86.0.9.0" expl="asserted formula" proved="true">
     <transf name="unfold" proved="true" arg1="pqueueI" arg2="in" arg3="Ensures31">
      <goal name="deleteMin&#39;vc.86.0.9.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1409"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.86.0.9.1" expl="VC for deleteMin" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.86.0.9.1.0" expl="VC for deleteMin" proved="true">
      <proof prover="0" memlimit="16000"><result status="valid" time="5.75" steps="8217"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.86.0.10" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="4.02" steps="4613"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="32"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="85"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="sntl := self.sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="85"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="62"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="tmp := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.45" steps="3310"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="913"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="805"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="75"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.84" steps="13185"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.06" steps="83"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="tmp := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.13" steps="86"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="pos := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="259"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="9.07" steps="32593"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1050"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="23.27" steps="82365"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="124"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="232"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.23" steps="1306"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.86" steps="4681"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.17" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="259"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="174"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="24.95" steps="68086"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1392"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1547"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="180"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="201"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="211"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="492"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="23.48" steps="66484"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1711"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="2162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1480"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.52" steps="2446"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.55.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.55.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.22" steps="4840"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.55.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.55.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="215"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.55.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="13.46" steps="836484"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.55.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="1601"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.56.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.56.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.14" steps="227934"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.13" steps="234295"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.56.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="228127"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.56.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.56.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="501"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.66" steps="3243"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.21" steps="485826"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="479973"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.36" steps="749636"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.56.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="227337"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.56.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.35" steps="5429"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1345"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.13" steps="234529"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="6.31" steps="435292"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.45" steps="203374"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.71" steps="217370"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="227936"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="235223"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.16" steps="227943"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="227971"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.11" steps="227971"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.56.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="229046"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.56.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="decreaseKey&#39;vc.56.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.56.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.65" steps="3827"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.56.0.9.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1540"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.56.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="3181"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="289"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="690"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.49" steps="1366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="2461"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(p = self)">
   <goal name="decreaseKey&#39;vc.61.0" expl="true case (type invariant)" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="3884"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.61.1" expl="false case (type invariant)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="71.02" steps="152549"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.61.1.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="297"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="297"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.93" steps="4580"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.3" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="297"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.03" steps="19675"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.32" steps="594"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.61.1.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="809"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="295"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="288"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="2.19" steps="3974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="475"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.67.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="479"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="483"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="487"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="40.82" steps="34815"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.71.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.71.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="835"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="63.31" steps="35747"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="51.83" steps="106149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="511"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="515"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="656637"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.79.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.79.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.22" steps="6554"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.79.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.79.0.1.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="221822"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.79.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="22.62" steps="1096182"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.79.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="2223"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.80.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.80.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.81" steps="2998"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="265549"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.80.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="260923"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.80.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.14" steps="4816"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.80.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="755"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.80.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.80.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.90" steps="7433"/></proof>
       <proof prover="7"><result status="valid" time="0.49" steps="1134332"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.09" steps="265893"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.09" steps="265836"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.27" steps="712423"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="712423"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.80.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.36" steps="712423"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="10.76" steps="749238"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.37" steps="5547"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.12" steps="260728"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="4092"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.13" steps="4553"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.80.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.13" steps="262163"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.80.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="2.53" steps="220964"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.80.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.96" steps="4898"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="140"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.07" steps="141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="259"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="1620"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="23.07" steps="66162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="1568"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="2169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="204"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="377"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.22" steps="439"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="214"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="501"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="83.77" steps="149804"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1755"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="2217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="220"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="1507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="467"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="471"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="223"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="223"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.46" steps="2555"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.109.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.109.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.20" steps="5333"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.109.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s4 (img_rep s4 s4.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.109.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="218"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.109.0.1.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.109.0.1.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.109.0.1.1.0.0" expl="VC for decreaseKey" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="decreaseKey&#39;vc.109.0.1.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="decreaseKey&#39;vc.109.0.1.1.0.0.0.0" expl="VC for decreaseKey" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="94.79" steps="69184"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.109.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="1604"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.110.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.110.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.37" steps="2562"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.39" steps="2610"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s4 sntl2)">
     <goal name="decreaseKey&#39;vc.110.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2583"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.110.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.110.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="507"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="3701"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="45.79" steps="6298177"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="507"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="79.91" steps="13691056"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s4 pq)">
     <goal name="decreaseKey&#39;vc.110.0.3.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.16" steps="518"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.110.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.30" steps="5972"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.10" steps="237740"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.12" steps="237690"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="0.69" steps="94612"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.41" steps="393382"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.110.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.67" steps="419091"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="230777"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="238411"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="230784"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.09" steps="230812"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="230812"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s4 rep1)">
     <goal name="decreaseKey&#39;vc.110.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.17" steps="231937"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.110.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.110.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.110.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" memlimit="16000"><result status="valid" time="3.15" steps="7948"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.110.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="3621"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.41" steps="292"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="699"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.44" steps="1385"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2491"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.115.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.26" steps="282"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="282"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.52" steps="4265"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="282"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="75.64" steps="102303"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="578"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.115.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="793"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="298"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="291"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="474"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="2.14" steps="4130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="482"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="486"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="490"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="494"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="2.16" steps="4164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.125.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.125.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.49" steps="845"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.126.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.126.0.0" expl="wr ({self} union {self}`rep)`prev" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.55" steps="6267"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.127.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.127.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.37" steps="6282"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.24" steps="514"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="518"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="522"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.131.0" expl="postcondition" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.131.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.14" steps="479554"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="3.12" steps="212725"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="326"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.133.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.133.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.71" steps="119281"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.133.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.133.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="310"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.133.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="22.61" steps="1270676"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.133.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.54" steps="2225"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.134.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.134.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="3532"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="3575"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.134.0.2.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="3555"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.134.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="263464"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="repOk">
     <goal name="decreaseKey&#39;vc.134.0.3.0" expl="VC for decreaseKey" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.134.0.3.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.47" steps="1152545"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.134.0.3.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="269920"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.134.0.3.0.2" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.19" steps="269873"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.134.0.3.0.3" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.28" steps="730594"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.134.0.3.0.4" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.35" steps="730594"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.134.0.3.0.5" expl="VC for decreaseKey" proved="true">
      <proof prover="7"><result status="valid" time="0.36" steps="730594"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="10.55" steps="875355"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.31" steps="6237"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.14" steps="263617"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.91" steps="4675"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.01" steps="5154"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.134.0.9.0" expl="asserted formula" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="6.61" steps="575423"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.134.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="2.34" steps="236762"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.134.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="2.03" steps="5520"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="283"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="345"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="167"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="6.21" steps="22136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1831"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="171"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="1043"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1721"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.152.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.152.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.20" steps="293651"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.152.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="6.39" steps="483458"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.152.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="2" timelimit="15"><result status="valid" time="0.22"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.153.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.153.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.10" steps="217009"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="223391"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.153.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.15" steps="217204"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="7.98" steps="9831"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.153.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="216478"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.153.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="857718"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="223651"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="223603"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="0.51" steps="83592"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="2.44" steps="7486"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.153.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="4.76" steps="298677"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="217011"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="224319"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.17" steps="217018"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="217046"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.15" steps="217046"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.153.0.9.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="17.15" steps="5912"/></proof>
     <proof prover="7"><result status="valid" time="0.10" steps="218121"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.153.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.153.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.153.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" memlimit="16000"><result status="valid" time="1.84" steps="5812"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.153.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="2799"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="604"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1331"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.47" steps="2161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="26.05" steps="62427"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="409"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="3557"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="417"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.164.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="421"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.70" steps="3589"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.168.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.168.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.31" steps="728"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="28.90" steps="15520"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="19.83" steps="15527"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="449"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="453"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="457"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.21" steps="599205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.176.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.176.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.93" steps="5848"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.176.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="265"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.176.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="12.21" steps="727749"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.176.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="1974"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.177.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.177.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.13" steps="249147"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.19" steps="254329"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.177.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="249354"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="0.49" steps="95137"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.177.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="248460"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.177.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.43" steps="1054119"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="254629"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="254572"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="667236"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="667236"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.177.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.21" steps="667236"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="7.36" steps="596695"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.92" steps="4982"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="7"><result status="valid" time="0.18" steps="249159"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="3688"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.84" steps="4110"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.177.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.18" steps="250580"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.177.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="25.53" steps="30169"/></proof>
     <proof prover="5" timelimit="15"><result status="valid" time="1.75" steps="173937"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.177.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.58" steps="4407"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.14" steps="86"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="tmp := handle.prev" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.07" steps="1038"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="pos := tmp.child" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="3874"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="102"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="194"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.43" steps="16130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1116"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1241"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="142"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="162"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="292"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="172"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="8.40" steps="28610"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1443"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1827"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="178"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="175"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="1259"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="383"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="387"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="2094"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.208.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.208.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="4211"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.208.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Requires10">
     <goal name="decreaseKey&#39;vc.208.0.1.0" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="8.78" steps="564068"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.208.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1372"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.209.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.209.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="1866"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="1909"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.209.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="218333"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="sntlOk">
      <goal name="decreaseKey&#39;vc.209.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.209.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="223221"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.2.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2810"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.2.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="298368"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.2.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="298339"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.2.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.09" steps="223147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.209.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="217612"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.209.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.32" steps="830207"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.16" steps="224659"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.14" steps="224611"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="2.97" steps="291167"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="5.72" steps="17070"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="0.59" steps="85846"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="20.65" steps="11750"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2709"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="1866"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="2521"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2521"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.209.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="219252"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.209.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.209.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.209.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.90" steps="6273"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.209.0.9.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="1326"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.209.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.80" steps="2757"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="250"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="611"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1210"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="2161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="36.29" steps="76316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="256"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="415"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="3540"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="423"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.220.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.25" steps="427"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="28.16" steps="26037"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.224.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.224.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="738"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="3589"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="28.59" steps="62849"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="597243"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="284"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.232.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.232.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.68" steps="110072"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.232.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="270"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.232.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="15.11" steps="826682"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.232.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.64" steps="104883"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.233.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.233.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="2678"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="2716"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.233.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.08" steps="250219"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="4325"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.233.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="249328"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.233.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.44" steps="1024139"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="255765"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.08" steps="255708"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="655816"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="655816"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.233.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.25" steps="655816"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="8.00" steps="648063"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.95" steps="4965"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="2673"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="3672"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.83" steps="4094"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.233.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.13" steps="251445"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.233.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="120"><result status="valid" time="1.53" steps="190558"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.233.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.66" steps="4399"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="102"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.09" steps="103"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="pos := handle.sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="194"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="131"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="280"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="3.58" steps="17623"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="1109"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="1234"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="2084"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.08" steps="164"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="296"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.11" steps="358"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="174"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="417"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="45.85" steps="110189"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="1440"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.40" steps="1824"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="180"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="180"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="387"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="391"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.39" steps="2093"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.262.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.262.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.92" steps="4189"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.262.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.262.0.1.0" expl="asserted formula" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="0.17" steps="69164"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.262.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="11.32" steps="705241"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.262.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1358"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.263.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.263.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="1845"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1888"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s3 sntl2)">
     <goal name="decreaseKey&#39;vc.263.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="220051"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.2.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.263.0.2.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.263.0.2.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" memlimit="16000"><result status="valid" time="39.36" steps="36521"/></proof>
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.263.0.2.1.0.0.0" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.17" steps="434"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.2.1.0.0.1" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.50" steps="2789"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.2.1.0.0.2" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="11.02" steps="21495"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.2.1.0.0.3" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.18" steps="434"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.263.0.2.1.0.0.4" expl="VC for decreaseKey" proved="true">
        <proof prover="0" memlimit="16000"><result status="valid" time="0.17" steps="434"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s3 pq)">
     <goal name="decreaseKey&#39;vc.263.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="218946"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.263.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.33" steps="830701"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="226147"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="226087"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="513965"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.40" steps="368297"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.263.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="513965"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="19.43" steps="12400"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="2685"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="1845"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2498"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="2498"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s3 rep1)">
     <goal name="decreaseKey&#39;vc.263.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.10" steps="221003"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.263.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.263.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.263.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" memlimit="16000"><result status="valid" time="2.14" steps="6246"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.263.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="2733"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="252"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="615"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="1218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="2159"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="35.65" steps="90183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.31" steps="258"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="251"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="418"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.272.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.59" steps="3533"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="426"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.274.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="434"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="438"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="3567"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.278.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.278.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.37" steps="742"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="3582"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="48.41" steps="26534"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="462"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.30" steps="466"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.22" steps="603408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="286"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.286.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.286.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="5" timelimit="15"><result status="valid" time="0.82" steps="113244"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.286.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.10" steps="272"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.286.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="80"><result status="valid" time="18.47" steps="919739"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="1979"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.287.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.287.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="2654"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="2692"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.287.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="251974"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="4297"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.287.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="250540"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.287.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.44" steps="1031266"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.20" steps="257431"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.20" steps="257384"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="660522"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.24" steps="660522"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.287.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.26" steps="660522"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="32.90" steps="19178"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="4929"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="2649"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.77" steps="3647"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="4066"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.287.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.09" steps="253229"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.287.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="2.26" steps="213866"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.287.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.60" steps="4375"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="pos := self.head" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="assertion" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.16" steps="279"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="332"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="4.44" steps="18249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="1188"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1521"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="133"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="875"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.16" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="139"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="tmp := link(self,pos,handle)" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="1455"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.305.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.305.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="3272"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.305.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s2 (img_rep s2 s2.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.305.0.1.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.07" steps="194479"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.305.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="5.21" steps="436622"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.305.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.12" steps="1139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="tmp := link(self,pos,handle)" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.306.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.306.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="1333"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.24" steps="1366"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s2 sntl2)">
     <goal name="decreaseKey&#39;vc.306.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.14" steps="207948"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.04" steps="4837"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s2 pq)">
     <goal name="decreaseKey&#39;vc.306.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.12" steps="207295"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.306.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.28" steps="755978"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="214273"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.15" steps="214227"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="469013"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="1.75" steps="5736"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.306.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="469013"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="17.06" steps="6128"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.50" steps="105829"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="1741"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1331"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1900"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="1900"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s2 rep1)">
     <goal name="decreaseKey&#39;vc.306.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.14" steps="208867"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.306.0.9.1" expl="VC for decreaseKey" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.306.0.9.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="decreaseKey&#39;vc.306.0.9.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="1.70" steps="4927"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.306.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2384"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="207"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="529"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="type invariant" proved="true">
  <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.29" steps="1055"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.34" steps="1882"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="12.92" steps="32776"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.25" steps="213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="207"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_sibling_framed_by">
   <goal name="decreaseKey&#39;vc.315.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.27" steps="3134"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.317.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.13" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.14" steps="376"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="380"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="1.25" steps="3168"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.321.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.321.0.0" expl="wr ({self} union {self}`rep)`head" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="639"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="3183"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="13.66" steps="11254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="404"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.20" steps="543242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="241"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueuePub">
   <goal name="decreaseKey&#39;vc.329.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.329.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.42" steps="5134"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.329.0.1" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="decreaseKey&#39;vc.329.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="229"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.329.0.1.1" expl="VC for decreaseKey" proved="true">
     <proof prover="6" timelimit="60"><result status="valid" time="9.93" steps="586653"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.329.0.2" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.37" steps="1758"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="pqueueI">
   <goal name="decreaseKey&#39;vc.330.0" expl="VC for decreaseKey" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.330.0.0" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="2373"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.87" steps="130090"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.1" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="2411"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.91" steps="132386"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.2" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(sntlOk s1 sntl2)">
     <goal name="decreaseKey&#39;vc.330.0.2.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.19" steps="239262"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.2.1" expl="VC for decreaseKey" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.75" steps="3744"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.3" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(repOk s1 pq)">
     <goal name="decreaseKey&#39;vc.330.0.3.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="238436"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.3.1" expl="VC for decreaseKey" proved="true">
     <transf name="unfold" proved="true" arg1="repOk">
      <goal name="decreaseKey&#39;vc.330.0.3.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.39" steps="941334"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="245085"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.19" steps="245030"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="610196"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.22" steps="610196"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.330.0.3.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="7"><result status="valid" time="0.23" steps="610196"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.4" expl="VC for decreaseKey" proved="true">
    <proof prover="6" timelimit="80"><result status="valid" time="5.85" steps="515206"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.5" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.79" steps="4424"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.6" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.52" steps="2369"/></proof>
    <proof prover="5" timelimit="15"><result status="valid" time="0.77" steps="129513"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.7" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="3277"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.8" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="0.74" steps="3662"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.9" expl="VC for decreaseKey" proved="true">
    <transf name="assert" proved="true" arg1="(nodeP s1 rep1)">
     <goal name="decreaseKey&#39;vc.330.0.9.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.11" steps="240482"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.330.0.9.1" expl="VC for decreaseKey" proved="true">
     <proof prover="5" timelimit="15"><result status="valid" time="1.26" steps="158194"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.330.0.10" expl="VC for decreaseKey" proved="true">
    <proof prover="0" timelimit="15"><result status="valid" time="1.39" steps="3946"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="78"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="864"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="137"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_head_framed_by">
   <goal name="decreaseKey&#39;vc.335.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="145"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="157"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="173"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="177"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.345.0" expl="VC for decreaseKey" proved="true">
   <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
    <goal name="decreaseKey&#39;vc.345.0.0" expl="VC for decreaseKey" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="decreaseKey&#39;vc.345.0.0.0" expl="VC for decreaseKey" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="decreaseKey&#39;vc.345.0.0.0.0" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="106"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.345.0.0.0.1" expl="VC for decreaseKey" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="1015"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="109"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.347" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.347.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.347.0.0" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.26" steps="1570"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.1" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="2.22" steps="8209"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.347.0.2" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="777"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.348" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.348.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.348.0.0" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="849"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.1" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.14" steps="885"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.2" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="1.55" steps="8834"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.3" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="9.02" steps="35761"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.4" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.65" steps="2307"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.5" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.20" steps="1312"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.6" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.15" steps="848"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.7" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.19" steps="1202"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.8" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.18" steps="1202"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.9" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="10.28" steps="35706"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.348.0.10" expl="postcondition" proved="true">
    <proof prover="0" memlimit="16000"><result status="valid" time="0.31" steps="1531"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_invariant_PqueueR" proved="true">
 <transf name="intros" proved="true" arg1="s,t,pi">
  <goal name="boundary_frames_invariant_PqueueR.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="boundary_frames_invariant_PqueueR.0.0" proved="true">
   <transf name="unfold" proved="true" arg1="pqueueI">
    <goal name="boundary_frames_invariant_PqueueR.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.0" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="3603"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.1" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="3.26" steps="10640"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.2" proved="true">
     <transf name="assert" proved="true" arg1="(sntlOk s sntl2)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.2.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="2.19" steps="8797"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.2.1" proved="true">
      <proof prover="0" timelimit="15"><result status="valid" time="4.66" steps="21606"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.3" proved="true">
     <transf name="assert" proved="true" arg1="(repOk s pq)">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.06" steps="205199"/></proof>
      </goal>
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1" proved="true">
      <transf name="unfold" proved="true" arg1="repOk" arg2="in" arg3="h">
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.18" steps="785"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.1" expl="destruct premise" proved="true">
        <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="20"/></proof>
        </goal>
        <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2" proved="true">
        <transf name="unfold" proved="true" arg1="repOk">
         <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.0" proved="true">
          <proof prover="5" timelimit="15"><result status="valid" time="6.89" steps="558691"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.1" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="2.54" steps="10455"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.2" proved="true">
          <proof prover="0" timelimit="15"><result status="valid" time="1.99" steps="8044"/></proof>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3" proved="true">
          <transf name="assert" proved="true" arg1="(agree_child s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.0" expl="asserted formula" proved="true">
           <proof prover="7"><result status="valid" time="0.06" steps="182947"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1" proved="true">
           <transf name="unfold" proved="true" arg1="agree_child" arg2="in" arg3="h">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0" proved="true">
            <transf name="destruct" proved="true" arg1="h">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0" proved="true">
             <transf name="instantiate" proved="true" arg1="h" arg2="n">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0" proved="true">
              <transf name="assert" proved="true" arg1="(idRef pi s.heap.child[n] t.heap.child[n])">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="11.63" steps="38822"/></proof>
               </goal>
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.3.1.0.0.0.1" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="23.20" steps="92791"/></proof>
               <proof prover="5" timelimit="15"><result status="valid" time="9.16" steps="991834"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4" proved="true">
          <transf name="assert" proved="true" arg1="(idRef pi s.heap.sibling[n] t.heap.sibling[n])">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(agree_sibling s t pi (union (img_rep s s.pool) s.pool))">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.0" expl="asserted formula" proved="true">
            <proof prover="7"><result status="valid" time="0.06" steps="182947"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="agree_sibling" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="15"><result status="valid" time="7.09" steps="32235"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.4.1" proved="true">
           <proof prover="5" timelimit="15"><result status="valid" time="5.85" steps="708992"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5" proved="true">
          <transf name="assert" proved="true" arg1="(agree_prev s t pi (union (img_rep s s.pool) s.pool))">
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.0" expl="asserted formula" proved="true">
           <proof prover="7"><result status="valid" time="0.06" steps="182947"/></proof>
           </goal>
           <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1" proved="true">
           <transf name="assert" proved="true" arg1="(pi.lor[n] = n)">
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="15"><result status="valid" time="3.24" steps="12707"/></proof>
            </goal>
            <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1" proved="true">
            <transf name="unfold" proved="true" arg1="agree_prev" arg2="in" arg3="h1">
             <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0" proved="true">
             <transf name="destruct" proved="true" arg1="h1">
              <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0" proved="true">
              <transf name="instantiate" proved="true" arg1="h1" arg2="n">
               <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0" proved="true">
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="2.89" steps="12103"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.1" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="5.79" steps="23321"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.2" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="15"><result status="valid" time="4.06" steps="15012"/></proof>
                </goal>
                <goal name="boundary_frames_invariant_PqueueR.0.0.0.3.1.0.2.0.5.1.1.0.0.0.3" proved="true">
                <proof prover="5" timelimit="15"><result status="valid" time="4.39" steps="393127"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.4" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.85" steps="4026"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.5" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="6.83" steps="31854"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.6" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="3422"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.7" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="0.78" steps="3663"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.8" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.51" steps="6610"/></proof>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.9" proved="true">
     <transf name="unfold" proved="true" arg1="nodeP">
      <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="boundary_frames_invariant_PqueueR.0.0.0.9.0.0" proved="true">
       <proof prover="0" timelimit="15"><result status="valid" time="20.78" steps="81155"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="boundary_frames_invariant_PqueueR.0.0.0.10" proved="true">
     <proof prover="0" timelimit="15"><result status="valid" time="1.71" steps="7916"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PQUEUE_REL" proved="true">
 <goal name="isEmpty&#39;vc" expl="VC for isEmpty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isEmpty&#39;vc.0" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="132"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.1" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="137"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="56"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.15" steps="635"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.64" steps="11513"/></proof>
  </goal>
  <goal name="isEmpty&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="findMin&#39;vc" expl="VC for findMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="findMin&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="437"/></proof>
  </goal>
  <goal name="findMin&#39;vc.1" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="118"/></proof>
  </goal>
  <goal name="findMin&#39;vc.2" expl="result := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="findMin&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.08" steps="342"/></proof>
  </goal>
  <goal name="findMin&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.11" steps="370"/></proof>
  </goal>
  <goal name="findMin&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.03" steps="64"/></proof>
  </goal>
  <goal name="findMin&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.14" steps="983"/></proof>
  </goal>
  <goal name="findMin&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="findMin&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="findMin&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.18" steps="11932"/></proof>
   </goal>
   <goal name="findMin&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="8.65" steps="43941"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findMin&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="findMin&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.05" steps="76"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="128"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="140"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.07" steps="140"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.04" steps="140"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.09" steps="178"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="Node(result,k,t)" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.06" steps="178"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.19" steps="294"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.22" steps="294"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="664"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.44" steps="674"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.23" steps="312"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="313"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="805"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="rep := self.rep" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="817"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="935"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="hd := self.head" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="952"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.21" steps="5589"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="406"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="463"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="465"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.43" steps="1033"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="2824"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.82" steps="2811"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.23.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.23" steps="5400"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.40" steps="439"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.24" steps="5410"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.27" steps="439"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.78" steps="13677"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="823"/></proof>
   </goal>
   <goal name="insert&#39;vc.23.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.75" steps="10283"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="471"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="471"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="1040"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.27.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.23" steps="4889"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.21" steps="4871"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.24" steps="4889"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="443"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="443"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.87" steps="13751"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.75" steps="13751"/></proof>
   </goal>
   <goal name="insert&#39;vc.27.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.86" steps="13751"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.83" steps="2857"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.29.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.28" steps="4907"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="443"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.30" steps="4888"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.28" steps="443"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.85" steps="14007"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="823"/></proof>
   </goal>
   <goal name="insert&#39;vc.29.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="2.86" steps="10012"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="477"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
   <goal name="insert&#39;vc.31.0" expl="true case (assertion)" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="490"/></proof>
   </goal>
   <goal name="insert&#39;vc.31.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
    <goal name="insert&#39;vc.31.1.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.85" steps="12505"/></proof>
    </goal>
    <goal name="insert&#39;vc.31.1.1" expl="false case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s4 r_s4 pi111 l_pq r_pq)">
     <goal name="insert&#39;vc.31.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="1182"/></proof>
     </goal>
     <goal name="insert&#39;vc.31.1.1.1" expl="false case (assertion)" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.86" steps="24946"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.32" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.32.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.32.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="449"/></proof>
    </goal>
    <goal name="insert&#39;vc.32.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="444"/></proof>
    </goal>
    <goal name="insert&#39;vc.32.0.2" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.32.0.2.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.32.0.2.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.97" steps="17718"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.1" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.03" steps="22205"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.2" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.46" steps="17722"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.3" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="30.90" steps="86851"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.4" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="451"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.2.0.5" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.29" steps="451"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="462"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.3.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="Assert5">
      <goal name="insert&#39;vc.32.0.3.1.0" expl="false case" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="insert&#39;vc.32.0.3.1.0.0" expl="false case" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="insert&#39;vc.32.0.3.1.0.0.0" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(l_s4.heap.key[l_n] = r_s4.heap.key[r_n])">
         <goal name="insert&#39;vc.32.0.3.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Assert11">
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80"><result status="valid" time="0.19" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80"><result status="valid" time="0.16" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="470"/></proof>
          <proof prover="6" timelimit="80"><result status="valid" time="0.19" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="470"/></proof>
          <proof prover="6" timelimit="80"><result status="valid" time="0.18" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="470"/></proof>
          <proof prover="6" timelimit="80"><result status="valid" time="0.21" steps="73255"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.03" steps="7176"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.34" steps="11602"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.54" steps="6837"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.46" steps="10282"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.9" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.33" steps="11578"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.10" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.60" steps="6900"/></proof>
          </goal>
          <goal name="insert&#39;vc.32.0.3.1.0.0.0.0.11" expl="apply premises" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.66" steps="16242"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.32.0.3.1.0.0.0.1" expl="false case" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.76" steps="27856"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="462"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.79" steps="17580"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.67" steps="14129"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="462"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.75" steps="17580"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="9.40" steps="39731"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.32.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="462"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.6.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.32.0.6.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.83" steps="17580"/></proof>
      </goal>
      <goal name="insert&#39;vc.32.0.6.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="17.92" steps="72178"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.32.0.7" expl="VC for insert" proved="true">
    <transf name="assert" proved="true" arg1="(l_n &lt;&gt; l_result /\ r_n &lt;&gt; r_result -&gt; idRef pi111 l_n r_n)">
     <goal name="insert&#39;vc.32.0.7.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="4.42" steps="12171"/></proof>
     </goal>
     <goal name="insert&#39;vc.32.0.7.1" expl="VC for insert" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="9.61" steps="39385"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.33" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.57" steps="1121"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.59" steps="1131"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="487"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="541"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="1161"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.89" steps="3877"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="3120"/></proof>
  </goal>
  <goal name="insert&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.89" steps="33519"/></proof>
  </goal>
  <goal name="insert&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="547"/></proof>
  </goal>
  <goal name="insert&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="547"/></proof>
  </goal>
  <goal name="insert&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.55" steps="1166"/></proof>
  </goal>
  <goal name="insert&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.88" steps="3877"/></proof>
  </goal>
  <goal name="insert&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="3170"/></proof>
  </goal>
  <goal name="insert&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="4.79" steps="29863"/></proof>
  </goal>
  <goal name="insert&#39;vc.47" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="553"/></proof>
  </goal>
  <goal name="insert&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1261"/></proof>
  </goal>
  <goal name="insert&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1267"/></proof>
  </goal>
  <goal name="insert&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.03" steps="4003"/></proof>
  </goal>
  <goal name="insert&#39;vc.51" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="958"/></proof>
  </goal>
  <goal name="insert&#39;vc.52" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="962"/></proof>
  </goal>
  <goal name="insert&#39;vc.53" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="966"/></proof>
  </goal>
  <goal name="insert&#39;vc.54" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.54.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.76" steps="1383"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.55" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.55.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="1387"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.56" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.56.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.77" steps="1358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.57" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.20" steps="6959"/></proof>
  </goal>
  <goal name="insert&#39;vc.58" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.58.0" expl="wr ({self} union {self}`rep)`rep" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="1379"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.59" expl="wr ({self}`rep union {})`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.59.0" expl="wr ({self}`rep union {})`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.50" steps="10341"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.60" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.60.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="1374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.61" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1016"/></proof>
  </goal>
  <goal name="insert&#39;vc.62" expl="wr ({self}`rep union {})`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.62.0" expl="wr ({self}`rep union {})`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.48" steps="9706"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.63" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.48" steps="1024"/></proof>
  </goal>
  <goal name="insert&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.26" steps="588"/></proof>
  </goal>
  <goal name="insert&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.90" steps="2667"/></proof>
  </goal>
  <goal name="insert&#39;vc.66" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="1034"/></proof>
  </goal>
  <goal name="insert&#39;vc.67" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1038"/></proof>
  </goal>
  <goal name="insert&#39;vc.68" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="1042"/></proof>
  </goal>
  <goal name="insert&#39;vc.69" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.69.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.54" steps="11176"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.70" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.70.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="11187"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.71" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.71.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.80" steps="1436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.72" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.72" steps="16980"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.72.0" expl="wr ({self}`rep union {})`child" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.63" steps="11990"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.73" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.84" steps="10344"/></proof>
  </goal>
  <goal name="insert&#39;vc.74" expl="wr ({self}`rep union {})`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.74.0" expl="wr ({self}`rep union {})`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.49" steps="11265"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.75" expl="wr ({self} union {self}`rep)`size" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.75.0" expl="wr ({self} union {self}`rep)`size" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.82" steps="1452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.76" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1092"/></proof>
  </goal>
  <goal name="insert&#39;vc.77" expl="wr ({self}`rep union {})`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.77.0" expl="wr ({self}`rep union {})`key" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.45" steps="10382"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.78" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1100"/></proof>
  </goal>
  <goal name="insert&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.26" steps="616"/></proof>
  </goal>
  <goal name="insert&#39;vc.80" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="okRefperm">
   <goal name="insert&#39;vc.80.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.80.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="10.80" steps="24862"/></proof>
    </goal>
    <goal name="insert&#39;vc.80.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="9.37" steps="23083"/></proof>
    </goal>
    <goal name="insert&#39;vc.80.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.62" steps="19289"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.81" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.81.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.81.0.0" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.81.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.81.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="28.33" steps="59029"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="31.36" steps="55295"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="10.46" steps="473867"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.79" steps="56645"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="55.08" steps="4847849"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.4" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.33" steps="585"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="0.25" steps="68756"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.0.0.5" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.34" steps="585"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="0.26" steps="68756"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.81.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="insert&#39;vc.81.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="insert&#39;vc.81.0.1.0.0" expl="true case (postcondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="insert&#39;vc.81.0.1.0.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.38" steps="603"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="0.25" steps="598"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.2" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="6.88" steps="249988"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.3" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="12.05" steps="305867"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.4" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="12.29" steps="309068"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.5" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="13.12" steps="337737"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.6" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="12.95" steps="337764"/></proof>
       </goal>
       <goal name="insert&#39;vc.81.0.1.0.0.7" expl="postcondition" proved="true">
       <proof prover="6" timelimit="120"><result status="valid" time="12.70" steps="337734"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="insert&#39;vc.81.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
      <goal name="insert&#39;vc.81.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.66" steps="14716"/></proof>
      </goal>
      <goal name="insert&#39;vc.81.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="insert&#39;vc.81.0.1.1.1.0" expl="false case (postcondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.81.0.1.1.1.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(l_s5.heap.size[l_pq] = r_s5.heap.size[r_pq])">
         <goal name="insert&#39;vc.81.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.81.0.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.80" steps="1476"/></proof>
          </goal>
          <goal name="insert&#39;vc.81.0.1.1.1.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.59" steps="45689"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.0.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="120" memlimit="16000"><result status="valid" time="2.21" steps="10844"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.1" expl="postcondition" proved="true">
        <proof prover="6" timelimit="120"><result status="valid" time="0.66" steps="108642"/></proof>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.2" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(idRgn pi111 (rgnSubK l_s5.heap.rep[l_pq] (alloct l_s5) Node) (rgnSubK r_s5.heap.rep[r_pq] (alloct r_s5) Node))">
         <goal name="insert&#39;vc.81.0.1.1.1.0.2.0" expl="asserted formula" proved="true">
         <proof prover="6" timelimit="80"><result status="valid" time="10.16" steps="341046"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.2.1" expl="postcondition" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.0" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.91" steps="23300"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.1" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.56" steps="28025"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.2" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.60" steps="24277"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3" expl="VC for insert" proved="true">
           <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
            <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0" expl="VC for insert" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.0" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.64" steps="23592"/></proof>
             </goal>
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.1" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.96" steps="24642"/></proof>
             <proof prover="6" timelimit="80"><result status="valid" time="72.91" steps="6950723"/></proof>
             </goal>
             <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.3.0.2" expl="VC for insert" proved="true">
             <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.09" steps="22919"/></proof>
             <proof prover="6" timelimit="80"><result status="valid" time="21.60" steps="873339"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.4" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="609"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.2.1.0.5" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.37" steps="609"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.3" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.3.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.21" steps="48646"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.3.1" expl="postcondition" proved="true">
         <transf name="assert" proved="true" arg1="(l_s5.heap.key[l_n] = r_s5.heap.key[r_n])">
          <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq)">
           <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.54" steps="1529"/></proof>
           </goal>
           <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.0.1" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.80" steps="65554"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="insert&#39;vc.81.0.1.1.1.0.3.1.1" expl="postcondition" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.40" steps="22597"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.4" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.4.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.86" steps="50786"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.4.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.84" steps="61400"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.5" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.5.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.79" steps="50786"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.5.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.25" steps="84560"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.6" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.6.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.21" steps="50786"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.6.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.21" steps="81476"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="insert&#39;vc.81.0.1.1.1.0.7" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s5 r_s5 pi111 l_pq r_pq /\ idRef pi111 l_n r_n)">
         <goal name="insert&#39;vc.81.0.1.1.1.0.7.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.34" steps="50786"/></proof>
         </goal>
         <goal name="insert&#39;vc.81.0.1.1.1.0.7.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="24.64" steps="70795"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.81.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="578"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="578"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="578"/></proof>
    </goal>
    <goal name="insert&#39;vc.81.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="578"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.82" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.82.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="65.98" steps="35926"/></proof>
   </goal>
   <goal name="insert&#39;vc.82.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="67.54" steps="35926"/></proof>
   </goal>
   <goal name="insert&#39;vc.82.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem1 n (r_s.heap.rep[r_self])) -&gt; r_s5.heap.tag[n] = r_s.heap.tag[n])">
    <goal name="insert&#39;vc.82.2.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="588"/></proof>
    </goal>
    <goal name="insert&#39;vc.82.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="65.55" steps="31790"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.82.3" expl="postcondition" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="66.34" steps="31790"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="620"/></proof>
  </goal>
  <goal name="insert&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="620"/></proof>
  </goal>
  <goal name="insert&#39;vc.85" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="620"/></proof>
  </goal>
  <goal name="insert&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="620"/></proof>
  </goal>
  <goal name="insert&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.36" steps="622"/></proof>
  </goal>
  <goal name="insert&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="885"/></proof>
  </goal>
  <goal name="insert&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.51" steps="895"/></proof>
  </goal>
  <goal name="insert&#39;vc.90" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.50" steps="6492"/></proof>
  </goal>
  <goal name="insert&#39;vc.91" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.91.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.91.0.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.91.0.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.91.0.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.91.0.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="598"/></proof>
       </goal>
       <goal name="insert&#39;vc.91.0.0.0.0.1" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.91.0.0.0.0.1.0" expl="VC for insert" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="insert&#39;vc.91.0.0.0.0.1.0.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="10.91" steps="29339"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.91.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="insert&#39;vc.91.1.0" expl="VC for insert" proved="true">
    <transf name="rewrite_list" proved="true" arg1="union_def,union_def">
     <goal name="insert&#39;vc.91.1.0.0" expl="VC for insert" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.91.1.0.0.0" expl="VC for insert" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="insert&#39;vc.91.1.0.0.0.0" expl="VC for insert" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="598"/></proof>
       </goal>
       <goal name="insert&#39;vc.91.1.0.0.0.1" expl="VC for insert" proved="true">
       <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
        <goal name="insert&#39;vc.91.1.0.0.0.1.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="7.69" steps="21915"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="640"/></proof>
  </goal>
  <goal name="insert&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="411"/></proof>
  </goal>
  <goal name="insert&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="951"/></proof>
  </goal>
  <goal name="insert&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.56" steps="2644"/></proof>
  </goal>
  <goal name="insert&#39;vc.96" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="2569"/></proof>
  </goal>
  <goal name="insert&#39;vc.97" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.97.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.21" steps="4510"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="385"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="385"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="385"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="750"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="750"/></proof>
   </goal>
   <goal name="insert&#39;vc.97.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.78" steps="10569"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.30" steps="417"/></proof>
  </goal>
  <goal name="insert&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="417"/></proof>
  </goal>
  <goal name="insert&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="960"/></proof>
  </goal>
  <goal name="insert&#39;vc.101" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.101.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.99" steps="4656"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.98" steps="4639"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="1.02" steps="4656"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="389"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="0.21" steps="389"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="5.90" steps="24318"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.17" steps="14235"/></proof>
   </goal>
   <goal name="insert&#39;vc.101.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="15"><result status="valid" time="3.32" steps="14235"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.102" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="2617"/></proof>
  </goal>
  <goal name="insert&#39;vc.103" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.103.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.16" steps="4658"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="389"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="389"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="389"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="753"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="753"/></proof>
   </goal>
   <goal name="insert&#39;vc.103.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.03" steps="10902"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.104" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.29" steps="423"/></proof>
  </goal>
  <goal name="insert&#39;vc.105" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coupling0">
   <goal name="insert&#39;vc.105.0" expl="VC for insert" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.105.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="395"/></proof>
    </goal>
    <goal name="insert&#39;vc.105.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="3248"/></proof>
    </goal>
    <goal name="insert&#39;vc.105.0.2" expl="VC for insert" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.105.0.2.0" expl="VC for insert" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.105.0.2.0.0" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.65" steps="19983"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.1" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.03" steps="23584"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.2" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.64" steps="20023"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.3" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="15.62" steps="54056"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.4" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="397"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.2.0.5" expl="VC for insert" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="397"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.3" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.3.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="408"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.3.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="5.96" steps="17751"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.3.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.61" steps="12301"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.4" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.4.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="408"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.4.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.02" steps="17751"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.4.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="3.64" steps="12301"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.5" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.5.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="408"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.5.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.5.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.02" steps="17751"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.5.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="7.57" steps="29544"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.6" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.6.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="408"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.6.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.6.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.05" steps="17751"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.6.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="15.40" steps="54965"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.105.0.7" expl="VC for insert" proved="true">
    <transf name="case" proved="true" arg1="(l_n = l_result /\ r_n = r_result)">
     <goal name="insert&#39;vc.105.0.7.0" expl="true case" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="408"/></proof>
     </goal>
     <goal name="insert&#39;vc.105.0.7.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
      <goal name="insert&#39;vc.105.0.7.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="6.00" steps="17751"/></proof>
      </goal>
      <goal name="insert&#39;vc.105.0.7.1.1" expl="false case" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="7.60" steps="29549"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.106" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.50" steps="1015"/></proof>
  </goal>
  <goal name="insert&#39;vc.107" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="430"/></proof>
  </goal>
  <goal name="insert&#39;vc.108" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="2842"/></proof>
  </goal>
  <goal name="insert&#39;vc.109" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.20" steps="432"/></proof>
  </goal>
  <goal name="insert&#39;vc.110" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="1023"/></proof>
  </goal>
  <goal name="insert&#39;vc.111" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="434"/></proof>
  </goal>
  <goal name="insert&#39;vc.112" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.52" steps="1034"/></proof>
  </goal>
  <goal name="insert&#39;vc.113" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.31" steps="436"/></proof>
  </goal>
  <goal name="insert&#39;vc.114" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="3878"/></proof>
  </goal>
  <goal name="insert&#39;vc.115" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.49" steps="1070"/></proof>
  </goal>
  <goal name="insert&#39;vc.116" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.34" steps="1044"/></proof>
  </goal>
  <goal name="insert&#39;vc.117" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="442"/></proof>
  </goal>
  <goal name="insert&#39;vc.118" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.118.0" expl="precondition" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="insert&#39;vc.118.0.0" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.57" steps="11371"/></proof>
    </goal>
    <goal name="insert&#39;vc.118.0.1" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.61" steps="11373"/></proof>
    </goal>
    <goal name="insert&#39;vc.118.0.2" expl="VC for insert" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.25" steps="7201"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.119" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="444"/></proof>
  </goal>
  <goal name="insert&#39;vc.120" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.00" steps="4438"/></proof>
  </goal>
  <goal name="insert&#39;vc.121" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.53" steps="1110"/></proof>
  </goal>
  <goal name="insert&#39;vc.122" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.122.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.122.0.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.122.0.0.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="insert&#39;vc.122.0.0.0.0" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.48" steps="23300"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.1" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.09" steps="26266"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.2" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.41" steps="23302"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.3" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
       <goal name="insert&#39;vc.122.0.0.0.3.0" expl="VC for insert" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.122.0.0.0.3.0.0" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.56" steps="24568"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.0.0.3.0.1" expl="VC for insert" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.74" steps="24239"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.0.0.3.0.2" expl="VC for insert" proved="true">
        <proof prover="6" timelimit="80"><result status="valid" time="10.10" steps="516240"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.4" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="419"/></proof>
      </goal>
      <goal name="insert&#39;vc.122.0.0.0.5" expl="precondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="419"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.122.0.1" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="insert&#39;vc.122.0.1.0" expl="precondition" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="insert&#39;vc.122.0.1.0.0" expl="precondition" proved="true">
      <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
       <goal name="insert&#39;vc.122.0.1.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.83" steps="12708"/></proof>
       </goal>
       <goal name="insert&#39;vc.122.0.1.0.0.1" expl="false case (precondition)" proved="true">
       <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self /\ idRef pi111 l_pq r_pq)">
        <goal name="insert&#39;vc.122.0.1.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="30"><result status="valid" time="5.13" steps="17269"/></proof>
        </goal>
        <goal name="insert&#39;vc.122.0.1.0.0.1.1" expl="false case (precondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.0" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="30"><result status="valid" time="1.43" steps="5066"/></proof>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.1" expl="VC for insert" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.11" steps="45826"/></proof>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.2" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRgn pi111 (rgnSubK l_s3.heap.rep[l_pq] l_s3.alloct Node) (rgnSubK r_s3.heap.rep[r_pq] r_s3.alloct Node))">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.99" steps="5045"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.2.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="38.95" steps="143808"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.3" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.3.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.58" steps="15436"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.3.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="16.89" steps="48565"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.4" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.4.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.57" steps="15436"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.4.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="16.89" steps="48565"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.5" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.59" steps="15436"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1" expl="VC for insert" proved="true">
          <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
           <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="1189"/></proof>
           </goal>
           <goal name="insert&#39;vc.122.0.1.0.0.1.1.5.1.1" expl="VC for insert" proved="true">
           <proof prover="0" timelimit="30"><result status="valid" time="14.83" steps="52575"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.6" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.6.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.64" steps="15493"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.6.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="30.92" steps="121666"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="insert&#39;vc.122.0.1.0.0.1.1.7" expl="VC for insert" proved="true">
         <transf name="assert" proved="true" arg1="(idRef pi111 l_n r_n /\ coupling0 l_s3 r_s3 pi111 l_pq r_pq)">
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.7.0" expl="asserted formula" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="5.66" steps="15493"/></proof>
          </goal>
          <goal name="insert&#39;vc.122.0.1.0.0.1.1.7.1" expl="VC for insert" proved="true">
          <proof prover="0" timelimit="30"><result status="valid" time="13.56" steps="53912"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.122.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="412"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="412"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="412"/></proof>
    </goal>
    <goal name="insert&#39;vc.122.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="412"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.123" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="450"/></proof>
  </goal>
  <goal name="insert&#39;vc.124" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.32" steps="450"/></proof>
  </goal>
  <goal name="insert&#39;vc.125" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="3.23" steps="17994"/></proof>
  </goal>
  <goal name="insert&#39;vc.126" expl="precondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.33" steps="458"/></proof>
  </goal>
  <goal name="insert&#39;vc.127" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.73" steps="1398"/></proof>
  </goal>
  <goal name="insert&#39;vc.128" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.76" steps="1408"/></proof>
  </goal>
  <goal name="insert&#39;vc.129" expl="assertion" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.38" steps="589"/></proof>
  </goal>
  <goal name="insert&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="643"/></proof>
  </goal>
  <goal name="insert&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.71" steps="1558"/></proof>
  </goal>
  <goal name="insert&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.97" steps="3075"/></proof>
  </goal>
  <goal name="insert&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.59" steps="6103"/></proof>
  </goal>
  <goal name="insert&#39;vc.134" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.134.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="609"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.96" steps="11861"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.86" steps="11953"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="609"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="25.49" steps="102575"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="1237"/></proof>
   </goal>
   <goal name="insert&#39;vc.134.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.74" steps="1566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.61" steps="649"/></proof>
  </goal>
  <goal name="insert&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="649"/></proof>
  </goal>
  <goal name="insert&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.72" steps="1565"/></proof>
  </goal>
  <goal name="insert&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.96" steps="3091"/></proof>
  </goal>
  <goal name="insert&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.75" steps="6183"/></proof>
  </goal>
  <goal name="insert&#39;vc.140" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.140.0" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.46" steps="13547"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="3.38" steps="13628"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.3" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="43.51" steps="147988"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.5" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="insert&#39;vc.140.6" expl="type invariant" proved="true">
   <proof prover="2" timelimit="30"><result status="valid" time="0.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="655"/></proof>
  </goal>
  <goal name="insert&#39;vc.142" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.65" steps="1542"/></proof>
  </goal>
  <goal name="insert&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.67" steps="1548"/></proof>
  </goal>
  <goal name="insert&#39;vc.144" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="6.27" steps="26748"/></proof>
  </goal>
  <goal name="insert&#39;vc.145" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1237"/></proof>
  </goal>
  <goal name="insert&#39;vc.146" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.60" steps="1241"/></proof>
  </goal>
  <goal name="insert&#39;vc.147" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1245"/></proof>
  </goal>
  <goal name="insert&#39;vc.148" expl="wr ({self}`rep union {})`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.31" steps="80765"/></proof>
  </goal>
  <goal name="insert&#39;vc.149" expl="wr ({self}`rep union {})`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.36" steps="65351"/></proof>
  </goal>
  <goal name="insert&#39;vc.150" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="22.76" steps="62376"/></proof>
  </goal>
  <goal name="insert&#39;vc.151" expl="wr ({self}`rep union {})`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="26.62" steps="69152"/></proof>
  </goal>
  <goal name="insert&#39;vc.152" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="52.66" steps="139472"/></proof>
  <proof prover="6" timelimit="80"><result status="valid" time="13.14" steps="575708"/></proof>
  </goal>
  <goal name="insert&#39;vc.153" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.98" steps="64369"/></proof>
  </goal>
  <goal name="insert&#39;vc.154" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.63" steps="58787"/></proof>
  </goal>
  <goal name="insert&#39;vc.155" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1295"/></proof>
  </goal>
  <goal name="insert&#39;vc.156" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.82" steps="60987"/></proof>
  </goal>
  <goal name="insert&#39;vc.157" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1303"/></proof>
  </goal>
  <goal name="insert&#39;vc.158" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.45" steps="688"/></proof>
  </goal>
  <goal name="insert&#39;vc.159" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="7.63" steps="31078"/></proof>
  </goal>
  <goal name="insert&#39;vc.160" expl="wr {self}`rep`slots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1313"/></proof>
  </goal>
  <goal name="insert&#39;vc.161" expl="wr {self}`rep`dSlots" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="1317"/></proof>
  </goal>
  <goal name="insert&#39;vc.162" expl="wr {self}`rep`sntl" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.64" steps="1321"/></proof>
  </goal>
  <goal name="insert&#39;vc.163" expl="wr ({self}`rep union {})`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.163.0" expl="wr ({self}`rep union {})`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.163.0.0" expl="wr ({self}`rep union {})`sibling" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.27" steps="23878"/></proof>
    <transf name="assert" proved="true" arg1="(not (mem1 p r_s.heap.rep[r_self]))">
     <goal name="insert&#39;vc.163.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.62" steps="709"/></proof>
     </goal>
     <goal name="insert&#39;vc.163.0.0.1" expl="wr ({self}`rep union {})`sibling" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.73" steps="20774"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.164" expl="wr ({self}`rep union {})`prev" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.164.0" expl="wr ({self}`rep union {})`prev" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.164.0.0" expl="wr ({self}`rep union {})`prev" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.27" steps="21745"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.165" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="50.93" steps="102293"/></proof>
  </goal>
  <goal name="insert&#39;vc.166" expl="wr ({self}`rep union {})`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.166.0" expl="wr ({self}`rep union {})`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="insert&#39;vc.166.0.0" expl="wr ({self}`rep union {})`child" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.37" steps="19535"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.167" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="6" timelimit="80"><result status="valid" time="13.93" steps="595329"/></proof>
  </goal>
  <goal name="insert&#39;vc.168" expl="wr ({self}`rep union {})`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="64.13" steps="140486"/></proof>
  </goal>
  <goal name="insert&#39;vc.169" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.90" steps="62304"/></proof>
  </goal>
  <goal name="insert&#39;vc.170" expl="wr {self}`rep`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="1371"/></proof>
  </goal>
  <goal name="insert&#39;vc.171" expl="wr ({self}`rep union {})`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="37.04" steps="72460"/></proof>
  </goal>
  <goal name="insert&#39;vc.172" expl="wr {self}`rep`dLength" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.62" steps="1379"/></proof>
  </goal>
  <goal name="insert&#39;vc.173" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.35" steps="716"/></proof>
  </goal>
  <goal name="insert&#39;vc.174" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="13.56" steps="46472"/></proof>
  </goal>
  <goal name="insert&#39;vc.175" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.175.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.175.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="681"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="insert&#39;vc.175.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi11 l_self r_self)">
      <goal name="insert&#39;vc.175.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.74" steps="1764"/></proof>
      </goal>
      <goal name="insert&#39;vc.175.0.1.0.1" expl="true case (postcondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="insert&#39;vc.175.0.1.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="insert&#39;vc.175.0.1.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.40" steps="703"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.52" steps="105809"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.1" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.39" steps="704"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.58" steps="109616"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.2" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.08" steps="4609"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="0.70" steps="113580"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.3" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.55" steps="26162"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="15.93" steps="415695"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.4" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.75" steps="26162"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="15.59" steps="418283"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.5" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.43" steps="30547"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="4.31" steps="344166"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.6" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.29" steps="30544"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="4.23" steps="344182"/></proof>
        </goal>
        <goal name="insert&#39;vc.175.0.1.0.1.0.7" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.35" steps="30526"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="4.51" steps="360392"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="insert&#39;vc.175.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(l_pq &lt;&gt; l_self /\ r_pq &lt;&gt; r_self)">
      <goal name="insert&#39;vc.175.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.83" steps="28750"/></proof>
      </goal>
      <goal name="insert&#39;vc.175.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi11 l_pq r_pq)">
       <goal name="insert&#39;vc.175.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.58" steps="1748"/></proof>
       </goal>
       <goal name="insert&#39;vc.175.0.1.1.1.1" expl="false case (postcondition)" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="insert&#39;vc.175.0.1.1.1.1.0" expl="false case (postcondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.0" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.86" steps="18714"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.40" steps="399920"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.80" steps="27111"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="7.77" steps="460161"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.2" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.06" steps="4291"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="0.70" steps="112419"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.3" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.20" steps="27046"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="20.57" steps="543114"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.4" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.29" steps="27082"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="20.08" steps="546496"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.5" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.58" steps="32324"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.84" steps="485471"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.6" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.45" steps="31117"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.68" steps="485314"/></proof>
         </goal>
         <goal name="insert&#39;vc.175.0.1.1.1.1.0.7" expl="postcondition" proved="true">
         <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.62" steps="32306"/></proof>
         <proof prover="6" timelimit="80"><result status="valid" time="6.54" steps="485246"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.175.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="674"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="674"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="674"/></proof>
    </goal>
    <goal name="insert&#39;vc.175.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="674"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.176" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert&#39;vc.176.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.tag[n] = l_s5.heap.tag[n])">
    <goal name="insert&#39;vc.176.0.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="46.27" steps="118155"/></proof>
    </goal>
    <goal name="insert&#39;vc.176.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.94" steps="17677"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l_s4.heap.key[n] = l_s5.heap.key[n])">
    <goal name="insert&#39;vc.176.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="l_result,0">
     <goal name="insert&#39;vc.176.1.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="684"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.1.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="17.75" steps="56184"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.1.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="684"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.89" steps="17677"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.tag[n] = r_s5.heap.tag[n])">
    <goal name="insert&#39;vc.176.2.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.176.2.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="684"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.2.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="19.73" steps="58418"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.2.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="684"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.2.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.38" steps="15495"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="insert&#39;vc.176.3" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_s4.heap.key[n] = r_s5.heap.key[n])">
    <goal name="insert&#39;vc.176.3.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="add_map_others_unchanged" arg2="with" arg3="r_result,0">
     <goal name="insert&#39;vc.176.3.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="684"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.3.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="20.05" steps="58430"/></proof>
     </goal>
     <goal name="insert&#39;vc.176.3.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="684"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.176.3.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="4.37" steps="15495"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.177" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="720"/></proof>
  </goal>
  <goal name="insert&#39;vc.178" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.45" steps="720"/></proof>
  </goal>
  <goal name="insert&#39;vc.179" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="720"/></proof>
  </goal>
  <goal name="insert&#39;vc.180" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="720"/></proof>
  </goal>
  <goal name="insert&#39;vc.181" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.47" steps="722"/></proof>
  </goal>
  <goal name="insert&#39;vc.182" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1075"/></proof>
  </goal>
  <goal name="insert&#39;vc.183" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.63" steps="1085"/></proof>
  </goal>
  <goal name="insert&#39;vc.184" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="1.68" steps="5803"/></proof>
  </goal>
  <goal name="insert&#39;vc.185" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="insert&#39;vc.185.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="insert&#39;vc.185.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.185.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.185.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.47" steps="701"/></proof>
      </goal>
      <goal name="insert&#39;vc.185.0.0.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.185.0.0.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="30.49" steps="59861"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="insert&#39;vc.185.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="union_def" arg2="in" arg3="H">
     <goal name="insert&#39;vc.185.0.1.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="insert&#39;vc.185.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="0.09" steps="423592"/></proof>
      </goal>
      <goal name="insert&#39;vc.185.0.1.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="img_rep_ax" arg2="in" arg3="H">
       <goal name="insert&#39;vc.185.0.1.0.1.0" expl="postcondition" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="insert&#39;vc.185.0.1.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="37.98" steps="81692"/></proof>
        <proof prover="6" timelimit="80"><result status="valid" time="55.33" steps="3125137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="insert&#39;vc.186" expl="postcondition" proved="true">
  <proof prover="0" timelimit="15"><result status="valid" time="0.35" steps="740"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deleteMin&#39;vc" expl="VC for deleteMin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deleteMin&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="210"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.11" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.12" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="243"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.13" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="248"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.14" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="253"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.15" expl="tmp := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="258"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.16" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.26" steps="7859"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.17" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="349"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.18" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="354"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="218"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="576"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1449"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2720"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.17" steps="8896"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="224"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="224"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="588"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1478"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="2649"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.42" steps="10140"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="230"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="457"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="463"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="444"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.34" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="472"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.35" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="476"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.36" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="480"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.37" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="484"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.38" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="488"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.39" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="2238"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.40" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="496"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.41" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="500"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.42" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="504"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.43" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="2285"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.44" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="512"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.45" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="516"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.46" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="520"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="264"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="524"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.49" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="550"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.50" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="554"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.51" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="558"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.52" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="562"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.53" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="566"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.54" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="3275"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.55" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="574"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.56" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="578"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.57" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="582"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.58" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.72" steps="3351"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.59" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="590"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.60" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="594"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.61" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="598"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="292"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.23" steps="6338"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.64" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.64.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.64.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="276"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.64.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="364832"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.64.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.64.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="4660"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="4982"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="1532"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.27" steps="7041"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.28" steps="7041"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.53" steps="9126"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.55" steps="9123"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.55" steps="9114"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="274"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="274"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.4" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.64.0.4.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.4.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.86" steps="3480"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.4.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.70" steps="31297"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.4.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.27" steps="1480"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.64.0.5" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.64.0.5.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.64.0.5.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.81" steps="3822"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.5.0.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.32" steps="39937"/></proof>
      <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.64.0.5.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.08" steps="276"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.64.0.5.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.84" steps="7203"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.64.0.5.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="1452"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="296"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.66" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.66.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.66.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.66.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="659"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.0.0.1" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="651"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1528"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.66.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="deleteMin&#39;vc.66.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.66.1.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="659"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.1.0.1" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="651"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.66.1.0.2" expl="postcondition" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1500"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="637"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="300"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="474"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="306"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.71" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.71.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.60" steps="8394"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.71.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.71.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="7790"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="311"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="104"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="667"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.76" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.77" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.78" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.79" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="703"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.80" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.01" steps="7029"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.82" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.04" steps="110"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.83" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.98" steps="5631"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.84" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.85" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.86" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.87" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="112"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.88" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.14" steps="11871"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.89" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="116"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.90" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="624"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.91" expl="sz := self.size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="630"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.92" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="322"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.93" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="937"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.94" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="2311"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.95" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.05" steps="6654"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.96" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.96.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="304"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.77" steps="5408"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.97" steps="5843"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="304"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="10.19" steps="32504"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="664"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.96.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="710"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.97" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.98" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="328"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.99" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="952"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.100" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2351"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.101" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.13" steps="6819"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.102" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.102.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="308"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="5560"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.02" steps="6002"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="308"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="14.62" steps="42636"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="672"/></proof>
   </goal>
   <goal name="deleteMin&#39;vc.102.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="720"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.103" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="334"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1413"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1455"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.50" steps="2318"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.107" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="780"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.108" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="735"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.109" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="739"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.110" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="792"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.111" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="796"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.112" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.30" steps="6588"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.113" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="804"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.114" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="759"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.115" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="763"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.116" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.40" steps="6673"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.117" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="820"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.118" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="775"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.119" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="779"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="368"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.52" steps="2963"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.122" expl="wr ({self} union {self}`rep union {})`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="856"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.123" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="811"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.124" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="815"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.125" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="868"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.126" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="872"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.127" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.75" steps="8087"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.128" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="880"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.129" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="835"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.130" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="839"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.131" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.79" steps="7739"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.132" expl="wr ({self} union {self}`rep union {})`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="896"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.133" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="851"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.134" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="855"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.135" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="396"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.136" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.53" steps="11195"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.137" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="deleteMin&#39;vc.137.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deleteMin&#39;vc.137.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="372"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi20 l_pq r_pq)">
     <goal name="deleteMin&#39;vc.137.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.26" steps="932"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.137.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="deleteMin&#39;vc.137.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.69" steps="9208"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.70" steps="10011"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.41" steps="2026"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.85" steps="13387"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.06" steps="119350"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.86" steps="13387"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.02" steps="119751"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.83" steps="17648"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.04" steps="121954"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.86" steps="17635"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.05" steps="121954"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.87" steps="17639"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="1.08" steps="121954"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="370"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="370"/></proof>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.4" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.137.0.4.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.4.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.47" steps="6732"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.4.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn l_s1 (img_rep l_s1 l_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.137.0.4.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="372"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.4.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.14" steps="19975"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.4.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.36" steps="1988"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="deleteMin&#39;vc.137.0.5" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="deleteMin&#39;vc.137.0.5.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="deleteMin&#39;vc.137.0.5.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.71" steps="7711"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.5.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
       <goal name="deleteMin&#39;vc.137.0.5.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="372"/></proof>
       </goal>
       <goal name="deleteMin&#39;vc.137.0.5.0.1.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.51" steps="20410"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="deleteMin&#39;vc.137.0.5.0.2" expl="postcondition" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.38" steps="1960"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.138" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="400"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.139" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.139.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.139.0.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.139.0.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="911"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.139.0.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn l_s1 (img_rep l_s1 l_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.139.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="374"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.139.0.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="906"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.139.0.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2036"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.139.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="pqueuePub">
    <goal name="deleteMin&#39;vc.139.1.0" expl="VC for deleteMin" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="deleteMin&#39;vc.139.1.0.0" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="911"/></proof>
     </goal>
     <goal name="deleteMin&#39;vc.139.1.0.1" expl="VC for deleteMin" proved="true">
     <transf name="assert" proved="true" arg1="(typeofRgn r_s1 (img_rep r_s1 r_s1.pool) (Cons Node Nil))">
      <goal name="deleteMin&#39;vc.139.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="374"/></proof>
      </goal>
      <goal name="deleteMin&#39;vc.139.1.0.1.1" expl="VC for deleteMin" proved="true">
      <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="906"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="deleteMin&#39;vc.139.1.0.2" expl="VC for deleteMin" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2008"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.140" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="894"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.141" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="404"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.142" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="659"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.143" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="410"/></proof>
  </goal>
  <goal name="deleteMin&#39;vc.144" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deleteMin&#39;vc.144.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.144.0.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.71" steps="15440"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="deleteMin&#39;vc.144.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="subset">
    <goal name="deleteMin&#39;vc.144.1.0" expl="VC for deleteMin" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="6.41" steps="15342"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deleteMin&#39;vc.145" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="415"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decreaseKey&#39;vc" expl="VC for decreaseKey" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decreaseKey&#39;vc.0" expl="sntl := self.sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="163"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.1" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="234"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.2" expl="tmp := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="239"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.3" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.64" steps="10548"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.4" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="250"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.5" expl="tmp := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.6" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.21" steps="19521"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.7" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.8" expl="pos := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="271"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.9" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.10" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="362"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.11" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.83" steps="16561"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.12" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.66" steps="3807"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.13" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.79" steps="6792"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.62" steps="4153"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="12498"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.89" steps="68427"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.17" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1038"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.18" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="482"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.19" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="485"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="559"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.63" steps="66959"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1463"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="1792"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.94" steps="57032"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1843"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.32" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.32.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_self r_self)">
    <goal name="decreaseKey&#39;vc.32.0.0" expl="asserted formula" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="618"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.32.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="38.00" steps="155876"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="decreaseKey&#39;vc.32.0.1.0" expl="assertion" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="decreaseKey&#39;vc.32.0.1.0.0" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="342"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.1" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="3990"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.2" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="3009"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.3" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.69" steps="3020"/></proof>
      <proof prover="6"><result status="valid" time="2.54" steps="168134"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.4" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.64" steps="3013"/></proof>
      <proof prover="6"><result status="valid" time="3.94" steps="197440"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.5" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="3022"/></proof>
      <proof prover="6"><result status="valid" time="2.67" steps="170323"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.6" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="344"/></proof>
      <proof prover="6"><result status="valid" time="0.24" steps="66787"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.7" expl="assertion" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="344"/></proof>
      <proof prover="6"><result status="valid" time="0.26" steps="66785"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.8" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="20.71" steps="1105002"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.9" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="9.67" steps="976196"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.10" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="5.72" steps="399829"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.11" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="0.84" steps="109659"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.32.0.1.0.12" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="5.53" steps="400146"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.33" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="719"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.34" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="722"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="388"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="693"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="9.26" steps="39329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="1858"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2245"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="706"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.98" steps="48512"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="2339"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.48" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1440"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.50" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.75" steps="3484"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="803"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1543"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="831"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="827"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.59" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.81" steps="8707"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.61" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.08" steps="9639"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.62" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="423"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.63" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.63.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.63.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="404"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.63.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.63.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.88" steps="5095"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="419"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.19" steps="4886"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="6.86" steps="258943"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="5.53" steps="247723"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="9.58" steps="348708"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="10.36" steps="464381"/></proof>
       <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
        <goal name="decreaseKey&#39;vc.63.0.1.0.0.6.0" expl="true case (precondition)" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="587"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.0.0.6.1" expl="false case (precondition)" proved="true">
        <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
         <goal name="decreaseKey&#39;vc.63.0.1.0.0.6.1.0" expl="false case (true case. precondition)" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="96.01" steps="73641"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.63.0.1.0.0.6.1.1" expl="false case (precondition)" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="88.28" steps="87763"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="10.14" steps="339228"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.63.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.63.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.0" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="2.95" steps="214839"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.1" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="1.90" steps="197220"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.2" expl="precondition" proved="true">
       <proof prover="6" timelimit="80"><result status="valid" time="0.77" steps="107498"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.3" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.11" steps="28340"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.4" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.87" steps="11851"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.5" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.5.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="969"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.5.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="61.06" steps="291151"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.6" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(not (mem1 l_n l_s.heap.rep[l_self]) /\ not (mem1 r_n r_s.heap.rep[r_self]))">
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2538"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.6.1" expl="precondition" proved="true">
        <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
         <goal name="decreaseKey&#39;vc.63.0.1.1.0.6.1.0" expl="asserted formula" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="987"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.63.0.1.1.0.6.1.1" expl="precondition" proved="true">
         <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.45" steps="18820"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.63.0.1.1.0.7" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.7.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.28" steps="969"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.63.0.1.1.0.7.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.09" steps="59499"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.63.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="399"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.64" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.65" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.66" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.06" steps="5110"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.67" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.68" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.37" steps="558"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.69" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="1196"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.70" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.47" steps="2248"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.71" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="3460"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.72" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="19.44" steps="83068"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.73" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.32" steps="564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.74" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.30" steps="564"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.75" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1208"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.76" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.62" steps="2273"/></proof>
  <proof prover="6"><result status="valid" time="1.13" steps="128743"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.77" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.91" steps="3533"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.78" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="20.51" steps="65761"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.79" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="570"/></proof>
  <proof prover="6"><result status="valid" time="0.72" steps="105340"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.80" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="959"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.81" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="963"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.82" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="967"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.83" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.24" steps="18044"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.83.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.83.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.81" steps="8386"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.84" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="9.02" steps="18054"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.85" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="27.25" steps="92805"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.86" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.86.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.86.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.38" steps="22383"/></proof>
    <proof prover="6"><result status="valid" time="14.23" steps="671926"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.87" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="987"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.88" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="991"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.89" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="995"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.90" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="999"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.91" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.19" steps="7219"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.92" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1007"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.93" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1021"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.94" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1025"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.95" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1029"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.96" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.96.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.96.0.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.35" steps="8588"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.97" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.67" steps="20513"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.98" expl="wr ({self} union {self}`rep)`head" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.98.0" expl="wr ({self} union {self}`rep)`head" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="1543"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.99" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.99.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.70" steps="17247"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.100" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1049"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.101" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1053"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.102" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1057"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.103" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="1061"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.104" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.98" steps="10158"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.105" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1069"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.33" steps="16412"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.107" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.107.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.107.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.29" steps="600"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.107.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.50" steps="1520"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.107.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.107.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="4" timelimit="100"><result status="valid" time="0.13" steps="466645"/></proof>
       <proof prover="6"><result status="valid" time="0.48" steps="98941"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="25.57" steps="728503"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="4" timelimit="100"><result status="valid" time="0.14" steps="513025"/></proof>
       <proof prover="6"><result status="valid" time="0.48" steps="104655"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="14.42" steps="449858"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="15.69" steps="462210"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="4.61" steps="361226"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="4.40" steps="356454"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.107.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="4.38" steps="355827"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.23" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.107.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="591"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="625"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="625"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="633"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.111" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.111.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.111.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="10.40" steps="21871"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.111.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="9.96" steps="19445"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="633"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.113" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="473"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.114" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="476"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.115" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="316"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.116" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="555"/></proof>
  <proof prover="6"><result status="valid" time="0.74" steps="116834"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.117" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.91" steps="30784"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.118" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1448"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.119" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1793"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.120" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.121" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="322"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.122" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="567"/></proof>
  <proof prover="6"><result status="valid" time="0.79" steps="124296"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.123" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="7.06" steps="34886"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.124" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1497"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.125" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="1842"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.126" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="328"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.127" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_self r_self)">
   <goal name="decreaseKey&#39;vc.127.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="609"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.127.1" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.127.1.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="decreaseKey&#39;vc.127.1.0.0" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="336"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.1" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="646"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.2" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="336"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.3" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="17.79" steps="51917"/></proof>
     <proof prover="6"><result status="valid" time="4.50" steps="378786"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.4" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.57" steps="3575"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.5" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.43" steps="60714"/></proof>
     <proof prover="6"><result status="valid" time="6.67" steps="491947"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.6" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.84" steps="16390"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.127.1.0.7" expl="assertion" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.79" steps="5461"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.128" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="714"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.129" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="717"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.130" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="388"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.131" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="696"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.132" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="17.09" steps="64782"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.133" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.42" steps="1863"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.134" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.134.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="374"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="374"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="374"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="374"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="567"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="567"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.134.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.26" steps="763"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.135" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="394"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="708"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="24.28" steps="97785"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="1929"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.140" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.140.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="378"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="378"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="378"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="378"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="575"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="575"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.140.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.27" steps="777"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="400"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.142" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="408"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.143" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.144" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="1819"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.145" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="3637"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.146" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="798"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.147" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.148" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="416"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.149" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="413"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.150" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1975"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.151" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="814"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.152" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="822"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.153" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="419"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.154" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.82" steps="9193"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.155" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="421"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.156" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.71" steps="11745"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.157" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="423"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.158" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.158.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.158.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="404"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.158.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="903"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.158.0.1.1" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
      <goal name="decreaseKey&#39;vc.158.0.1.1.0" expl="true case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.158.0.1.1.0.0" expl="true case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="426"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="421"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.19" steps="426"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="21.52" steps="44431"/></proof>
        <proof prover="6"><result status="valid" time="7.96" steps="314928"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.15" steps="10494"/></proof>
        <proof prover="6"><result status="valid" time="0.96" steps="119838"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="24.03" steps="114863"/></proof>
        <proof prover="6"><result status="valid" time="10.76" steps="399386"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.6" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="11.90" steps="565115"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.0.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.65" steps="14279"/></proof>
        <proof prover="6"><result status="valid" time="1.11" steps="124205"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="decreaseKey&#39;vc.158.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.158.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2056"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="2588"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2105"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.17" steps="48942"/></proof>
        <proof prover="6"><result status="valid" time="11.44" steps="725218"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.88" steps="10179"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="98.49" steps="350225"/></proof>
        <proof prover="6"><result status="valid" time="13.95" steps="666599"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="18.01" steps="101170"/></proof>
        <proof prover="6"><result status="valid" time="14.29" steps="864079"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.158.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.60" steps="15229"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="399"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.158.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="399"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.159" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.160" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="425"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.161" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.03" steps="5500"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.162" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="431"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.163" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="558"/></proof>
  <proof prover="6"><result status="valid" time="0.38" steps="91759"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.164" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1198"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.165" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="2260"/></proof>
  <proof prover="6"><result status="valid" time="1.28" steps="130802"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.166" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.85" steps="3458"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.167" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="25.54" steps="73724"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.168" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="564"/></proof>
  <proof prover="6"><result status="valid" time="0.65" steps="100956"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.169" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="564"/></proof>
  <proof prover="6"><result status="valid" time="0.39" steps="92730"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.170" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1211"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.171" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.66" steps="2286"/></proof>
  <proof prover="6"><result status="valid" time="1.12" steps="126639"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.172" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.89" steps="3531"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.173" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="68.53" steps="210760"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.174" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.41" steps="570"/></proof>
  <proof prover="6"><result status="valid" time="0.78" steps="104986"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.175" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="960"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.176" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="964"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.177" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="968"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.178" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.178.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="12.05" steps="28012"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.179" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="12.18" steps="23350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.180" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.04" steps="33130"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.181" expl="wr ({self} union {self}`rep)`child" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.181.0" expl="wr ({self} union {self}`rep)`child" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.181.0.0" expl="wr ({self} union {self}`rep)`child" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.60" steps="1463"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.182" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="988"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.183" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="992"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.184" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="996"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.185" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1000"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.186" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.186.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.186.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.52" steps="1488"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.187" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1008"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.188" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1022"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.189" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1026"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.190" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1030"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.191" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.191.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.31" steps="20946"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.192" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="15.06" steps="35275"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.193" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="15.84" steps="40428"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.194" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.66" steps="9792"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.195" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1050"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.196" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1054"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.197" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="1058"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.198" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1062"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.199" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.199.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.199.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="1568"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.200" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1070"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.201" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.83" steps="17513"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.202" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.202.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.202.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.28" steps="600"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.202.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.58" steps="1509"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.202.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.202.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.60" steps="3227"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.73" steps="13996"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="3278"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.96" steps="15540"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.95" steps="15540"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.62" steps="22572"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="5.09" steps="380329"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.74" steps="23263"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="4.89" steps="375628"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.202.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.60" steps="22582"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="4.46" steps="375698"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="591"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.202.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="591"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.203" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="625"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.204" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="625"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.205" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="633"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.206" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.206.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.206.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="15.30" steps="28871"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.206.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="19.24" steps="42788"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.207" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="633"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.208" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="451"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.209" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="454"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.210" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="289"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.211" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="578"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.212" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.79" steps="16506"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.213" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="2469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.214" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1696"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.215" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="295"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.216" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="295"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.217" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="582"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.218" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="6.54" steps="33913"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.219" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="3021"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.220" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="3018"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.221" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="301"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.222" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.223" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.224" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="981"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.225" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="2831"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.226" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="519"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.227" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="315"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.228" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.229" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.230" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="1085"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.231" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="541"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.232" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="537"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.233" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="323"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.234" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.04" steps="6965"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.235" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.236" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.89" steps="4484"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.237" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="327"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.238" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.238.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.238.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="309"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.238.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="595"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.238.0.1.1" expl="precondition" proved="true">
     <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
      <goal name="decreaseKey&#39;vc.238.0.1.1.0" expl="true case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.238.0.1.1.0.0" expl="true case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="331"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="329"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="331"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="12.99" steps="26189"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.35" steps="6998"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.21" steps="84343"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.66" steps="13690"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.0.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.73" steps="9925"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="decreaseKey&#39;vc.238.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.238.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1291"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.31" steps="1793"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="1310"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.21" steps="12354"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.05" steps="6009"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="16.39" steps="95828"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.54" steps="9940"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.238.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.37" steps="8838"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="307"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="307"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="307"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.238.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="307"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.239" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.240" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.241" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="3894"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.242" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="335"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.243" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="459"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.244" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1020"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.245" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="1904"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.246" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.59" steps="2776"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.247" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="13.69" steps="50624"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.248" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.249" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="465"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.250" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="1031"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.251" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="1927"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.252" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="2651"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.253" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="17.96" steps="61507"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.254" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="471"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.255" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="825"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.256" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="829"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.257" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="833"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.258" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.38" steps="5156"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.259" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="5.79" steps="11754"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.260" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.37" steps="5161"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.261" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="964"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.262" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="853"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.263" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="857"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.264" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="861"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.265" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="865"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.266" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="984"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.267" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="873"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.268" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="887"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.269" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="891"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.270" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="895"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.271" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.63" steps="6303"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.272" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.98" steps="14812"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.273" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.60" steps="6304"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.274" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.41" steps="1026"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.275" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="915"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.276" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="919"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.277" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="923"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.278" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="927"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.279" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.43" steps="1046"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.280" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="935"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.281" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="3.21" steps="12632"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.282" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.282.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.282.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="505"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.282.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="1074"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.282.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.282.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="2181"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.93" steps="11598"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.53" steps="2207"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.77" steps="12566"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.77" steps="12560"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.09" steps="19234"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.07" steps="19231"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.282.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.08" steps="19222"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="499"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="499"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="499"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.282.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="499"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.283" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="529"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.284" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="529"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.285" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="534"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.286" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.286.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.286.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.23" steps="15938"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.286.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="7.08" steps="15378"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.287" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="537"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.288" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="267"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.289" expl="tmp := handle.prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="272"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.290" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.61" steps="8813"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.291" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="2292"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.292" expl="pos := tmp.child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.52" steps="2732"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.293" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.46" steps="2366"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.294" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.16" steps="12398"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.295" expl="assertion" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.99" steps="21682"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.296" expl="guard agreement" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="941"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.297" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="389"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.298" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="391"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.299" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.300" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="488"/></proof>
  <proof prover="6"><result status="valid" time="0.66" steps="113742"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.301" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.23" steps="13046"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.302" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.303" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.42" steps="1614"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.304" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.305" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.306" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="499"/></proof>
  <proof prover="6"><result status="valid" time="0.69" steps="117594"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.307" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.07" steps="20871"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.308" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="1370"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.309" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1704"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.310" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.311" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.311.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.311.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2396"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.74" steps="4744"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.47" steps="2498"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="35.56" steps="27687"/></proof>
    <proof prover="6"><result status="valid" time="45.93" steps="1692126"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.01" steps="10624"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.5" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="55.27" steps="3719099"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.6" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="61.72" steps="3719241"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.311.0.7" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="63.62" steps="3829864"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.312" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="607"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.313" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="610"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.314" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="326"/></proof>
  <proof prover="6"><result status="valid" time="0.33" steps="76932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.315" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="613"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.316" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.45" steps="21986"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.317" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1677"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.318" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="2052"/></proof>
  <proof prover="6"><result status="valid" time="0.50" steps="95935"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.319" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="332"/></proof>
  <proof prover="6"><result status="valid" time="0.49" steps="86028"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.320" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="332"/></proof>
  <proof prover="6"><result status="valid" time="0.34" steps="78205"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.321" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="623"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.322" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.11" steps="30141"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.323" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.38" steps="1750"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.324" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="2145"/></proof>
  <proof prover="6"><result status="valid" time="0.58" steps="102263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.325" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="338"/></proof>
  <proof prover="6"><result status="valid" time="0.54" steps="91119"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.326" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.327" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.328" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="1294"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.329" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.67" steps="3242"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.330" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="691"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.331" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.332" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.333" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="351"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.334" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="1397"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.335" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="721"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.336" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="715"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.337" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.338" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.57" steps="7870"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.339" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.340" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.82" steps="8368"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.341" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.342" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.342.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.342.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="342"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.342.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.342.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.92" steps="4809"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="357"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.12" steps="5017"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="6.21" steps="250304"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="4.21" steps="227490"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="5.27" steps="270060"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.39" steps="413876"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="7.94" steps="297078"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.342.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.342.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.0" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="2.44" steps="204319"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.1" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="1.47" steps="185025"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.2" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="0.78" steps="105711"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.3" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="10.28" steps="35429"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.4" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.50" steps="18237"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.5" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="21.66" steps="69248"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.6" expl="precondition" proved="true">
       <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.27" steps="857"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.342.0.1.1.0.6.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.82" steps="16269"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.342.0.1.1.0.7" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.23" steps="133075"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.342.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="337"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.343" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.344" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.345" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.94" steps="4621"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.346" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.347" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.348" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1116"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.349" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.70" steps="2104"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.350" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.78" steps="3265"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.351" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.351.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="474"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="474"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.65" steps="6670"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="474"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="15.56" steps="57199"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="902"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.351.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.45" steps="1218"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.352" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="502"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.353" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="502"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.354" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="1126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.355" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.73" steps="2126"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.356" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.69" steps="3341"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.357" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="18.45" steps="58574"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.358" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="508"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.359" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="884"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.360" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="888"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.361" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="892"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.362" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.362.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.18" steps="7856"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.363" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.13" steps="7218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.364" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="25.45" steps="82880"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.365" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="8.57" steps="16070"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.366" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="912"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.367" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.367.0" expl="wr ({self} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="529"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.368" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="920"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.369" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="924"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.370" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.26" steps="7791"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.371" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.372" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="946"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.373" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="950"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.374" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="954"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.375" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.375.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.22" steps="8058"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.376" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.41" steps="8432"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.377" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="11.01" steps="22027"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.378" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="9.77" steps="18016"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.379" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="974"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.380" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <transf name="unfold" proved="true" arg1="wrs_to_child_framed_by">
   <goal name="decreaseKey&#39;vc.380.0" expl="wr ({self} union {self}`rep)`tag" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="978"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.381" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="982"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.382" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="986"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.383" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.83" steps="10641"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.384" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="994"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.385" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.13" steps="15493"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.386" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.386.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.386.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.22" steps="538"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.386.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="1404"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.386.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.386.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.53" steps="2693"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="2.51" steps="13207"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2731"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="3.39" steps="13792"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="3.00" steps="13792"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.82" steps="21285"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.76" steps="20953"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.386.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="4.80" steps="20944"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.18" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.386.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="529"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.387" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="563"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.388" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="563"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.389" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.390" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.390.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.390.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="10.50" steps="20011"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decreaseKey&#39;vc.390.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="decreaseKey&#39;vc.390.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="9.79" steps="18417"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.391" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.392" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="380"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.393" expl="pos := handle.sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="382"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.394" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="254"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.395" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="481"/></proof>
  <proof prover="6"><result status="valid" time="0.60" steps="116165"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.396" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.68" steps="16188"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.397" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.398" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="1587"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.399" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.400" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="260"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.401" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="492"/></proof>
  <proof prover="6"><result status="valid" time="0.63" steps="120524"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.402" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.10" steps="17169"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.403" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="1344"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.404" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1677"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.405" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="266"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.406" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.406.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.406.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2656"/></proof>
    <proof prover="6"><result status="valid" time="1.30" steps="146911"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.1" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.85" steps="5684"/></proof>
    <proof prover="6"><result status="valid" time="0.84" steps="132647"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.2" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2627"/></proof>
    <proof prover="6"><result status="valid" time="0.58" steps="90853"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.3" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="47.88" steps="31799"/></proof>
    <proof prover="6"><result status="valid" time="53.06" steps="1877795"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.4" expl="assertion" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.72" steps="11233"/></proof>
    <proof prover="6"><result status="valid" time="52.85" steps="1913257"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.5" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="66.99" steps="4134921"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.6" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="66.81" steps="4136314"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.406.0.7" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="66.68" steps="4129959"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.407" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="600"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.408" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="603"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.409" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="326"/></proof>
  <proof prover="6"><result status="valid" time="0.27" steps="77071"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.410" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="611"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.411" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.81" steps="23736"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.412" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1662"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.413" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.49" steps="2373"/></proof>
  <proof prover="6"><result status="valid" time="0.54" steps="96181"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.414" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="332"/></proof>
  <proof prover="6"><result status="valid" time="0.51" steps="86213"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.415" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="332"/></proof>
  <proof prover="6"><result status="valid" time="0.36" steps="78264"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.416" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="622"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.417" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.05" steps="51705"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.418" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.36" steps="1734"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.419" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="2351"/></proof>
  <proof prover="6"><result status="valid" time="0.66" steps="103407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.420" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="338"/></proof>
  <proof prover="6"><result status="valid" time="0.60" steps="91136"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.421" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="346"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.422" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="343"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.423" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="1649"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.424" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.68" steps="3354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.425" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="684"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.426" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="349"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.427" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="354"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.428" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="351"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.429" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="1805"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.430" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="700"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.431" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="708"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.432" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="357"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.433" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="8641"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.434" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.435" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.09" steps="9981"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.436" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.437" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.437.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.437.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="342"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(l_pq = l_self /\ r_pq = r_self)">
     <goal name="decreaseKey&#39;vc.437.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.437.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.0" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.93" steps="5007"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="357"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.2" expl="precondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.13" steps="5238"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.3" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="6.45" steps="266905"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.4" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="4.62" steps="251439"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.5" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="5.43" steps="289973"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.6" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="8.22" steps="435253"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.437.0.1.0.0.7" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="6.05" steps="290975"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="decreaseKey&#39;vc.437.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(coupling0 l_s3 r_s3 pi l_pq r_pq)">
      <goal name="decreaseKey&#39;vc.437.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="790"/></proof>
      </goal>
      <goal name="decreaseKey&#39;vc.437.0.1.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="decreaseKey&#39;vc.437.0.1.1.1.0" expl="false case (precondition)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.0" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1889"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.1" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2378"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.2" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.35" steps="1938"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.3" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.34" steps="40926"/></proof>
        <proof prover="6"><result status="valid" time="9.50" steps="654767"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.4" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.74" steps="9798"/></proof>
        <proof prover="6"><result status="valid" time="0.87" steps="131463"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.5" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.43" steps="14567"/></proof>
        <proof prover="6"><result status="valid" time="0.96" steps="136971"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.6" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="14.10" steps="79658"/></proof>
        <proof prover="6"><result status="valid" time="12.58" steps="802705"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.437.0.1.1.1.0.7" expl="precondition" proved="true">
        <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.35" steps="14555"/></proof>
        <proof prover="6"><result status="valid" time="0.99" steps="136844"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="337"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.437.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="337"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.438" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.439" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.440" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.88" steps="4718"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.441" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.442" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="496"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.443" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1114"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.444" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.71" steps="2106"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.445" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.76" steps="3246"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.446" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="19.05" steps="66402"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.447" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="502"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.448" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="502"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.449" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="1125"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.450" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.56" steps="2129"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.451" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.81" steps="3320"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.452" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.452.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.28" steps="478"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.38" steps="478"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.83" steps="7628"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="478"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="11.17" steps="41043"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.5" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="896"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.452.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.58" steps="1217"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.453" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="508"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.454" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="883"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.455" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="887"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.456" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="891"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.457" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.457.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.53" steps="17750"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.458" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.04" steps="7021"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.459" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="10.28" steps="19917"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.460" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.05" steps="7033"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.461" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="911"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.462" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="915"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.463" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="919"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.464" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="923"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.465" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.465.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.465.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="1370"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.466" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="931"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.467" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="945"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.468" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="949"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.469" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="953"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.470" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.470.0" expl="wr ({self} union {self}`rep)`sibling" proved="true">
   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.01" steps="18114"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.471" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.72" steps="9852"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.472" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="14.55" steps="40287"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.473" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.78" steps="9864"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.474" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="973"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.475" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="977"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.476" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="981"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.477" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="985"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.478" expl="wr ({self} union {self}`rep)`key" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.478.0" expl="wr ({self} union {self}`rep)`key" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="decreaseKey&#39;vc.478.0.0" expl="wr ({self} union {self}`rep)`key" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="1450"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.479" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="993"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.480" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="4.66" steps="16787"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.481" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.481.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.481.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="538"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.481.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.34" steps="1391"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.481.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.481.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.60" steps="3040"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.52" steps="13395"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.65" steps="3091"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.74" steps="15017"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.74" steps="15007"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="4.95" steps="21737"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.01" steps="21733"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.481.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.01" steps="21725"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="529"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.481.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="529"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.482" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="563"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.483" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="563"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.484" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.26" steps="571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.485" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.485.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.485.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="13.02" steps="27101"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.485.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="12.60" steps="26066"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.486" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="571"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.487" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="361"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.488" expl="pos := self.head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="364"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.489" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="229"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.490" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="475"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.491" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.72" steps="10290"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.492" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.30" steps="2369"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.493" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.27" steps="1433"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.494" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="235"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.495" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="235"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.496" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.18" steps="477"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.497" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.497.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="223"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2111"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="223"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.33" steps="2272"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="223"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="355"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.6" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="1.66" steps="8854"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.497.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="355"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.498" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.34" steps="2524"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.499" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="2303"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.500" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="241"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.501" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.502" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="249"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.503" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.29" steps="861"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.504" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.35" steps="2632"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.505" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="429"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.506" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="255"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.507" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.508" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="257"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.509" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.32" steps="956"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.510" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="451"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.511" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.10" steps="447"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.512" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="263"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.513" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.92" steps="5987"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.514" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="265"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.515" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.64" steps="4102"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.516" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="267"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.517" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.517.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.517.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="249"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s2 r_s2 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.517.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="505"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.517.0.1.1" expl="precondition" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0">
      <goal name="decreaseKey&#39;vc.517.0.1.1.0" expl="VC for decreaseKey" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.0" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="1170"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.1" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.25" steps="1571"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.2" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.20" steps="1189"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.3" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="25.00" steps="85302"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.4" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="0.99" steps="5778"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.5" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.95" steps="8572"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.6" expl="VC for decreaseKey" proved="true">
       <transf name="assert" proved="true" arg1="(idRef pi l_pos r_pos)">
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.10" steps="281"/></proof>
        </goal>
        <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1" expl="VC for decreaseKey" proved="true">
        <transf name="assert" proved="true" arg1="(idRef pi l_handle r_handle)">
         <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.13" steps="281"/></proof>
         </goal>
         <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1" expl="VC for decreaseKey" proved="true">
         <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h2">
          <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0" expl="VC for decreaseKey" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0" expl="VC for decreaseKey" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h3">
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.0" expl="destruct premise" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="279"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.1" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.10" steps="281"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.2" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.10" steps="281"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.3" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.08" steps="279"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.4" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.18" steps="279"/></proof>
            </goal>
            <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5" expl="VC for decreaseKey" proved="true">
            <transf name="eliminate_let" proved="true" >
             <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0" expl="VC for decreaseKey" proved="true">
             <transf name="instantiate" proved="true" arg1="h3" arg2="l_n,r_n">
              <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0" expl="VC for decreaseKey" proved="true">
              <transf name="destruct_rec" proved="true" arg1="Hinst">
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.0" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.11" steps="282"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.1" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.17" steps="1036"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.2" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.07" steps="279"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.3" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.11" steps="282"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.4" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.17" steps="1036"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.5" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.08" steps="279"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.6" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.08" steps="279"/></proof>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.7" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.7.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.11" steps="285"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.7.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.7.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="0.12" steps="294"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.7.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="0.81" steps="5883"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.8" expl="VC for decreaseKey" proved="true">
               <transf name="case" proved="true" arg1="(l_n = l_handle /\ r_n = r_handle)">
                <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.8.0" expl="true case" proved="true">
                <proof prover="0"><result status="valid" time="0.12" steps="410"/></proof>
                </goal>
                <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.8.1" expl="false case" proved="true">
                <transf name="case" proved="true" arg1="(l_n = l_tmp /\ r_n = r_tmp)">
                 <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.8.1.0" expl="false case (true case)" proved="true">
                 <proof prover="0"><result status="valid" time="0.11" steps="292"/></proof>
                 </goal>
                 <goal name="decreaseKey&#39;vc.517.0.1.1.0.6.1.1.0.0.5.0.0.8.1.1" expl="false case" proved="true">
                 <proof prover="0"><result status="valid" time="0.36" steps="2204"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="decreaseKey&#39;vc.517.0.1.1.0.7" expl="VC for decreaseKey" proved="true">
       <proof prover="0" timelimit="30"><result status="valid" time="1.30" steps="8554"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.2" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="247"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.3" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.19" steps="247"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.17" steps="247"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.517.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="247"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.518" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="269"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.519" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="269"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.520" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.50" steps="3685"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.521" expl="precondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="275"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.522" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="399"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.523" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="947"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.524" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.39" steps="1783"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.525" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.54" steps="2422"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.526" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="9.07" steps="38958"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.527" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.528" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.21" steps="405"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.529" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="956"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.530" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.40" steps="1804"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.531" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.55" steps="2487"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.532" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="21.51" steps="67215"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.533" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="411"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.534" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="756"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.535" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="760"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.536" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="764"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.537" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.24" steps="4865"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.538" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.36" steps="862"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.539" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.25" steps="4871"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.540" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="870"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.541" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="784"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.542" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="788"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.543" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="792"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.544" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="796"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.545" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="890"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.546" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="804"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.547" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.11" steps="818"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.548" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="822"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.549" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="826"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.550" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.48" steps="5999"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.551" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="924"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.552" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="1.44" steps="6001"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.553" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.37" steps="932"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.554" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="846"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.555" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="850"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.556" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="854"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.557" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="858"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.558" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.38" steps="952"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.559" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="866"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.560" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="2.86" steps="12135"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.561" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.561.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.561.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="445"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 l_s1 r_s1 pi l_pq r_pq)">
     <goal name="decreaseKey&#39;vc.561.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.26" steps="980"/></proof>
     </goal>
     <goal name="decreaseKey&#39;vc.561.0.1.1" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="decreaseKey&#39;vc.561.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.43" steps="2041"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.95" steps="11683"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.2" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="2067"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.3" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.62" steps="12205"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.4" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.65" steps="12205"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.5" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.83" steps="18544"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.6" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.78" steps="18541"/></proof>
       </goal>
       <goal name="decreaseKey&#39;vc.561.0.1.1.0.7" expl="postcondition" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.68" steps="18532"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="439"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="439"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="439"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.561.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="439"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.562" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.563" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.16" steps="469"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.564" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.20" steps="474"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.565" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.565.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.565.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="6.19" steps="14492"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.565.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="6.26" steps="13985"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.566" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="477"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.567" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="143"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.568" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.13" steps="350"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.569" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.44" steps="2997"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.570" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.24" steps="1549"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.571" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.22" steps="1195"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.572" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.573" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="149"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.574" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="360"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.575" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decreaseKey&#39;vc.575.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="137"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="137"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.2" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="137"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.3" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.23" steps="1339"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.4" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="137"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.5" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="257"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.6" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="257"/></proof>
   </goal>
   <goal name="decreaseKey&#39;vc.575.7" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="257"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.576" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.28" steps="2019"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.577" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.31" steps="2051"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.578" expl="type invariant" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="155"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.579" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="297"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.580" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="301"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.581" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="305"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.582" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="309"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.583" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="313"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.584" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="317"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.585" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="321"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.586" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="325"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.587" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.07" steps="329"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.588" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="333"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.589" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="337"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.590" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.14" steps="373"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.591" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="345"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.592" expl="wr ({self} union {self}`rep)`slots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="359"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.593" expl="wr ({self} union {self}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="363"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.594" expl="wr ({self} union {self}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="367"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.595" expl="wr ({self} union {self}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="371"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.596" expl="wr ({self} union {self}`rep)`prev" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="375"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.597" expl="wr ({self} union {self}`rep)`head" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="379"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.598" expl="wr ({self} union {self}`rep)`child" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="383"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.599" expl="wr ({self} union {self}`rep)`rep" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="387"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.600" expl="wr ({self} union {self}`rep)`tag" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="391"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.601" expl="wr ({self} union {self}`rep)`size" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="395"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.602" expl="wr ({self} union {self}`rep)`length" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="399"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.603" expl="wr ({self} union {self}`rep)`key" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.15" steps="435"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.604" expl="wr ({self} union {self}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.08" steps="407"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.605" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.85" steps="4928"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.606" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="decreaseKey&#39;vc.606.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.606.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="197"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="25.30" steps="119716"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="195"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="195"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.4" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="195"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.606.0.5" expl="postcondition" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="195"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.607" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.608" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.09" steps="217"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.609" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.12" steps="218"/></proof>
  </goal>
  <goal name="decreaseKey&#39;vc.610" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="subset">
   <goal name="decreaseKey&#39;vc.610.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="decreaseKey&#39;vc.610.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.31" steps="3743"/></proof>
    </goal>
    <goal name="decreaseKey&#39;vc.610.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="3241"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decreaseKey&#39;vc.611" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30"><result status="valid" time="0.06" steps="225"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="boundary_frames_coupling_PQUEUE_REL" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="boundary_frames_coupling_PQUEUE_REL.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.0" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="85.99" steps="263312"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 s s&#39; rho l_pq r_pq)">
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="626"/></proof>
     </goal>
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1" proved="true">
     <transf name="assert" proved="true" arg1="(s.pool = t27.pool /\ s&#39;.pool = t&#39;.pool)">
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="41"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1" proved="true">
      <transf name="assert" proved="true" arg1="(img_rep s s.pool = img_rep t27 t27.pool)">
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="extensionality1">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="49.29" steps="166725"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="30.68" steps="84980"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1" proved="true">
       <transf name="assert" proved="true" arg1="(img_rep s&#39; s&#39;.pool = img_rep t&#39; t&#39;.pool)">
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="extensionality1">
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="42.55" steps="176896"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="47.84" steps="214044"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.0" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="5.62" steps="24261"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.1" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.04" steps="101367"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2" proved="true">
          <transf name="assert" proved="true" arg1="(idRgn rho (rgnSubK s.heap.rep[l_pq] s.alloct Node) (rgnSubK s&#39;.heap.rep[r_pq] s&#39;.alloct Node))" arg2="as" arg3="G">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.89" steps="37375"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1" proved="true">
           <transf name="unfold" proved="true" arg1="idRgn" arg2="in" arg3="G">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0" proved="true">
            <transf name="destruct_rec" proved="true" arg1="G">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0" proved="true">
             <transf name="inline_goal" proved="true" >
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0" proved="true">
               <transf name="instantiate" proved="true" arg1="G2" arg2="x">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0" proved="true">
                <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="47.26" steps="159855"/></proof>
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
                  <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.55" steps="138250"/></proof>
                   <proof prover="6"><result status="valid" time="72.79" steps="2546698"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.0.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="60"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1" proved="true">
               <transf name="instantiate" proved="true" arg1="G2" arg2="x">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.1" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="22.76" steps="70612"/></proof>
                   <proof prover="6"><result status="valid" time="83.85" steps="2053407"/></proof>
                   </goal>
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2" proved="true">
                   <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0" proved="true">
                    <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H20">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0" proved="true">
                     <transf name="instantiate" proved="true" arg1="H20" arg2="x">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0.0" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="Hinst">
                       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.1.0.2.0.0.0.0" proved="true">
                       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="46.96" steps="163771"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.1.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.11" steps="122156"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.2" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="92.19" steps="296908"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3" proved="true">
               <transf name="instantiate" proved="true" arg1="G1" arg2="y">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.0" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="56"/></proof>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1" expl="destruct premise" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="87.60" steps="345815"/></proof>
                 <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec" arg2="in" arg3="H">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0" expl="destruct premise" proved="true">
                  <transf name="rewrite" proved="true" arg1="rgnSubK&#39;spec">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="40.97" steps="147642"/></proof>
                   <transf name="split_vc" proved="true" >
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.0" proved="true">
                    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="58"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.1" proved="true">
                    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.73" steps="125467"/></proof>
                    <proof prover="6"><result status="valid" time="61.51" steps="1690616"/></proof>
                    </goal>
                    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2" proved="true">
                    <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H21">
                     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0" proved="true">
                     <transf name="instantiate" proved="true" arg1="H21" arg2="y">
                      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0.0" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="Hinst">
                       <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.1.0.0.2.0.0.0" proved="true">
                       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="28.10" steps="89143"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.3.0.2" proved="true">
                 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="29.91" steps="113253"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.4" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="58"/></proof>
               </goal>
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.2.1.0.0.0.5" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="58"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.key[l_n] = t27.heap.key[l_n] /\ s&#39;.heap.key[r_n] = t&#39;.heap.key[r_n])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="82.92" steps="311218"/></proof>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.3.1" proved="true">
           <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="28.54" steps="121457"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.4" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="70.38" steps="277035"/></proof>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.prev[l_n] = t27.heap.prev[l_n] /\ s&#39;.heap.prev[r_n] = t&#39;.heap.prev[r_n])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.prev[l_n] t27.heap.prev[l_n])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="33.71" steps="127917"/></proof>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.prev[r_n] t&#39;.heap.prev[r_n])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0" expl="asserted formula" proved="true">
             <transf name="unfold" proved="true" arg1="identity" arg2="in" arg3="H24">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="H24" arg2="r_n">
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="24.76" steps="92581"/></proof>
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="27.94" steps="92581"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.0.1.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.12" steps="889"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1" proved="true">
           <transf name="assert" proved="true" arg1="(s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="98.90" steps="398792"/></proof>
            <transf name="assert" proved="true" arg1="(idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.10" steps="8557"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="592"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1" proved="true">
            <transf name="assert" proved="true" arg1="(idRef rho s.heap.prev[l_n] s&#39;.heap.prev[r_n] /\ s.heap.prev[l_n] &lt;&gt; null /\ s&#39;.heap.prev[r_n] &lt;&gt; null \/ s.heap.prev[l_n] = null /\ s&#39;.heap.prev[r_n] = s&#39;.heap.sntl[r_pq])">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="85.79" steps="300601"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1" proved="true">
             <transf name="destruct" proved="true" arg1="h">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="85.19" steps="315697"/></proof>
              <transf name="subst_all" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h1">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0" proved="true">
                <transf name="destruct" proved="true" arg1="h2">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0" proved="true">
                 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h3">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0.0" proved="true">
                  <transf name="rewrite" proved="true" arg1="&lt;-" arg2="h2">
                   <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.0.0.0.0.0.0" proved="true">
                   <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="28.96" steps="91727"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.5.1.1.1.1" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="76"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.sibling[l_n] = t27.heap.sibling[l_n] /\ s&#39;.heap.sibling[r_n] = t&#39;.heap.sibling[r_n] /\ s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.sibling[l_n] t27.heap.sibling[l_n] /\ idRef pi&#39; s&#39;.heap.sibling[r_n] t&#39;.heap.sibling[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="34.42" steps="130228"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="31.80" steps="103848"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.0.2" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.42" steps="8512"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.0.1" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="1295"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.sibling[l_n] s&#39;.heap.sibling[r_n] /\ s.heap.sibling[l_n] &lt;&gt; null /\ s&#39;.heap.sibling[r_n] &lt;&gt; s&#39;.heap.sntl[r_pq] \/ s.heap.sibling[l_n] = null /\ s&#39;.heap.sibling[r_n] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h5">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h5">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.31" steps="8132"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.26" steps="7959"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.4" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="75.89" steps="266584"/></proof>
              <transf name="eliminate_let" proved="true" >
               <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0" expl="asserted formula" proved="true">
               <transf name="destruct_rec" proved="true" arg1="h5">
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0" expl="asserted formula" proved="true">
                <transf name="instantiate" proved="true" arg1="h5" arg2="l_n,r_n">
                 <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0" expl="asserted formula" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="Hinst">
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.0" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="318"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.1" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.54" steps="10499"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.2" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="32.32" steps="133167"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.3" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.16" steps="977"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.4" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="3.30" steps="14142"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.5" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="30.72" steps="123264"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.6" expl="destruct premise" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="76"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.7" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="98"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.8" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.9" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.10" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.11" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="96"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.12" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.13" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="94"/></proof>
                  </goal>
                  <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.0.0.14" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="92"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.0.0.5.0.1" expl="asserted formula" proved="true">
                <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="16.35" steps="67568"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.6.1.1" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="78"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7" proved="true">
          <transf name="assert" proved="true" arg1="(s.heap.child[l_n] = t27.heap.child[l_n] /\ s&#39;.heap.child[r_n] = t&#39;.heap.child[r_n] /\ s&#39;.heap.sntl[r_pq] = t&#39;.heap.sntl[r_pq])">
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(idRef pi28 s.heap.child[l_n] t27.heap.child[l_n] /\ idRef pi&#39; s&#39;.heap.child[r_n] t&#39;.heap.child[r_n] /\ idRef pi&#39; s&#39;.heap.sntl[r_pq] t&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="68.99" steps="301283"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.1" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="28.91" steps="100545"/></proof>
             </goal>
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.0.2" expl="asserted formula" proved="true">
             <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="8512"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.0.1" expl="asserted formula" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.14" steps="1295"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1" proved="true">
           <transf name="assert" proved="true" arg1="(idRef rho s.heap.child[l_n] s&#39;.heap.child[r_n] /\ s.heap.child[l_n] &lt;&gt; null /\ s&#39;.heap.child[r_n] &lt;&gt; s&#39;.heap.sntl[r_pq] \/ s.heap.child[l_n] = null /\ s&#39;.heap.child[r_n] = s&#39;.heap.sntl[r_pq])">
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="h5">
             <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0" expl="asserted formula" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h5">
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.1" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.37" steps="7727"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.2" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.42" steps="8280"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.3" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.4" expl="destruct premise" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="70"/></proof>
              </goal>
              <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.0.0.5" expl="asserted formula" proved="true">
              <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="37.48" steps="140282"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.1.1.1.1.1.0.7.1.1" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="78"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.2" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="26"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.3" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="26"/></proof>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.0" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.20" steps="5853"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.1" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="6.94" steps="15181"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.4.0.2" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="30.65" steps="111914"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.0" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.07" steps="5318"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.1" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="7.09" steps="15337"/></proof>
      </goal>
      <goal name="boundary_frames_coupling_PQUEUE_REL.0.0.5.0.2" proved="true">
      <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="80.55" steps="297449"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="pqueueR_is_refperm_monotonic" proved="true">
 <transf name="unfold" proved="true" arg1="pqueueR">
  <goal name="pqueueR_is_refperm_monotonic.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="pqueueR_is_refperm_monotonic.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="pqueueR_is_refperm_monotonic.0.0.0" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="87"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.08" steps="280966"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(coupling0 s t29 pi30 l_pq r_pq)" arg2="as" arg3="Hcoupling">
     <goal name="pqueueR_is_refperm_monotonic.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="36"/></proof>
     </goal>
     <goal name="pqueueR_is_refperm_monotonic.0.0.1.1" proved="true">
     <transf name="unfold" proved="true" arg1="coupling0" arg2="in" arg3="Hcoupling">
      <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0" proved="true">
      <transf name="destruct_rec" proved="true" arg1="Hcoupling">
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.0" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.1" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.2" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.3" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.06" steps="37"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.4" expl="destruct premise" proved="true">
       <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.15" steps="1203"/></proof>
       </goal>
       <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.0" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="42"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.1" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="170"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.2" proved="true">
          <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="214"/></proof>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling4" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.3.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.48" steps="3530"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling3" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.4.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.46" steps="3530"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling2" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.5.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.51" steps="4001"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling1" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.6.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.44" steps="4001"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7" proved="true">
          <transf name="split_premise_right" proved="true" >
           <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hcoupling" arg2="l_n,r_n">
            <goal name="pqueueR_is_refperm_monotonic.0.0.1.1.0.5.0.0.7.0.0" proved="true">
            <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.39" steps="4001"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.2" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="55110"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.3" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="55110"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.4" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.04" steps="55110"/></proof>
    </goal>
    <goal name="pqueueR_is_refperm_monotonic.0.0.5" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.05" steps="20"/></proof>
    <proof prover="4" timelimit="100"><result status="valid" time="0.03" steps="55110"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main" proved="true">
 <goal name="main&#39;vc" expl="VC for main" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="main&#39;vc.1" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.2" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="main&#39;vc.3" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="59"/></proof>
  </goal>
  <goal name="main&#39;vc.4" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.04" steps="66"/></proof>
  </goal>
  <goal name="main&#39;vc.5" expl="Pqueue(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.73" steps="4134"/></proof>
  </goal>
  <goal name="main&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.05" steps="104"/></proof>
  </goal>
  <goal name="main&#39;vc.7" expl="array size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="172"/></proof>
  </goal>
  <goal name="main&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="1346"/></proof>
  </goal>
  <goal name="main&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
  <goal name="main&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.16" steps="6033"/></proof>
  </goal>
  <goal name="main&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="1202"/></proof>
  </goal>
  <goal name="main&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.25" steps="1506"/></proof>
  </goal>
  <goal name="main&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.45" steps="1851"/></proof>
  </goal>
  <goal name="main&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="207"/></proof>
  </goal>
  <goal name="main&#39;vc.15" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="530"/></proof>
  </goal>
  <goal name="main&#39;vc.16" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.08" steps="206"/></proof>
  </goal>
  <goal name="main&#39;vc.17" expl="initDistances(dist,maxWeight)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="206"/></proof>
  </goal>
  <goal name="main&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="241"/></proof>
  </goal>
  <goal name="main&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.97" steps="31566"/></proof>
  </goal>
  <goal name="main&#39;vc.20" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.17" steps="683"/></proof>
  </goal>
  <goal name="main&#39;vc.21" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.10" steps="246"/></proof>
  </goal>
  <goal name="main&#39;vc.22" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="246"/></proof>
  </goal>
  <goal name="main&#39;vc.23" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="250"/></proof>
  </goal>
  <goal name="main&#39;vc.24" expl="ins := insert(queue,initDist,source)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.09" steps="249"/></proof>
  </goal>
  <goal name="main&#39;vc.25" expl="ins := insert(queue,initDist,source)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.25.0" expl="ins := insert(queue,initDist,source)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.25.0.0" expl="ins := insert(queue,initDist,source)" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.85" steps="5940"/></proof>
    </goal>
    <goal name="main&#39;vc.25.0.1" expl="ins := insert(queue,initDist,source)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s3 (img_rep s3 s3.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.25.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.10" steps="229"/></proof>
     </goal>
     <goal name="main&#39;vc.25.0.1.1" expl="ins := insert(queue,initDist,source)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.25.0.1.1.0" expl="ins := insert(queue,initDist,source)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.25.0.1.1.0.0" expl="ins := insert(queue,initDist,source)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.05" steps="9118"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.25.0.2" expl="ins := insert(queue,initDist,source)" proved="true">
    <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="1.27" steps="5451"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="305"/></proof>
  </goal>
  <goal name="main&#39;vc.27" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.21" steps="902"/></proof>
  </goal>
  <goal name="main&#39;vc.28" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="302"/></proof>
  </goal>
  <goal name="main&#39;vc.29" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="302"/></proof>
  </goal>
  <goal name="main&#39;vc.30" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="303"/></proof>
  </goal>
  <goal name="main&#39;vc.31" expl="assertion" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.13" steps="308"/></proof>
  </goal>
  <goal name="main&#39;vc.32" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.40" steps="2095"/></proof>
  </goal>
  <goal name="main&#39;vc.33" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="67.95" steps="113255"/></proof>
  </goal>
  <goal name="main&#39;vc.34" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="21.14" steps="48185"/></proof>
  </goal>
  <goal name="main&#39;vc.35" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.35.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.35.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="74.55" steps="108636"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.36" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="90.28" steps="168471"/></proof>
  </goal>
  <goal name="main&#39;vc.37" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="53.98" steps="100390"/></proof>
  </goal>
  <goal name="main&#39;vc.38" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="37.30" steps="70631"/></proof>
  </goal>
  <goal name="main&#39;vc.39" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="52.38" steps="108109"/></proof>
  </goal>
  <goal name="main&#39;vc.40" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="25.69" steps="54263"/></proof>
  </goal>
  <goal name="main&#39;vc.41" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="66.63" steps="114674"/></proof>
  </goal>
  <goal name="main&#39;vc.42" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="45.16" steps="77661"/></proof>
  </goal>
  <goal name="main&#39;vc.43" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="59.29" steps="127705"/></proof>
  </goal>
  <goal name="main&#39;vc.44" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="8.98" steps="14443"/></proof>
  </goal>
  <goal name="main&#39;vc.45" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="49.27" steps="96090"/></proof>
  </goal>
  <goal name="main&#39;vc.46" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="9.28" steps="14739"/></proof>
  </goal>
  <goal name="main&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.11" steps="341"/></proof>
  </goal>
  <goal name="main&#39;vc.48" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="71.46" steps="168431"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.48.0" expl="loop invariant init" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.48.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="4.87" steps="14315"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.49" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="46.32" steps="147850"/></proof>
  </goal>
  <goal name="main&#39;vc.50" expl="loop invariant init" proved="true">
  <transf name="case" proved="true" arg1="(n = ins)">
   <goal name="main&#39;vc.50.0" expl="true case (loop invariant init)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="351"/></proof>
   <proof prover="4"><result status="valid" time="0.06" steps="243118"/></proof>
   <proof prover="6" timelimit="80"><result status="valid" time="0.20" steps="55678"/></proof>
   </goal>
   <goal name="main&#39;vc.50.1" expl="false case (loop invariant init)" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.57" steps="8157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.51" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="343"/></proof>
  </goal>
  <goal name="main&#39;vc.52" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.06" steps="28427"/></proof>
  </goal>
  <goal name="main&#39;vc.53" expl="loop invariant init" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem1 dist (union s.pool (img_rep s s.pool))))">
   <goal name="main&#39;vc.53.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="union_def">
    <goal name="main&#39;vc.53.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="main&#39;vc.53.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="322"/></proof>
     </goal>
     <goal name="main&#39;vc.53.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="64.31" steps="136365"/></proof>
     <proof prover="4"><result status="valid" time="0.70" steps="1273876"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.53.1" expl="loop invariant init" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.54" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="9.37" steps="33139"/></proof>
  </goal>
  <goal name="main&#39;vc.55" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="348"/></proof>
  </goal>
  <goal name="main&#39;vc.56" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.25" steps="1149"/></proof>
  </goal>
  <goal name="main&#39;vc.57" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.58" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.59" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.60" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="369"/></proof>
  </goal>
  <goal name="main&#39;vc.61" expl="min := deleteMin(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="369"/></proof>
  </goal>
  <goal name="main&#39;vc.62" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.77" steps="1484129"/></proof>
  </goal>
  <goal name="main&#39;vc.63" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.64" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.65" expl="minTag := getTag(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="416"/></proof>
  </goal>
  <goal name="main&#39;vc.66" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.67" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.68" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.69" expl="minKey := getKey(min)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="420"/></proof>
  </goal>
  <goal name="main&#39;vc.70" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.77" steps="48198"/></proof>
  </goal>
  <goal name="main&#39;vc.71" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="union_def">
   <goal name="main&#39;vc.71.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.71.0.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="397"/></proof>
    </goal>
    <goal name="main&#39;vc.71.0.1" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures1">
     <goal name="main&#39;vc.71.0.1.0" expl="assertion" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Ensures1">
      <goal name="main&#39;vc.71.0.1.0.0" expl="assertion" proved="true">
      <proof prover="6" timelimit="80"><result status="valid" time="1.51" steps="168651"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.72" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="428"/></proof>
  </goal>
  <goal name="main&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.42" steps="1353"/></proof>
  </goal>
  <goal name="main&#39;vc.74" expl="i := dist.{minTag} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.86" steps="4176"/></proof>
  </goal>
  <goal name="main&#39;vc.75" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.09" steps="436"/></proof>
  </goal>
  <goal name="main&#39;vc.76" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.43" steps="1370"/></proof>
  </goal>
  <goal name="main&#39;vc.77" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.87" steps="4186"/></proof>
  </goal>
  <goal name="main&#39;vc.78" expl="array size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="466"/></proof>
  </goal>
  <goal name="main&#39;vc.79" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="468"/></proof>
  </goal>
  <goal name="main&#39;vc.80" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="475"/></proof>
  </goal>
  <goal name="main&#39;vc.81" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.80" steps="22786"/></proof>
  </goal>
  <goal name="main&#39;vc.82" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.36" steps="2739"/></proof>
  </goal>
  <goal name="main&#39;vc.83" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.79" steps="4242"/></proof>
  </goal>
  <goal name="main&#39;vc.84" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.92" steps="5092"/></proof>
  </goal>
  <goal name="main&#39;vc.85" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="481"/></proof>
  </goal>
  <goal name="main&#39;vc.86" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.45" steps="1437"/></proof>
  </goal>
  <goal name="main&#39;vc.87" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="476"/></proof>
  </goal>
  <goal name="main&#39;vc.88" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="476"/></proof>
  </goal>
  <goal name="main&#39;vc.89" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.89.0" expl="isEmp := isEmpty(queue)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.89.0.0" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.07" steps="10128"/></proof>
    </goal>
    <goal name="main&#39;vc.89.0.1" expl="isEmp := isEmpty(queue)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.89.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="446"/></proof>
     </goal>
     <goal name="main&#39;vc.89.0.1.1" expl="isEmp := isEmpty(queue)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.89.0.1.1.0" expl="isEmp := isEmpty(queue)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.89.0.1.1.0.0" expl="isEmp := isEmpty(queue)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="27.62" steps="78410"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.89.0.2" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.79" steps="12137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.90" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.68" steps="7993"/></proof>
  </goal>
  <goal name="main&#39;vc.91" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="5.51" steps="15533"/></proof>
  </goal>
  <goal name="main&#39;vc.92" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.55" steps="23631"/></proof>
  </goal>
  <goal name="main&#39;vc.93" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.93.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.93.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.64" steps="23219"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.94" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.07" steps="23891"/></proof>
  </goal>
  <goal name="main&#39;vc.95" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.29" steps="25732"/></proof>
  </goal>
  <goal name="main&#39;vc.96" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.26" steps="25748"/></proof>
  </goal>
  <goal name="main&#39;vc.97" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.46" steps="23922"/></proof>
  </goal>
  <goal name="main&#39;vc.98" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.28" steps="23939"/></proof>
  </goal>
  <goal name="main&#39;vc.99" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.87" steps="32438"/></proof>
  </goal>
  <goal name="main&#39;vc.100" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.30" steps="23973"/></proof>
  </goal>
  <goal name="main&#39;vc.101" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.38" steps="23984"/></proof>
  </goal>
  <goal name="main&#39;vc.102" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.38" steps="23954"/></proof>
  </goal>
  <goal name="main&#39;vc.103" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.94" steps="24012"/></proof>
  </goal>
  <goal name="main&#39;vc.104" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="17.08" steps="53680"/></proof>
  </goal>
  <goal name="main&#39;vc.105" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="520"/></proof>
  </goal>
  <goal name="main&#39;vc.106" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.106.0" expl="loop invariant init" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.106.0.0" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.59" steps="33409"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.107" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.59" steps="6277"/></proof>
  </goal>
  <goal name="main&#39;vc.108" expl="loop invariant init" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem1 dist (union s.pool (img_rep s s.pool))))">
   <goal name="main&#39;vc.108.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="34.21" steps="49675"/></proof>
   <transf name="rewrite" proved="true" arg1="union_def">
    <goal name="main&#39;vc.108.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="main&#39;vc.108.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="417603"/></proof>
     </goal>
     <goal name="main&#39;vc.108.0.0.1" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.37" steps="632058"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.108.1" expl="loop invariant init" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.29" steps="533"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.109" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="36.31" steps="124417"/></proof>
  </goal>
  <goal name="main&#39;vc.110" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="524"/></proof>
  </goal>
  <goal name="main&#39;vc.111" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="24.17" steps="49954"/></proof>
  </goal>
  <goal name="main&#39;vc.112" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="23.66" steps="57449"/></proof>
  </goal>
  <goal name="main&#39;vc.113" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="527"/></proof>
  </goal>
  <goal name="main&#39;vc.114" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="536"/></proof>
  </goal>
  <goal name="main&#39;vc.115" expl="currEdge := get(gEdges,i) ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.116" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="563"/></proof>
  </goal>
  <goal name="main&#39;vc.117" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="554"/></proof>
  </goal>
  <goal name="main&#39;vc.118" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.63" steps="1745"/></proof>
  </goal>
  <goal name="main&#39;vc.119" expl="d := dist.{startV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.22" steps="1701"/></proof>
  </goal>
  <goal name="main&#39;vc.120" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.121" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.122" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.48" steps="1807"/></proof>
  </goal>
  <goal name="main&#39;vc.123" expl="d := dist.{endV} ( index is in bounds)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="1709"/></proof>
  </goal>
  <goal name="main&#39;vc.124" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.33" steps="2193"/></proof>
  </goal>
  <goal name="main&#39;vc.125" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.61" steps="1824"/></proof>
  </goal>
  <goal name="main&#39;vc.126" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.127" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.128" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.129" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.24" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.130" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="576"/></proof>
  </goal>
  <goal name="main&#39;vc.131" expl="ins := insert(queue,candidateDist,endV)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="577"/></proof>
  </goal>
  <goal name="main&#39;vc.132" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. mem1 x (union (pool s) (img_rep s s.pool)) -&gt; x \: s.alloct -&gt; s.alloct[x] = Node \/ s.alloct[x] = Pqueue)">
   <goal name="main&#39;vc.132.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.132.0.0" expl="asserted formula" proved="true">
    <transf name="unfold" proved="true" arg1="pqueuePub" arg2="in" arg3="Ensures8">
     <goal name="main&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Ensures8">
      <goal name="main&#39;vc.132.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="65.25" steps="92203"/></proof>
      <proof prover="6" timelimit="80"><result status="valid" time="19.54" steps="1271612"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="main&#39;vc.132.1" expl="assertion" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.15" steps="7862"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.133" expl="precondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.62" steps="2085"/></proof>
  </goal>
  <goal name="main&#39;vc.134" expl=" index is in bounds" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.85" steps="15461"/></proof>
  </goal>
  <goal name="main&#39;vc.135" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="668"/></proof>
  </goal>
  <goal name="main&#39;vc.136" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="679"/></proof>
  </goal>
  <goal name="main&#39;vc.137" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="21.30" steps="58434"/></proof>
  </goal>
  <goal name="main&#39;vc.138" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.66" steps="4503"/></proof>
  </goal>
  <goal name="main&#39;vc.139" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.41" steps="6216"/></proof>
  </goal>
  <goal name="main&#39;vc.140" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="1.46" steps="7445"/></proof>
  </goal>
  <goal name="main&#39;vc.141" expl="type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.24" steps="685"/></proof>
  </goal>
  <goal name="main&#39;vc.142" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.76" steps="2151"/></proof>
  </goal>
  <goal name="main&#39;vc.143" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="676"/></proof>
  </goal>
  <goal name="main&#39;vc.144" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="676"/></proof>
  </goal>
  <goal name="main&#39;vc.145" expl="isEmp := isEmpty(queue)" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.145.0" expl="isEmp := isEmpty(queue)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main&#39;vc.145.0.0" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="6.41" steps="15476"/></proof>
    </goal>
    <goal name="main&#39;vc.145.0.1" expl="isEmp := isEmpty(queue)" proved="true">
    <transf name="assert" proved="true" arg1="(typeofRgn s1 (img_rep s1 s1.pool) (Cons Node Nil))">
     <goal name="main&#39;vc.145.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.23" steps="640"/></proof>
     </goal>
     <goal name="main&#39;vc.145.0.1.1" expl="isEmp := isEmpty(queue)" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="main&#39;vc.145.0.1.1.0" expl="isEmp := isEmpty(queue)" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="main&#39;vc.145.0.1.1.0.0" expl="isEmp := isEmpty(queue)" proved="true">
       <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="73.34" steps="132195"/></proof>
       <proof prover="4"><result status="valid" time="5.39" steps="3572773"/></proof>
       <proof prover="6" timelimit="80"><result status="valid" time="10.41" steps="476331"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="main&#39;vc.145.0.2" expl="isEmp := isEmpty(queue)" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="8.15" steps="18285"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.146" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="2.87" steps="10295"/></proof>
  </goal>
  <goal name="main&#39;vc.147" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.12" steps="23923"/></proof>
  </goal>
  <goal name="main&#39;vc.148" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="43.05" steps="67388"/></proof>
  </goal>
  <goal name="main&#39;vc.149" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.149.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.149.0.0" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="40.01" steps="52355"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.150" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.22" steps="67200"/></proof>
  </goal>
  <goal name="main&#39;vc.151" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.47" steps="63833"/></proof>
  </goal>
  <goal name="main&#39;vc.152" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.30" steps="63871"/></proof>
  </goal>
  <goal name="main&#39;vc.153" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.41" steps="64072"/></proof>
  </goal>
  <goal name="main&#39;vc.154" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="42.37" steps="67261"/></proof>
  </goal>
  <goal name="main&#39;vc.155" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="46.67" steps="67316"/></proof>
  </goal>
  <goal name="main&#39;vc.156" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="40.84" steps="60153"/></proof>
  </goal>
  <goal name="main&#39;vc.157" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="41.55" steps="45673"/></proof>
  </goal>
  <goal name="main&#39;vc.158" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="42.88" steps="63967"/></proof>
  </goal>
  <goal name="main&#39;vc.159" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="48.31" steps="70204"/></proof>
  </goal>
  <goal name="main&#39;vc.160" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="51.27" steps="81398"/></proof>
  </goal>
  <goal name="main&#39;vc.161" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="716"/></proof>
  </goal>
  <goal name="main&#39;vc.162" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.162.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.162.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="106.88" steps="146922"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="10.74" steps="23304"/></proof>
  </goal>
  <goal name="main&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.74" steps="1324440"/></proof>
  </goal>
  <goal name="main&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.03" steps="28529"/></proof>
  </goal>
  <goal name="main&#39;vc.166" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="733"/></proof>
  </goal>
  <goal name="main&#39;vc.167" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="19.25" steps="43963"/></proof>
  </goal>
  <goal name="main&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="7.52" steps="13132"/></proof>
  </goal>
  <goal name="main&#39;vc.169" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="724"/></proof>
  </goal>
  <goal name="main&#39;vc.170" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="724"/></proof>
  </goal>
  <goal name="main&#39;vc.171" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.172" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.173" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.174" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="570"/></proof>
  </goal>
  <goal name="main&#39;vc.175" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="571"/></proof>
  </goal>
  <goal name="main&#39;vc.176" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.177" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.178" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.179" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.180" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.181" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.182" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.183" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.184" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.185" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.186" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.187" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.188" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.189" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.190" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.17" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.191" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.192" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.192.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.192.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.61" steps="1832"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.193" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="590"/></proof>
  </goal>
  <goal name="main&#39;vc.194" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.195" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="589"/></proof>
  </goal>
  <goal name="main&#39;vc.196" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.197" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.21" steps="588"/></proof>
  </goal>
  <goal name="main&#39;vc.198" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="572"/></proof>
  </goal>
  <goal name="main&#39;vc.201" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.202" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.203" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.204" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="542"/></proof>
  </goal>
  <goal name="main&#39;vc.205" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="543"/></proof>
  </goal>
  <goal name="main&#39;vc.206" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.207" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.208" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.209" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.210" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.14" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.211" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.212" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.213" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.214" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.215" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.216" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.217" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.218" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.219" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.220" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.221" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.222" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.222.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.222.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.55" steps="1720"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.223" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.18" steps="561"/></proof>
  </goal>
  <goal name="main&#39;vc.224" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.20" steps="562"/></proof>
  </goal>
  <goal name="main&#39;vc.225" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.226" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.19" steps="560"/></proof>
  </goal>
  <goal name="main&#39;vc.227" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.228" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.15" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.229" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="544"/></proof>
  </goal>
  <goal name="main&#39;vc.230" expl="assertion" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="436"/></proof>
  </goal>
  <goal name="main&#39;vc.231" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.44" steps="1367"/></proof>
  </goal>
  <goal name="main&#39;vc.232" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="438"/></proof>
  </goal>
  <goal name="main&#39;vc.233" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="438"/></proof>
  </goal>
  <goal name="main&#39;vc.234" expl="isEmp := isEmpty(queue)" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="439"/></proof>
  </goal>
  <goal name="main&#39;vc.235" expl="locals type invariant" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.98" steps="4844"/></proof>
  </goal>
  <goal name="main&#39;vc.236" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="3.23" steps="9437"/></proof>
  </goal>
  <goal name="main&#39;vc.237" expl="wr ({queue} union {queue}`rep)`slots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="13.25" steps="42921"/></proof>
  </goal>
  <goal name="main&#39;vc.238" expl="wr ({dist} union {queue} union {queue}`rep)`dSlots" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.78" steps="43202"/></proof>
  </goal>
  <goal name="main&#39;vc.239" expl="wr ({queue} union {queue}`rep)`sntl" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.62" steps="39520"/></proof>
  </goal>
  <goal name="main&#39;vc.240" expl="wr ({queue} union {queue}`rep)`sibling" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.82" steps="41733"/></proof>
  </goal>
  <goal name="main&#39;vc.241" expl="wr ({queue} union {queue}`rep)`prev" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.47" steps="41764"/></proof>
  </goal>
  <goal name="main&#39;vc.242" expl="wr ({queue} union {queue}`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.81" steps="38602"/></proof>
  </goal>
  <goal name="main&#39;vc.243" expl="wr ({queue} union {queue}`rep)`child" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.94" steps="38662"/></proof>
  </goal>
  <goal name="main&#39;vc.244" expl="wr ({queue} union {queue}`rep)`rep" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.67" steps="38042"/></proof>
  </goal>
  <goal name="main&#39;vc.245" expl="wr ({queue} union {queue}`rep)`tag" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.91" steps="39376"/></proof>
  </goal>
  <goal name="main&#39;vc.246" expl="wr ({queue} union {queue}`rep)`size" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="11.88" steps="38760"/></proof>
  </goal>
  <goal name="main&#39;vc.247" expl="wr ({queue} union {queue}`rep)`length" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.39" steps="45248"/></proof>
  </goal>
  <goal name="main&#39;vc.248" expl="wr ({queue} union {queue}`rep)`key" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="14.39" steps="41958"/></proof>
  </goal>
  <goal name="main&#39;vc.249" expl="wr ({dist} union {queue} union {queue}`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="13.15" steps="44543"/></proof>
  </goal>
  <goal name="main&#39;vc.250" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.13" steps="472"/></proof>
  </goal>
  <goal name="main&#39;vc.251" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.251.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.251.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.00" steps="46744"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.252" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="20.67" steps="50230"/></proof>
  </goal>
  <goal name="main&#39;vc.253" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.92" steps="3964"/></proof>
  </goal>
  <goal name="main&#39;vc.254" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="474"/></proof>
  </goal>
  <goal name="main&#39;vc.255" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="32.70" steps="90349"/></proof>
  </goal>
  <goal name="main&#39;vc.256" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.16" steps="483"/></proof>
  </goal>
  <goal name="main&#39;vc.257" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.55" steps="43430"/></proof>
  </goal>
  <goal name="main&#39;vc.258" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="478"/></proof>
  </goal>
  <goal name="main&#39;vc.259" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.12" steps="366"/></proof>
  </goal>
  <goal name="main&#39;vc.260" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="367"/></proof>
  </goal>
  <goal name="main&#39;vc.261" expl="postcondition" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="0.11" steps="368"/></proof>
  </goal>
  <goal name="main&#39;vc.262" expl="wr (pool union pool`rep)`slots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.262.0" expl="wr (pool union pool`rep)`slots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.262.0.0" expl="wr (pool union pool`rep)`slots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="12.33" steps="23953"/></proof>
    <proof prover="4"><result status="valid" time="0.60" steps="1160455"/></proof>
    <proof prover="6" timelimit="80"><result status="valid" time="12.88" steps="1027081"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.263" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.263.0" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.263.0.0" expl="wr ({} union pool union pool`rep)`dSlots" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="25.87" steps="50316"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.264" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.264.0" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="main&#39;vc.264.0.0" expl="wr ({} union pool union pool`rep)`sntl" proved="true">
    <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.29" steps="32574"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.265" expl="wr (pool union pool`rep)`sibling" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="main&#39;vc.265.0" expl="wr (pool union pool`rep)`sibling" proved="true">
   <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="16.68" steps="32399"/></proof>
   <proof prover="4"><result status="valid" time="0.75" steps="1286974"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.266" expl="wr (pool union pool`rep)`prev" proved="true">
  <proof prover="4"><result status="valid" time="0.80" steps="1229257"/></proof>
  </goal>
  <goal name="main&#39;vc.267" expl="wr ({} union pool union pool`rep)`head" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="61.16" steps="80801"/></proof>
  <proof prover="4"><result status="valid" time="3.26" steps="2288159"/></proof>
  </goal>
  <goal name="main&#39;vc.268" expl="wr (pool union pool`rep)`child" proved="true">
  <proof prover="4"><result status="valid" time="0.86" steps="1231193"/></proof>
  </goal>
  <goal name="main&#39;vc.269" expl="wr ({} union pool union pool union pool`rep)`rep" proved="true">
  <proof prover="4"><result status="valid" time="3.97" steps="2399600"/></proof>
  </goal>
  <goal name="main&#39;vc.270" expl="wr (pool union pool`rep)`tag" proved="true">
  <proof prover="4"><result status="valid" time="0.85" steps="1276064"/></proof>
  </goal>
  <goal name="main&#39;vc.271" expl="wr ({} union pool union pool`rep)`size" proved="true">
  <proof prover="4"><result status="valid" time="3.98" steps="2399204"/></proof>
  </goal>
  <goal name="main&#39;vc.272" expl="wr (pool union pool`rep)`length" proved="true">
  <proof prover="4"><result status="valid" time="0.88" steps="1266511"/></proof>
  </goal>
  <goal name="main&#39;vc.273" expl="wr (pool union pool`rep)`key" proved="true">
  <proof prover="4"><result status="valid" time="0.90" steps="1279016"/></proof>
  </goal>
  <goal name="main&#39;vc.274" expl="wr ({} union pool union pool`rep)`dLength" proved="true">
  <proof prover="0" timelimit="80" memlimit="16000"><result status="valid" time="18.16" steps="33482"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main_Link" proved="true">
 <goal name="pqueuePub_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.03" steps="4"/></proof>
 </goal>
 <goal name="left_pqueueI_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="141"/></proof>
 </goal>
 <goal name="right_pqueueI_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="0.07" steps="146"/></proof>
 </goal>
 <goal name="pqueueR_holds_in_main" proved="true">
 <proof prover="0" timelimit="100" memlimit="16000"><result status="valid" time="2.87" steps="8721"/></proof>
 </goal>
</theory>
</file>
</why3session>
